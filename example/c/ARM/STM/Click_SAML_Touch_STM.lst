;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 11.2.2019. 11:04:34
;----------------------------------------------

;Address Opcode 	ASM
____SysVT:
0x0000	0xFFFC2000  	536936444
0x0004	0x19FD0000  	6653
0x0008	0x18850000  	6277
0x000C	0x18850000  	6277
0x0010	0x18850000  	6277
0x0014	0x18850000  	6277
0x0018	0x18850000  	6277
0x001C	0x18850000  	6277
0x0020	0x18850000  	6277
0x0024	0x18850000  	6277
0x0028	0x18850000  	6277
0x002C	0x18850000  	6277
0x0030	0x18850000  	6277
0x0034	0x18850000  	6277
0x0038	0x18850000  	6277
0x003C	0x18850000  	6277
0x0040	0x18850000  	6277
0x0044	0x18850000  	6277
0x0048	0x18850000  	6277
0x004C	0x18850000  	6277
0x0050	0x18850000  	6277
0x0054	0x18850000  	6277
0x0058	0x18850000  	6277
0x005C	0x18850000  	6277
0x0060	0x18850000  	6277
0x0064	0x18850000  	6277
0x0068	0x18850000  	6277
0x006C	0x18850000  	6277
0x0070	0x18850000  	6277
0x0074	0x18850000  	6277
0x0078	0x18850000  	6277
0x007C	0x18850000  	6277
0x0080	0x18850000  	6277
0x0084	0x18850000  	6277
0x0088	0x18850000  	6277
0x008C	0x18850000  	6277
0x0090	0x18850000  	6277
0x0094	0x18850000  	6277
0x0098	0x18850000  	6277
0x009C	0x18850000  	6277
0x00A0	0x18850000  	6277
0x00A4	0x18850000  	6277
0x00A8	0x18850000  	6277
0x00AC	0x18850000  	6277
0x00B0	0x188D0000  	6285
0x00B4	0x18850000  	6277
0x00B8	0x18850000  	6277
0x00BC	0x18850000  	6277
0x00C0	0x18850000  	6277
0x00C4	0x18850000  	6277
0x00C8	0x18850000  	6277
0x00CC	0x18850000  	6277
0x00D0	0x18850000  	6277
0x00D4	0x18850000  	6277
0x00D8	0x18850000  	6277
0x00DC	0x18850000  	6277
0x00E0	0x18850000  	6277
0x00E4	0x18850000  	6277
0x00E8	0x18850000  	6277
0x00EC	0x18850000  	6277
0x00F0	0x18850000  	6277
0x00F4	0x18850000  	6277
0x00F8	0x18850000  	6277
0x00FC	0x18850000  	6277
0x0100	0x18850000  	6277
0x0104	0x18850000  	6277
0x0108	0x18850000  	6277
0x010C	0x18850000  	6277
0x0110	0x18850000  	6277
0x0114	0x18850000  	6277
0x0118	0x18850000  	6277
0x011C	0x18850000  	6277
0x0120	0x18850000  	6277
0x0124	0x18850000  	6277
0x0128	0x18850000  	6277
0x012C	0x18850000  	6277
0x0130	0x18850000  	6277
0x0134	0x18850000  	6277
0x0138	0x18850000  	6277
0x013C	0x18850000  	6277
0x0140	0x18850000  	6277
0x0144	0x18850000  	6277
0x0148	0x18850000  	6277
0x014C	0x18850000  	6277
; end of ____SysVT
_main:
;Click_SAML_Touch_STM.c, 97 :: 		void main()
0x19FC	0xF7FFFF5C  BL	6328
0x1A00	0xF000FA9A  BL	7992
0x1A04	0xF000F80A  BL	6684
0x1A08	0xF000FA56  BL	7864
;Click_SAML_Touch_STM.c, 99 :: 		systemInit();
0x1A0C	0xF7FFFF1A  BL	_systemInit+0
;Click_SAML_Touch_STM.c, 100 :: 		applicationInit();
0x1A10	0xF7FFFEF8  BL	_applicationInit+0
;Click_SAML_Touch_STM.c, 102 :: 		while (1)
L_main6:
;Click_SAML_Touch_STM.c, 104 :: 		applicationTask();
0x1A14	0xF7FFFEA8  BL	_applicationTask+0
;Click_SAML_Touch_STM.c, 105 :: 		}
0x1A18	0xE7FC    B	L_main6
;Click_SAML_Touch_STM.c, 106 :: 		}
L_end_main:
L__main_end_loop:
0x1A1A	0xE7FE    B	L__main_end_loop
; end of _main
___CC2DW:
;__Lib_System_105_107.c, 28 :: 		
0x1610	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 30 :: 		
L_loopDW:
;__Lib_System_105_107.c, 31 :: 		
0x1612	0xF81C9B01  LDRB	R9, [R12], #1
;__Lib_System_105_107.c, 32 :: 		
0x1616	0xF80B9B01  STRB	R9, [R11], #1
;__Lib_System_105_107.c, 33 :: 		
0x161A	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_105_107.c, 34 :: 		
0x161E	0xD1F8    BNE	L_loopDW
;__Lib_System_105_107.c, 36 :: 		
L_end___CC2DW:
0x1620	0xB001    ADD	SP, SP, #4
0x1622	0x4770    BX	LR
; end of ___CC2DW
___FillZeros:
;__Lib_System_105_107.c, 70 :: 		
0x172C	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 72 :: 		
0x172E	0xF04F0900  MOV	R9, #0
;__Lib_System_105_107.c, 73 :: 		
0x1732	0xF04F0C00  MOV	R12, #0
;__Lib_System_105_107.c, 74 :: 		
0x1736	0xEBBD0F0A  CMP	SP, R10, LSL #0
;__Lib_System_105_107.c, 75 :: 		
0x173A	0xDC04    BGT	L_loopFZs
;__Lib_System_105_107.c, 76 :: 		
0x173C	0xEBBD0F0B  CMP	SP, R11, LSL #0
;__Lib_System_105_107.c, 77 :: 		
0x1740	0xDB01    BLT	L_loopFZs
;__Lib_System_105_107.c, 78 :: 		
0x1742	0x46D4    MOV	R12, R10
;__Lib_System_105_107.c, 79 :: 		
0x1744	0x46EA    MOV	R10, SP
;__Lib_System_105_107.c, 80 :: 		
L_loopFZs:
;__Lib_System_105_107.c, 81 :: 		
0x1746	0xF84B9B04  STR	R9, [R11], #4
;__Lib_System_105_107.c, 82 :: 		
0x174A	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_105_107.c, 83 :: 		
0x174E	0xD1FA    BNE	L_loopFZs
;__Lib_System_105_107.c, 84 :: 		
0x1750	0xEBBC0F0A  CMP	R12, R10, LSL #0
;__Lib_System_105_107.c, 85 :: 		
0x1754	0xDD05    BLE	L_norep
;__Lib_System_105_107.c, 86 :: 		
0x1756	0x46E2    MOV	R10, R12
;__Lib_System_105_107.c, 87 :: 		
0x1758	0xF8D9B000  LDR	R11, [R9, #0]
;__Lib_System_105_107.c, 88 :: 		
0x175C	0xF10B0B04  ADD	R11, R11, #4
;__Lib_System_105_107.c, 89 :: 		
0x1760	0xE7F1    B	L_loopFZs
;__Lib_System_105_107.c, 90 :: 		
L_norep:
;__Lib_System_105_107.c, 92 :: 		
L_end___FillZeros:
0x1762	0xB001    ADD	SP, SP, #4
0x1764	0x4770    BX	LR
; end of ___FillZeros
_systemInit:
;Click_SAML_Touch_STM.c, 45 :: 		void systemInit()
0x1844	0xB081    SUB	SP, SP, #4
0x1846	0xF8CDE000  STR	LR, [SP, #0]
;Click_SAML_Touch_STM.c, 47 :: 		mikrobus_uartInit( _MIKROBUS1, &_SAMLTOUCH_UART_CFG[0] );
0x184A	0x480B    LDR	R0, [PC, #44]
0x184C	0x4601    MOV	R1, R0
0x184E	0x2000    MOVS	R0, #0
0x1850	0xF7FFFD7C  BL	_mikrobus_uartInit+0
;Click_SAML_Touch_STM.c, 48 :: 		mikrobus_logInit( _LOG_USBUART_A, 115200 );
0x1854	0xF44F31E1  MOV	R1, #115200
0x1858	0x2020    MOVS	R0, #32
0x185A	0xF7FFFD8F  BL	_mikrobus_logInit+0
;Click_SAML_Touch_STM.c, 49 :: 		mikrobus_logWrite( "---- System Init ----", _LOG_LINE );
0x185E	0x4807    LDR	R0, [PC, #28]
0x1860	0x2102    MOVS	R1, #2
0x1862	0xF7FFFD0F  BL	_mikrobus_logWrite+0
;Click_SAML_Touch_STM.c, 50 :: 		mikrobus_logWrite( "---------------------", _LOG_LINE );
0x1866	0x4806    LDR	R0, [PC, #24]
0x1868	0x2102    MOVS	R1, #2
0x186A	0xF7FFFD0B  BL	_mikrobus_logWrite+0
;Click_SAML_Touch_STM.c, 51 :: 		}
L_end_systemInit:
0x186E	0xF8DDE000  LDR	LR, [SP, #0]
0x1872	0xB001    ADD	SP, SP, #4
0x1874	0x4770    BX	LR
0x1876	0xBF00    NOP
0x1878	0x1E880000  	__SAMLTOUCH_UART_CFG+0
0x187C	0x00002000  	?lstr1_Click_SAML_Touch_STM+0
0x1880	0x00162000  	?lstr2_Click_SAML_Touch_STM+0
; end of _systemInit
_mikrobus_uartInit:
;easymx_v7_STM32F107VC.c, 253 :: 		T_mikrobus_ret mikrobus_uartInit(T_mikrobus_soc bus, const uint32_t *cfg)
; cfg start address is: 4 (R1)
; bus start address is: 0 (R0)
0x134C	0xB081    SUB	SP, SP, #4
0x134E	0xF8CDE000  STR	LR, [SP, #0]
; cfg end address is: 4 (R1)
; bus end address is: 0 (R0)
; bus start address is: 0 (R0)
; cfg start address is: 4 (R1)
;easymx_v7_STM32F107VC.c, 255 :: 		switch( bus )
0x1352	0xE009    B	L_mikrobus_uartInit83
; bus end address is: 0 (R0)
;easymx_v7_STM32F107VC.c, 258 :: 		case _MIKROBUS1 : return _uartInit_1( cfg );
L_mikrobus_uartInit85:
0x1354	0x4608    MOV	R0, R1
; cfg end address is: 4 (R1)
0x1356	0xF7FFFD71  BL	easymx_v7_STM32F107VC__uartInit_1+0
0x135A	0xE00A    B	L_end_mikrobus_uartInit
;easymx_v7_STM32F107VC.c, 261 :: 		case _MIKROBUS2 : return _uartInit_2( cfg );
L_mikrobus_uartInit86:
; cfg start address is: 4 (R1)
0x135C	0x4608    MOV	R0, R1
; cfg end address is: 4 (R1)
0x135E	0xF7FFFDCD  BL	easymx_v7_STM32F107VC__uartInit_2+0
0x1362	0xE006    B	L_end_mikrobus_uartInit
;easymx_v7_STM32F107VC.c, 275 :: 		default : return _MIKROBUS_ERR_BUS;
L_mikrobus_uartInit87:
0x1364	0x2001    MOVS	R0, #1
0x1366	0xE004    B	L_end_mikrobus_uartInit
;easymx_v7_STM32F107VC.c, 276 :: 		}
L_mikrobus_uartInit83:
; cfg start address is: 4 (R1)
; bus start address is: 0 (R0)
0x1368	0x2800    CMP	R0, #0
0x136A	0xD0F3    BEQ	L_mikrobus_uartInit85
0x136C	0x2801    CMP	R0, #1
0x136E	0xD0F5    BEQ	L_mikrobus_uartInit86
; bus end address is: 0 (R0)
; cfg end address is: 4 (R1)
0x1370	0xE7F8    B	L_mikrobus_uartInit87
;easymx_v7_STM32F107VC.c, 278 :: 		}
L_end_mikrobus_uartInit:
0x1372	0xF8DDE000  LDR	LR, [SP, #0]
0x1376	0xB001    ADD	SP, SP, #4
0x1378	0x4770    BX	LR
; end of _mikrobus_uartInit
easymx_v7_STM32F107VC__uartInit_1:
;__em_f107vc_uart.c, 29 :: 		static T_mikrobus_ret _uartInit_1(const uint32_t* cfg)
; cfg start address is: 0 (R0)
0x0E3C	0xB081    SUB	SP, SP, #4
0x0E3E	0xF8CDE000  STR	LR, [SP, #0]
; cfg end address is: 0 (R0)
; cfg start address is: 0 (R0)
;__em_f107vc_uart.c, 31 :: 		UART3_Init_Advanced( (unsigned long) cfg[0], (unsigned int) cfg[1], (unsigned int) cfg[2], (unsigned int)cfg[3], &_GPIO_MODULE_USART3_PD89);
0x0E42	0x4D0B    LDR	R5, [PC, #44]
0x0E44	0xF200010C  ADDW	R1, R0, #12
0x0E48	0x680C    LDR	R4, [R1, #0]
0x0E4A	0xF2000108  ADDW	R1, R0, #8
0x0E4E	0x680B    LDR	R3, [R1, #0]
0x0E50	0x1D01    ADDS	R1, R0, #4
0x0E52	0x680A    LDR	R2, [R1, #0]
0x0E54	0x6801    LDR	R1, [R0, #0]
; cfg end address is: 0 (R0)
0x0E56	0x4608    MOV	R0, R1
0x0E58	0xB291    UXTH	R1, R2
0x0E5A	0xB29A    UXTH	R2, R3
0x0E5C	0xB2A3    UXTH	R3, R4
0x0E5E	0xB420    PUSH	(R5)
0x0E60	0xF7FFFF8C  BL	_UART3_Init_Advanced+0
0x0E64	0xB001    ADD	SP, SP, #4
;__em_f107vc_uart.c, 32 :: 		return _MIKROBUS_OK;
0x0E66	0x2000    MOVS	R0, __MIKROBUS_OK
;__em_f107vc_uart.c, 33 :: 		}
L_end__uartInit_1:
0x0E68	0xF8DDE000  LDR	LR, [SP, #0]
0x0E6C	0xB001    ADD	SP, SP, #4
0x0E6E	0x4770    BX	LR
0x0E70	0x1DA80000  	__GPIO_MODULE_USART3_PD89+0
; end of easymx_v7_STM32F107VC__uartInit_1
_UART3_Init_Advanced:
;__Lib_UART_123_45.c, 384 :: 		
; stop_bits start address is: 12 (R3)
; parity start address is: 8 (R2)
; data_bits start address is: 4 (R1)
; baud_rate start address is: 0 (R0)
0x0D7C	0xB081    SUB	SP, SP, #4
0x0D7E	0xF8CDE000  STR	LR, [SP, #0]
; stop_bits end address is: 12 (R3)
; parity end address is: 8 (R2)
; data_bits end address is: 4 (R1)
; baud_rate end address is: 0 (R0)
; baud_rate start address is: 0 (R0)
; data_bits start address is: 4 (R1)
; parity start address is: 8 (R2)
; stop_bits start address is: 12 (R3)
; module start address is: 20 (R5)
0x0D82	0x9D01    LDR	R5, [SP, #4]
;__Lib_UART_123_45.c, 386 :: 		
0x0D84	0x462C    MOV	R4, R5
; module end address is: 20 (R5)
0x0D86	0xB410    PUSH	(R4)
; parity end address is: 8 (R2)
0x0D88	0xB408    PUSH	(R3)
0x0D8A	0xB293    UXTH	R3, R2
0x0D8C	0xB28A    UXTH	R2, R1
; data_bits end address is: 4 (R1)
0x0D8E	0x4601    MOV	R1, R0
; baud_rate end address is: 0 (R0)
0x0D90	0x4803    LDR	R0, [PC, #12]
; stop_bits end address is: 12 (R3)
0x0D92	0xF7FFFCC3  BL	__Lib_UART_123_45_UARTx_Init_Advanced+0
0x0D96	0xB002    ADD	SP, SP, #8
;__Lib_UART_123_45.c, 387 :: 		
L_end_UART3_Init_Advanced:
0x0D98	0xF8DDE000  LDR	LR, [SP, #0]
0x0D9C	0xB001    ADD	SP, SP, #4
0x0D9E	0x4770    BX	LR
0x0DA0	0x48004000  	USART3_SR+0
; end of _UART3_Init_Advanced
__Lib_UART_123_45_UARTx_Init_Advanced:
;__Lib_UART_123_45.c, 294 :: 		
; parity start address is: 12 (R3)
; baud_rate start address is: 4 (R1)
; UART_Base start address is: 0 (R0)
0x071C	0xB089    SUB	SP, SP, #36
0x071E	0xF8CDE000  STR	LR, [SP, #0]
0x0722	0x4683    MOV	R11, R0
0x0724	0xB298    UXTH	R0, R3
0x0726	0x468C    MOV	R12, R1
; parity end address is: 12 (R3)
; baud_rate end address is: 4 (R1)
; UART_Base end address is: 0 (R0)
; UART_Base start address is: 44 (R11)
; baud_rate start address is: 48 (R12)
; parity start address is: 0 (R0)
; stop_bits start address is: 4 (R1)
0x0728	0xF8BD1024  LDRH	R1, [SP, #36]
; module start address is: 24 (R6)
0x072C	0x9E0A    LDR	R6, [SP, #40]
;__Lib_UART_123_45.c, 298 :: 		
0x072E	0xAC04    ADD	R4, SP, #16
0x0730	0xF8AD1004  STRH	R1, [SP, #4]
0x0734	0xF8AD0008  STRH	R0, [SP, #8]
0x0738	0x4620    MOV	R0, R4
0x073A	0xF7FFFF23  BL	_RCC_GetClocksFrequency+0
0x073E	0xF8BD0008  LDRH	R0, [SP, #8]
0x0742	0xF8BD1004  LDRH	R1, [SP, #4]
;__Lib_UART_123_45.c, 301 :: 		
0x0746	0x4C64    LDR	R4, [PC, #400]
0x0748	0x45A3    CMP	R11, R4
0x074A	0xD112    BNE	L___Lib_UART_123_45_UARTx_Init_Advanced15
;__Lib_UART_123_45.c, 302 :: 		
0x074C	0x2501    MOVS	R5, #1
0x074E	0xB26D    SXTB	R5, R5
0x0750	0x4C62    LDR	R4, [PC, #392]
0x0752	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 303 :: 		
0x0754	0x4D62    LDR	R5, [PC, #392]
0x0756	0x4C63    LDR	R4, [PC, #396]
0x0758	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 304 :: 		
0x075A	0x4D63    LDR	R5, [PC, #396]
0x075C	0x4C63    LDR	R4, [PC, #396]
0x075E	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 305 :: 		
0x0760	0x4D63    LDR	R5, [PC, #396]
0x0762	0x4C64    LDR	R4, [PC, #400]
0x0764	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 306 :: 		
0x0766	0x4D64    LDR	R5, [PC, #400]
0x0768	0x4C64    LDR	R4, [PC, #400]
0x076A	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 307 :: 		
0x076C	0x9C07    LDR	R4, [SP, #28]
0x076E	0x9403    STR	R4, [SP, #12]
;__Lib_UART_123_45.c, 308 :: 		
0x0770	0xE056    B	L___Lib_UART_123_45_UARTx_Init_Advanced16
L___Lib_UART_123_45_UARTx_Init_Advanced15:
;__Lib_UART_123_45.c, 309 :: 		
0x0772	0x4C63    LDR	R4, [PC, #396]
0x0774	0x45A3    CMP	R11, R4
0x0776	0xD112    BNE	L___Lib_UART_123_45_UARTx_Init_Advanced17
;__Lib_UART_123_45.c, 310 :: 		
0x0778	0x2501    MOVS	R5, #1
0x077A	0xB26D    SXTB	R5, R5
0x077C	0x4C61    LDR	R4, [PC, #388]
0x077E	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 311 :: 		
0x0780	0x4D61    LDR	R5, [PC, #388]
0x0782	0x4C58    LDR	R4, [PC, #352]
0x0784	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 312 :: 		
0x0786	0x4D61    LDR	R5, [PC, #388]
0x0788	0x4C58    LDR	R4, [PC, #352]
0x078A	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 313 :: 		
0x078C	0x4D60    LDR	R5, [PC, #384]
0x078E	0x4C59    LDR	R4, [PC, #356]
0x0790	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 314 :: 		
0x0792	0x4D60    LDR	R5, [PC, #384]
0x0794	0x4C59    LDR	R4, [PC, #356]
0x0796	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 315 :: 		
0x0798	0x9C06    LDR	R4, [SP, #24]
0x079A	0x9403    STR	R4, [SP, #12]
;__Lib_UART_123_45.c, 316 :: 		
0x079C	0xE040    B	L___Lib_UART_123_45_UARTx_Init_Advanced18
L___Lib_UART_123_45_UARTx_Init_Advanced17:
;__Lib_UART_123_45.c, 317 :: 		
0x079E	0x4C5E    LDR	R4, [PC, #376]
0x07A0	0x45A3    CMP	R11, R4
0x07A2	0xD112    BNE	L___Lib_UART_123_45_UARTx_Init_Advanced19
;__Lib_UART_123_45.c, 318 :: 		
0x07A4	0x2501    MOVS	R5, #1
0x07A6	0xB26D    SXTB	R5, R5
0x07A8	0x4C5C    LDR	R4, [PC, #368]
0x07AA	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 319 :: 		
0x07AC	0x4D5C    LDR	R5, [PC, #368]
0x07AE	0x4C4D    LDR	R4, [PC, #308]
0x07B0	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 320 :: 		
0x07B2	0x4D5C    LDR	R5, [PC, #368]
0x07B4	0x4C4D    LDR	R4, [PC, #308]
0x07B6	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 321 :: 		
0x07B8	0x4D5B    LDR	R5, [PC, #364]
0x07BA	0x4C4E    LDR	R4, [PC, #312]
0x07BC	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 322 :: 		
0x07BE	0x4D5B    LDR	R5, [PC, #364]
0x07C0	0x4C4E    LDR	R4, [PC, #312]
0x07C2	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 323 :: 		
0x07C4	0x9C06    LDR	R4, [SP, #24]
0x07C6	0x9403    STR	R4, [SP, #12]
;__Lib_UART_123_45.c, 324 :: 		
0x07C8	0xE02A    B	L___Lib_UART_123_45_UARTx_Init_Advanced20
L___Lib_UART_123_45_UARTx_Init_Advanced19:
;__Lib_UART_123_45.c, 325 :: 		
0x07CA	0x4C59    LDR	R4, [PC, #356]
0x07CC	0x45A3    CMP	R11, R4
0x07CE	0xD112    BNE	L___Lib_UART_123_45_UARTx_Init_Advanced21
;__Lib_UART_123_45.c, 326 :: 		
0x07D0	0x2501    MOVS	R5, #1
0x07D2	0xB26D    SXTB	R5, R5
0x07D4	0x4C57    LDR	R4, [PC, #348]
0x07D6	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 327 :: 		
0x07D8	0x4D57    LDR	R5, [PC, #348]
0x07DA	0x4C42    LDR	R4, [PC, #264]
0x07DC	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 328 :: 		
0x07DE	0x4D57    LDR	R5, [PC, #348]
0x07E0	0x4C42    LDR	R4, [PC, #264]
0x07E2	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 329 :: 		
0x07E4	0x4D56    LDR	R5, [PC, #344]
0x07E6	0x4C43    LDR	R4, [PC, #268]
0x07E8	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 330 :: 		
0x07EA	0x4D56    LDR	R5, [PC, #344]
0x07EC	0x4C43    LDR	R4, [PC, #268]
0x07EE	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 331 :: 		
0x07F0	0x9C06    LDR	R4, [SP, #24]
0x07F2	0x9403    STR	R4, [SP, #12]
;__Lib_UART_123_45.c, 332 :: 		
0x07F4	0xE014    B	L___Lib_UART_123_45_UARTx_Init_Advanced22
L___Lib_UART_123_45_UARTx_Init_Advanced21:
;__Lib_UART_123_45.c, 333 :: 		
0x07F6	0x4C54    LDR	R4, [PC, #336]
0x07F8	0x45A3    CMP	R11, R4
0x07FA	0xD111    BNE	L___Lib_UART_123_45_UARTx_Init_Advanced23
;__Lib_UART_123_45.c, 334 :: 		
0x07FC	0x2501    MOVS	R5, #1
0x07FE	0xB26D    SXTB	R5, R5
0x0800	0x4C52    LDR	R4, [PC, #328]
0x0802	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 335 :: 		
0x0804	0x4D52    LDR	R5, [PC, #328]
0x0806	0x4C37    LDR	R4, [PC, #220]
0x0808	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 336 :: 		
0x080A	0x4D52    LDR	R5, [PC, #328]
0x080C	0x4C37    LDR	R4, [PC, #220]
0x080E	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 337 :: 		
0x0810	0x4D51    LDR	R5, [PC, #324]
0x0812	0x4C38    LDR	R4, [PC, #224]
0x0814	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 338 :: 		
0x0816	0x4D51    LDR	R5, [PC, #324]
0x0818	0x4C38    LDR	R4, [PC, #224]
0x081A	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 339 :: 		
0x081C	0x9C06    LDR	R4, [SP, #24]
0x081E	0x9403    STR	R4, [SP, #12]
;__Lib_UART_123_45.c, 340 :: 		
L___Lib_UART_123_45_UARTx_Init_Advanced23:
L___Lib_UART_123_45_UARTx_Init_Advanced22:
L___Lib_UART_123_45_UARTx_Init_Advanced20:
L___Lib_UART_123_45_UARTx_Init_Advanced18:
L___Lib_UART_123_45_UARTx_Init_Advanced16:
;__Lib_UART_123_45.c, 342 :: 		
0x0820	0xF8AD1004  STRH	R1, [SP, #4]
; module end address is: 24 (R6)
0x0824	0xF8AD0008  STRH	R0, [SP, #8]
0x0828	0x4630    MOV	R0, R6
0x082A	0xF7FFFE23  BL	_GPIO_Alternate_Function_Enable+0
0x082E	0xF8BD0008  LDRH	R0, [SP, #8]
0x0832	0xF8BD1004  LDRH	R1, [SP, #4]
;__Lib_UART_123_45.c, 344 :: 		
0x0836	0xF10B0510  ADD	R5, R11, #16
0x083A	0x2400    MOVS	R4, #0
0x083C	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45.c, 345 :: 		
0x083E	0xF10B0510  ADD	R5, R11, #16
0x0842	0x682C    LDR	R4, [R5, #0]
0x0844	0x430C    ORRS	R4, R1
; stop_bits end address is: 4 (R1)
0x0846	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45.c, 346 :: 		
0x0848	0xF10B050C  ADD	R5, R11, #12
0x084C	0x2400    MOVS	R4, #0
0x084E	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45.c, 348 :: 		
0x0850	0xB118    CBZ	R0, L___Lib_UART_123_45_UARTx_Init_Advanced38
;__Lib_UART_123_45.c, 349 :: 		
0x0852	0xF4406080  ORR	R0, R0, #1024
0x0856	0xB280    UXTH	R0, R0
; parity end address is: 0 (R0)
;__Lib_UART_123_45.c, 350 :: 		
0x0858	0xE7FF    B	L___Lib_UART_123_45_UARTx_Init_Advanced24
L___Lib_UART_123_45_UARTx_Init_Advanced38:
;__Lib_UART_123_45.c, 348 :: 		
;__Lib_UART_123_45.c, 350 :: 		
L___Lib_UART_123_45_UARTx_Init_Advanced24:
;__Lib_UART_123_45.c, 352 :: 		
; parity start address is: 0 (R0)
0x085A	0xF10B050C  ADD	R5, R11, #12
0x085E	0x682C    LDR	R4, [R5, #0]
0x0860	0x4304    ORRS	R4, R0
; parity end address is: 0 (R0)
0x0862	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45.c, 354 :: 		
0x0864	0xF10B060C  ADD	R6, R11, #12
0x0868	0x2501    MOVS	R5, #1
0x086A	0x6834    LDR	R4, [R6, #0]
0x086C	0xF365344D  BFI	R4, R5, #13, #1
0x0870	0x6034    STR	R4, [R6, #0]
;__Lib_UART_123_45.c, 355 :: 		
0x0872	0xF10B060C  ADD	R6, R11, #12
0x0876	0x2501    MOVS	R5, #1
0x0878	0x6834    LDR	R4, [R6, #0]
0x087A	0xF36504C3  BFI	R4, R5, #3, #1
0x087E	0x6034    STR	R4, [R6, #0]
;__Lib_UART_123_45.c, 356 :: 		
0x0880	0xF10B060C  ADD	R6, R11, #12
0x0884	0x2501    MOVS	R5, #1
0x0886	0x6834    LDR	R4, [R6, #0]
0x0888	0xF3650482  BFI	R4, R5, #2, #1
0x088C	0x6034    STR	R4, [R6, #0]
;__Lib_UART_123_45.c, 357 :: 		
0x088E	0xF10B0514  ADD	R5, R11, #20
0x0892	0x2400    MOVS	R4, #0
0x0894	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45.c, 362 :: 		
0x0896	0x9D03    LDR	R5, [SP, #12]
0x0898	0x2419    MOVS	R4, #25
0x089A	0x4365    MULS	R5, R4, R5
0x089C	0xEA4F048C  LSL	R4, R12, #2
; baud_rate end address is: 48 (R12)
0x08A0	0xFBB5F7F4  UDIV	R7, R5, R4
;__Lib_UART_123_45.c, 363 :: 		
0x08A4	0x2464    MOVS	R4, #100
0x08A6	0xFBB7F4F4  UDIV	R4, R7, R4
0x08AA	0x0126    LSLS	R6, R4, #4
;__Lib_UART_123_45.c, 365 :: 		
0x08AC	0x0935    LSRS	R5, R6, #4
0x08AE	0x2464    MOVS	R4, #100
0x08B0	0x436C    MULS	R4, R5, R4
0x08B2	0x1B3C    SUB	R4, R7, R4
;__Lib_UART_123_45.c, 366 :: 		
0x08B4	0x0124    LSLS	R4, R4, #4
0x08B6	0xF2040532  ADDW	R5, R4, #50
0x08BA	0x2464    MOVS	R4, #100
0x08BC	0xFBB5F4F4  UDIV	R4, R5, R4
0x08C0	0xF004040F  AND	R4, R4, #15
0x08C4	0xEA460404  ORR	R4, R6, R4, LSL #0
;__Lib_UART_123_45.c, 368 :: 		
0x08C8	0xF10B0508  ADD	R5, R11, #8
; UART_Base end address is: 44 (R11)
0x08CC	0xB2A4    UXTH	R4, R4
0x08CE	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45.c, 369 :: 		
L_end_UARTx_Init_Advanced:
0x08D0	0xF8DDE000  LDR	LR, [SP, #0]
0x08D4	0xB009    ADD	SP, SP, #36
0x08D6	0x4770    BX	LR
0x08D8	0x38004001  	USART1_SR+0
0x08DC	0x03384242  	RCC_APB2ENR+0
0x08E0	0x0BC10000  	_UART1_Write+0
0x08E4	0x02B02000  	_UART_Wr_Ptr+0
0x08E8	0x096D0000  	_UART1_Read+0
0x08EC	0x02B42000  	_UART_Rd_Ptr+0
0x08F0	0x0A8D0000  	_UART1_Data_Ready+0
0x08F4	0x02B82000  	_UART_Rdy_Ptr+0
0x08F8	0x0B350000  	_UART1_Tx_Idle+0
0x08FC	0x02BC2000  	_UART_Tx_Idle_Ptr+0
0x0900	0x44004000  	USART2_SR+0
0x0904	0x03C44242  	RCC_APB1ENR+0
0x0908	0x0C150000  	_UART2_Write+0
0x090C	0x0B1D0000  	_UART2_Read+0
0x0910	0x0B650000  	_UART2_Data_Ready+0
0x0914	0x0B4D0000  	_UART2_Tx_Idle+0
0x0918	0x48004000  	USART3_SR+0
0x091C	0x03C84242  	RCC_APB1ENR+0
0x0920	0x0BDD0000  	_UART3_Write+0
0x0924	0x0B050000  	_UART3_Read+0
0x0928	0x0ABD0000  	_UART3_Data_Ready+0
0x092C	0x0AA50000  	_UART3_Tx_Idle+0
0x0930	0x4C004000  	UART4_SR+0
0x0934	0x03CC4242  	RCC_APB1ENR+0
0x0938	0x0BF90000  	_UART4_Write+0
0x093C	0x0AED0000  	_UART4_Read+0
0x0940	0x0AD50000  	_UART4_Data_Ready+0
0x0944	0x09850000  	_UART4_Tx_Idle+0
0x0948	0x50004000  	UART5_SR+0
0x094C	0x03D04242  	RCC_APB1ENR+0
0x0950	0x0B7D0000  	_UART5_Write+0
0x0954	0x0A450000  	_UART5_Read+0
0x0958	0x0A750000  	_UART5_Data_Ready+0
0x095C	0x0A5D0000  	_UART5_Tx_Idle+0
; end of __Lib_UART_123_45_UARTx_Init_Advanced
_RCC_GetClocksFrequency:
;__Lib_System_105_107.c, 456 :: 		
; RCC_Clocks start address is: 0 (R0)
0x0584	0xB082    SUB	SP, SP, #8
0x0586	0xF8CDE000  STR	LR, [SP, #0]
0x058A	0x4603    MOV	R3, R0
; RCC_Clocks end address is: 0 (R0)
; RCC_Clocks start address is: 12 (R3)
;__Lib_System_105_107.c, 459 :: 		
0x058C	0x4619    MOV	R1, R3
0x058E	0x9101    STR	R1, [SP, #4]
0x0590	0xF7FFFF1E  BL	_Get_Fosc_kHz+0
0x0594	0xF24031E8  MOVW	R1, #1000
0x0598	0xFB00F201  MUL	R2, R0, R1
0x059C	0x9901    LDR	R1, [SP, #4]
0x059E	0x600A    STR	R2, [R1, #0]
;__Lib_System_105_107.c, 462 :: 		
0x05A0	0x491F    LDR	R1, [PC, #124]
0x05A2	0x7809    LDRB	R1, [R1, #0]
0x05A4	0xF3C11103  UBFX	R1, R1, #4, #4
; tmp start address is: 0 (R0)
0x05A8	0xB2C8    UXTB	R0, R1
;__Lib_System_105_107.c, 463 :: 		
0x05AA	0x491E    LDR	R1, [PC, #120]
0x05AC	0x1809    ADDS	R1, R1, R0
; tmp end address is: 0 (R0)
0x05AE	0x7808    LDRB	R0, [R1, #0]
; presc start address is: 0 (R0)
0x05B0	0xB2C0    UXTB	R0, R0
;__Lib_System_105_107.c, 465 :: 		
0x05B2	0x1D1A    ADDS	R2, R3, #4
0x05B4	0x6819    LDR	R1, [R3, #0]
0x05B6	0x40C1    LSRS	R1, R0
; presc end address is: 0 (R0)
0x05B8	0x6011    STR	R1, [R2, #0]
;__Lib_System_105_107.c, 467 :: 		
0x05BA	0x4919    LDR	R1, [PC, #100]
0x05BC	0x8809    LDRH	R1, [R1, #0]
0x05BE	0xF3C12102  UBFX	R1, R1, #8, #3
; tmp start address is: 0 (R0)
0x05C2	0xB288    UXTH	R0, R1
;__Lib_System_105_107.c, 468 :: 		
0x05C4	0x4917    LDR	R1, [PC, #92]
0x05C6	0x1809    ADDS	R1, R1, R0
; tmp end address is: 0 (R0)
0x05C8	0x7808    LDRB	R0, [R1, #0]
; presc start address is: 0 (R0)
0x05CA	0xB2C0    UXTB	R0, R0
;__Lib_System_105_107.c, 470 :: 		
0x05CC	0xF2030208  ADDW	R2, R3, #8
0x05D0	0x1D19    ADDS	R1, R3, #4
0x05D2	0x6809    LDR	R1, [R1, #0]
0x05D4	0x40C1    LSRS	R1, R0
; presc end address is: 0 (R0)
0x05D6	0x6011    STR	R1, [R2, #0]
;__Lib_System_105_107.c, 472 :: 		
0x05D8	0x4911    LDR	R1, [PC, #68]
0x05DA	0x8809    LDRH	R1, [R1, #0]
0x05DC	0xF3C121C2  UBFX	R1, R1, #11, #3
; tmp start address is: 0 (R0)
0x05E0	0xB288    UXTH	R0, R1
;__Lib_System_105_107.c, 473 :: 		
0x05E2	0x4910    LDR	R1, [PC, #64]
0x05E4	0x1809    ADDS	R1, R1, R0
; tmp end address is: 0 (R0)
0x05E6	0x7808    LDRB	R0, [R1, #0]
; presc start address is: 0 (R0)
0x05E8	0xB2C0    UXTB	R0, R0
;__Lib_System_105_107.c, 475 :: 		
0x05EA	0xF203020C  ADDW	R2, R3, #12
0x05EE	0x1D19    ADDS	R1, R3, #4
0x05F0	0x6809    LDR	R1, [R1, #0]
0x05F2	0x40C1    LSRS	R1, R0
; presc end address is: 0 (R0)
0x05F4	0x6011    STR	R1, [R2, #0]
;__Lib_System_105_107.c, 477 :: 		
0x05F6	0x490A    LDR	R1, [PC, #40]
0x05F8	0x8809    LDRH	R1, [R1, #0]
0x05FA	0xF3C13181  UBFX	R1, R1, #14, #2
; tmp start address is: 0 (R0)
0x05FE	0xB288    UXTH	R0, R1
;__Lib_System_105_107.c, 478 :: 		
0x0600	0x4909    LDR	R1, [PC, #36]
0x0602	0x1809    ADDS	R1, R1, R0
; tmp end address is: 0 (R0)
0x0604	0x7809    LDRB	R1, [R1, #0]
; presc start address is: 0 (R0)
0x0606	0xB2C8    UXTB	R0, R1
;__Lib_System_105_107.c, 480 :: 		
0x0608	0xF2030210  ADDW	R2, R3, #16
0x060C	0xF203010C  ADDW	R1, R3, #12
; RCC_Clocks end address is: 12 (R3)
0x0610	0x6809    LDR	R1, [R1, #0]
0x0612	0xFBB1F1F0  UDIV	R1, R1, R0
; presc end address is: 0 (R0)
0x0616	0x6011    STR	R1, [R2, #0]
;__Lib_System_105_107.c, 481 :: 		
L_end_RCC_GetClocksFrequency:
0x0618	0xF8DDE000  LDR	LR, [SP, #0]
0x061C	0xB002    ADD	SP, SP, #8
0x061E	0x4770    BX	LR
0x0620	0x10044002  	RCC_CFGRbits+0
0x0624	0x1E980000  	__Lib_System_105_107_APBAHBPrescTable+0
0x0628	0x1EB40000  	__Lib_System_105_107_ADCPrescTable+0
; end of _RCC_GetClocksFrequency
_Get_Fosc_kHz:
;__Lib_Delays.c, 9 :: 		unsigned long Get_Fosc_kHz(){
;__Lib_Delays.c, 10 :: 		return __System_CLOCK_IN_KHZ;
0x03D0	0x4801    LDR	R0, [PC, #4]
0x03D2	0x6800    LDR	R0, [R0, #0]
;__Lib_Delays.c, 11 :: 		}
L_end_Get_Fosc_kHz:
0x03D4	0x4770    BX	LR
0x03D6	0xBF00    NOP
0x03D8	0x02AC2000  	___System_CLOCK_IN_KHZ+0
; end of _Get_Fosc_kHz
_GPIO_Alternate_Function_Enable:
;__Lib_GPIO_32F10x.c, 303 :: 		
; module start address is: 0 (R0)
0x0474	0xB081    SUB	SP, SP, #4
0x0476	0xF8CDE000  STR	LR, [SP, #0]
; module end address is: 0 (R0)
; module start address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 304 :: 		
;__Lib_GPIO_32F10x.c, 305 :: 		
;__Lib_GPIO_32F10x.c, 307 :: 		
0x047A	0x2201    MOVS	R2, #1
0x047C	0xB252    SXTB	R2, R2
0x047E	0x493E    LDR	R1, [PC, #248]
0x0480	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 309 :: 		
0x0482	0xF2000168  ADDW	R1, R0, #104
0x0486	0x680B    LDR	R3, [R1, #0]
0x0488	0xF06F6100  MVN	R1, #134217728
0x048C	0xEA030201  AND	R2, R3, R1, LSL #0
; gpio_remap start address is: 16 (R4)
0x0490	0x4614    MOV	R4, R2
;__Lib_GPIO_32F10x.c, 310 :: 		
0x0492	0xF0036100  AND	R1, R3, #134217728
0x0496	0x0EC9    LSRS	R1, R1, #27
; newstate start address is: 12 (R3)
0x0498	0x460B    MOV	R3, R1
;__Lib_GPIO_32F10x.c, 312 :: 		
0x049A	0xF0024100  AND	R1, R2, #-2147483648
0x049E	0xF1B14F00  CMP	R1, #-2147483648
0x04A2	0xD102    BNE	L_GPIO_Alternate_Function_Enable66
;__Lib_GPIO_32F10x.c, 314 :: 		
0x04A4	0x4935    LDR	R1, [PC, #212]
; tmpreg start address is: 8 (R2)
0x04A6	0x680A    LDR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 315 :: 		
; tmpreg end address is: 8 (R2)
0x04A8	0xE001    B	L_GPIO_Alternate_Function_Enable67
L_GPIO_Alternate_Function_Enable66:
;__Lib_GPIO_32F10x.c, 318 :: 		
0x04AA	0x4935    LDR	R1, [PC, #212]
; tmpreg start address is: 8 (R2)
0x04AC	0x680A    LDR	R2, [R1, #0]
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 319 :: 		
L_GPIO_Alternate_Function_Enable67:
;__Lib_GPIO_32F10x.c, 321 :: 		
; tmpreg start address is: 8 (R2)
0x04AE	0xF4042170  AND	R1, R4, #983040
0x04B2	0x0C09    LSRS	R1, R1, #16
; tmpmask start address is: 24 (R6)
0x04B4	0x460E    MOV	R6, R1
;__Lib_GPIO_32F10x.c, 322 :: 		
0x04B6	0xF64F71FF  MOVW	R1, #65535
0x04BA	0xEA040101  AND	R1, R4, R1, LSL #0
; tmp start address is: 20 (R5)
0x04BE	0x460D    MOV	R5, R1
;__Lib_GPIO_32F10x.c, 324 :: 		
0x04C0	0xF4041140  AND	R1, R4, #3145728
0x04C4	0xF5B11F40  CMP	R1, #3145728
0x04C8	0xD10D    BNE	L_GPIO_Alternate_Function_Enable68
; tmpmask end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 326 :: 		
0x04CA	0xF06F6170  MVN	R1, #251658240
0x04CE	0xEA020101  AND	R1, R2, R1, LSL #0
; tmpreg end address is: 8 (R2)
; tmpreg start address is: 24 (R6)
0x04D2	0x460E    MOV	R6, R1
;__Lib_GPIO_32F10x.c, 327 :: 		
0x04D4	0x492A    LDR	R1, [PC, #168]
0x04D6	0x680A    LDR	R2, [R1, #0]
0x04D8	0xF06F6170  MVN	R1, #251658240
0x04DC	0x400A    ANDS	R2, R1
0x04DE	0x4928    LDR	R1, [PC, #160]
0x04E0	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 328 :: 		
0x04E2	0x4632    MOV	R2, R6
; tmpreg end address is: 24 (R6)
0x04E4	0xE016    B	L_GPIO_Alternate_Function_Enable69
L_GPIO_Alternate_Function_Enable68:
;__Lib_GPIO_32F10x.c, 329 :: 		
; tmpreg start address is: 8 (R2)
; tmpmask start address is: 24 (R6)
0x04E6	0xF4041180  AND	R1, R4, #1048576
0x04EA	0xF5B11F80  CMP	R1, #1048576
0x04EE	0xD109    BNE	L_GPIO_Alternate_Function_Enable70
;__Lib_GPIO_32F10x.c, 331 :: 		
0x04F0	0xF04F0103  MOV	R1, #3
0x04F4	0x40B1    LSLS	R1, R6
; tmpmask end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 332 :: 		
0x04F6	0x43C9    MVN	R1, R1
0x04F8	0xEA020101  AND	R1, R2, R1, LSL #0
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 333 :: 		
0x04FC	0xF0416170  ORR	R1, R1, #251658240
; tmpreg start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 334 :: 		
0x0500	0x460A    MOV	R2, R1
; tmpreg end address is: 4 (R1)
0x0502	0xE007    B	L_GPIO_Alternate_Function_Enable71
L_GPIO_Alternate_Function_Enable70:
;__Lib_GPIO_32F10x.c, 337 :: 		
; tmpreg start address is: 8 (R2)
0x0504	0x0D61    LSRS	R1, R4, #21
0x0506	0x0109    LSLS	R1, R1, #4
0x0508	0xFA05F101  LSL	R1, R5, R1
0x050C	0x43C9    MVN	R1, R1
0x050E	0x400A    ANDS	R2, R1
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 338 :: 		
0x0510	0xF0426270  ORR	R2, R2, #251658240
; tmpreg start address is: 8 (R2)
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 339 :: 		
L_GPIO_Alternate_Function_Enable71:
; tmpreg start address is: 8 (R2)
; tmpreg end address is: 8 (R2)
L_GPIO_Alternate_Function_Enable69:
;__Lib_GPIO_32F10x.c, 341 :: 		
; tmpreg start address is: 8 (R2)
0x0514	0xB12B    CBZ	R3, L__GPIO_Alternate_Function_Enable106
; newstate end address is: 12 (R3)
;__Lib_GPIO_32F10x.c, 343 :: 		
0x0516	0x0D61    LSRS	R1, R4, #21
0x0518	0x0109    LSLS	R1, R1, #4
0x051A	0xFA05F101  LSL	R1, R5, R1
; tmp end address is: 20 (R5)
0x051E	0x430A    ORRS	R2, R1
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 344 :: 		
0x0520	0xE7FF    B	L_GPIO_Alternate_Function_Enable72
L__GPIO_Alternate_Function_Enable106:
;__Lib_GPIO_32F10x.c, 341 :: 		
;__Lib_GPIO_32F10x.c, 344 :: 		
L_GPIO_Alternate_Function_Enable72:
;__Lib_GPIO_32F10x.c, 346 :: 		
; tmpreg start address is: 8 (R2)
0x0522	0xF0044100  AND	R1, R4, #-2147483648
; gpio_remap end address is: 16 (R4)
0x0526	0xF1B14F00  CMP	R1, #-2147483648
0x052A	0xD102    BNE	L_GPIO_Alternate_Function_Enable73
;__Lib_GPIO_32F10x.c, 348 :: 		
0x052C	0x4913    LDR	R1, [PC, #76]
0x052E	0x600A    STR	R2, [R1, #0]
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 349 :: 		
0x0530	0xE001    B	L_GPIO_Alternate_Function_Enable74
L_GPIO_Alternate_Function_Enable73:
;__Lib_GPIO_32F10x.c, 352 :: 		
; tmpreg start address is: 8 (R2)
0x0532	0x4913    LDR	R1, [PC, #76]
0x0534	0x600A    STR	R2, [R1, #0]
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 353 :: 		
L_GPIO_Alternate_Function_Enable74:
;__Lib_GPIO_32F10x.c, 356 :: 		
; i start address is: 40 (R10)
0x0536	0xF2400A00  MOVW	R10, #0
; module end address is: 0 (R0)
; i end address is: 40 (R10)
0x053A	0x4681    MOV	R9, R0
;__Lib_GPIO_32F10x.c, 357 :: 		
L_GPIO_Alternate_Function_Enable75:
; i start address is: 40 (R10)
; module start address is: 36 (R9)
0x053C	0xEA4F018A  LSL	R1, R10, #2
0x0540	0xEB090101  ADD	R1, R9, R1, LSL #0
0x0544	0x6809    LDR	R1, [R1, #0]
0x0546	0xF1B13FFF  CMP	R1, #-1
0x054A	0xD010    BEQ	L_GPIO_Alternate_Function_Enable76
;__Lib_GPIO_32F10x.c, 358 :: 		
0x054C	0xF1090134  ADD	R1, R9, #52
0x0550	0xEA4F038A  LSL	R3, R10, #2
0x0554	0x18C9    ADDS	R1, R1, R3
0x0556	0x6809    LDR	R1, [R1, #0]
0x0558	0x460A    MOV	R2, R1
0x055A	0xEB090103  ADD	R1, R9, R3, LSL #0
0x055E	0x6809    LDR	R1, [R1, #0]
0x0560	0x4608    MOV	R0, R1
0x0562	0x4611    MOV	R1, R2
0x0564	0xF7FFFF3A  BL	__Lib_GPIO_32F10x_GPIO_Configure_Pin+0
;__Lib_GPIO_32F10x.c, 359 :: 		
0x0568	0xF10A0A01  ADD	R10, R10, #1
;__Lib_GPIO_32F10x.c, 360 :: 		
; module end address is: 36 (R9)
; i end address is: 40 (R10)
0x056C	0xE7E6    B	L_GPIO_Alternate_Function_Enable75
L_GPIO_Alternate_Function_Enable76:
;__Lib_GPIO_32F10x.c, 363 :: 		
L_end_GPIO_Alternate_Function_Enable:
0x056E	0xF8DDE000  LDR	LR, [SP, #0]
0x0572	0xB001    ADD	SP, SP, #4
0x0574	0x4770    BX	LR
0x0576	0xBF00    NOP
0x0578	0x03004242  	RCC_APB2ENRbits+0
0x057C	0x001C4001  	AFIO_MAPR2+0
0x0580	0x00044001  	AFIO_MAPR+0
; end of _GPIO_Alternate_Function_Enable
__Lib_GPIO_32F10x_GPIO_Configure_Pin:
;__Lib_GPIO_32F10x.c, 282 :: 		
; config start address is: 4 (R1)
; af_pin start address is: 0 (R0)
0x03DC	0xB083    SUB	SP, SP, #12
0x03DE	0xF8CDE000  STR	LR, [SP, #0]
; config end address is: 4 (R1)
; af_pin end address is: 0 (R0)
; af_pin start address is: 0 (R0)
; config start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 286 :: 		
0x03E2	0xF00003FF  AND	R3, R0, #255
; af_pin end address is: 0 (R0)
0x03E6	0x091A    LSRS	R2, R3, #4
; port start address is: 0 (R0)
0x03E8	0x4610    MOV	R0, R2
;__Lib_GPIO_32F10x.c, 287 :: 		
0x03EA	0xF003020F  AND	R2, R3, #15
; pin start address is: 12 (R3)
0x03EE	0x4613    MOV	R3, R2
;__Lib_GPIO_32F10x.c, 290 :: 		
0x03F0	0xE014    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin57
; port end address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 291 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin59:
0x03F2	0x4A19    LDR	R2, [PC, #100]
0x03F4	0x9202    STR	R2, [SP, #8]
0x03F6	0xE01F    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 292 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin60:
0x03F8	0x4A18    LDR	R2, [PC, #96]
0x03FA	0x9202    STR	R2, [SP, #8]
0x03FC	0xE01C    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 293 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin61:
0x03FE	0x4A18    LDR	R2, [PC, #96]
0x0400	0x9202    STR	R2, [SP, #8]
0x0402	0xE019    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 294 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin62:
0x0404	0x4A17    LDR	R2, [PC, #92]
0x0406	0x9202    STR	R2, [SP, #8]
0x0408	0xE016    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 295 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin63:
0x040A	0x4A17    LDR	R2, [PC, #92]
0x040C	0x9202    STR	R2, [SP, #8]
0x040E	0xE013    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 296 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin64:
0x0410	0x4A16    LDR	R2, [PC, #88]
0x0412	0x9202    STR	R2, [SP, #8]
0x0414	0xE010    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 297 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin65:
0x0416	0x4A16    LDR	R2, [PC, #88]
0x0418	0x9202    STR	R2, [SP, #8]
0x041A	0xE00D    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 298 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin57:
; port start address is: 0 (R0)
0x041C	0x2800    CMP	R0, #0
0x041E	0xD0E8    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin59
0x0420	0x2801    CMP	R0, #1
0x0422	0xD0E9    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin60
0x0424	0x2802    CMP	R0, #2
0x0426	0xD0EA    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin61
0x0428	0x2803    CMP	R0, #3
0x042A	0xD0EB    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin62
0x042C	0x2804    CMP	R0, #4
0x042E	0xD0EC    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin63
0x0430	0x2805    CMP	R0, #5
0x0432	0xD0ED    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin64
0x0434	0x2806    CMP	R0, #6
0x0436	0xD0EE    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin65
; port end address is: 0 (R0)
L___Lib_GPIO_32F10x_GPIO_Configure_Pin58:
;__Lib_GPIO_32F10x.c, 300 :: 		
0x0438	0x2201    MOVS	R2, #1
0x043A	0xB212    SXTH	R2, R2
0x043C	0x409A    LSLS	R2, R3
; pin end address is: 12 (R3)
0x043E	0xF8AD2004  STRH	R2, [SP, #4]
; config end address is: 4 (R1)
0x0442	0x9802    LDR	R0, [SP, #8]
0x0444	0x460A    MOV	R2, R1
0x0446	0xF8BD1004  LDRH	R1, [SP, #4]
0x044A	0xF7FFFEC7  BL	_GPIO_Config+0
;__Lib_GPIO_32F10x.c, 301 :: 		
L_end_GPIO_Configure_Pin:
0x044E	0xF8DDE000  LDR	LR, [SP, #0]
0x0452	0xB003    ADD	SP, SP, #12
0x0454	0x4770    BX	LR
0x0456	0xBF00    NOP
0x0458	0x08004001  	#1073809408
0x045C	0x0C004001  	#1073810432
0x0460	0x10004001  	#1073811456
0x0464	0x14004001  	#1073812480
0x0468	0x18004001  	#1073813504
0x046C	0x1C004001  	#1073814528
0x0470	0x20004001  	#1073815552
; end of __Lib_GPIO_32F10x_GPIO_Configure_Pin
_GPIO_Config:
;__Lib_GPIO_32F10x.c, 124 :: 		
; config start address is: 8 (R2)
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x01DC	0xB081    SUB	SP, SP, #4
0x01DE	0xF8CDE000  STR	LR, [SP, #0]
0x01E2	0xB28C    UXTH	R4, R1
0x01E4	0x4615    MOV	R5, R2
; config end address is: 8 (R2)
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 16 (R4)
; config start address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 129 :: 		
0x01E6	0x4B77    LDR	R3, [PC, #476]
0x01E8	0xEA000303  AND	R3, R0, R3, LSL #0
; port end address is: 0 (R0)
; port start address is: 24 (R6)
0x01EC	0x461E    MOV	R6, R3
;__Lib_GPIO_32F10x.c, 131 :: 		
0x01EE	0x4618    MOV	R0, R3
0x01F0	0xF7FFFFAE  BL	_GPIO_Clk_Enable+0
;__Lib_GPIO_32F10x.c, 134 :: 		
0x01F4	0xF1B40FFF  CMP	R4, #255
0x01F8	0xD10C    BNE	L_GPIO_Config18
;__Lib_GPIO_32F10x.c, 135 :: 		
0x01FA	0x4B73    LDR	R3, [PC, #460]
0x01FC	0x429D    CMP	R5, R3
0x01FE	0xD103    BNE	L_GPIO_Config19
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 136 :: 		
0x0200	0xF04F3333  MOV	R3, #858993459
0x0204	0x6033    STR	R3, [R6, #0]
; port end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 137 :: 		
0x0206	0xE0D9    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 138 :: 		
L_GPIO_Config19:
;__Lib_GPIO_32F10x.c, 139 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
0x0208	0x2D42    CMP	R5, #66
0x020A	0xD103    BNE	L_GPIO_Config20
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 140 :: 		
0x020C	0xF04F3344  MOV	R3, #1145324612
0x0210	0x6033    STR	R3, [R6, #0]
; port end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 141 :: 		
0x0212	0xE0D3    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 142 :: 		
L_GPIO_Config20:
;__Lib_GPIO_32F10x.c, 143 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
L_GPIO_Config18:
;__Lib_GPIO_32F10x.c, 145 :: 		
0x0214	0xF64F73FF  MOVW	R3, #65535
0x0218	0x429C    CMP	R4, R3
0x021A	0xD114    BNE	L_GPIO_Config21
;__Lib_GPIO_32F10x.c, 146 :: 		
0x021C	0x4B6A    LDR	R3, [PC, #424]
0x021E	0x429D    CMP	R5, R3
0x0220	0xD107    BNE	L_GPIO_Config22
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 147 :: 		
0x0222	0xF04F3333  MOV	R3, #858993459
0x0226	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_32F10x.c, 148 :: 		
0x0228	0x1D34    ADDS	R4, R6, #4
; port end address is: 24 (R6)
0x022A	0xF04F3333  MOV	R3, #858993459
0x022E	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 149 :: 		
0x0230	0xE0C4    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 150 :: 		
L_GPIO_Config22:
;__Lib_GPIO_32F10x.c, 151 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
0x0232	0x2D42    CMP	R5, #66
0x0234	0xD107    BNE	L_GPIO_Config23
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 152 :: 		
0x0236	0xF04F3344  MOV	R3, #1145324612
0x023A	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_32F10x.c, 153 :: 		
0x023C	0x1D34    ADDS	R4, R6, #4
; port end address is: 24 (R6)
0x023E	0xF04F3344  MOV	R3, #1145324612
0x0242	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 154 :: 		
0x0244	0xE0BA    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 155 :: 		
L_GPIO_Config23:
;__Lib_GPIO_32F10x.c, 156 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
L_GPIO_Config21:
;__Lib_GPIO_32F10x.c, 158 :: 		
; currentmode start address is: 4 (R1)
0x0246	0x2100    MOVS	R1, #0
;__Lib_GPIO_32F10x.c, 159 :: 		
; speed start address is: 0 (R0)
0x0248	0x2000    MOVS	R0, #0
;__Lib_GPIO_32F10x.c, 161 :: 		
0x024A	0xF0050301  AND	R3, R5, #1
0x024E	0xB10B    CBZ	R3, L_GPIO_Config24
;__Lib_GPIO_32F10x.c, 162 :: 		
0x0250	0x2100    MOVS	R1, #0
0x0252	0xE01D    B	L_GPIO_Config25
L_GPIO_Config24:
;__Lib_GPIO_32F10x.c, 163 :: 		
0x0254	0xF0050302  AND	R3, R5, #2
0x0258	0xB133    CBZ	R3, L_GPIO_Config26
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 164 :: 		
0x025A	0xF40573C0  AND	R3, R5, #384
0x025E	0xB10B    CBZ	R3, L_GPIO_Config27
;__Lib_GPIO_32F10x.c, 165 :: 		
; currentmode start address is: 4 (R1)
0x0260	0x2108    MOVS	R1, #8
; currentmode end address is: 4 (R1)
0x0262	0xE000    B	L_GPIO_Config28
L_GPIO_Config27:
;__Lib_GPIO_32F10x.c, 167 :: 		
; currentmode start address is: 4 (R1)
0x0264	0x2104    MOVS	R1, #4
; currentmode end address is: 4 (R1)
L_GPIO_Config28:
;__Lib_GPIO_32F10x.c, 168 :: 		
; currentmode start address is: 4 (R1)
0x0266	0xE013    B	L_GPIO_Config29
L_GPIO_Config26:
;__Lib_GPIO_32F10x.c, 169 :: 		
0x0268	0xF0050304  AND	R3, R5, #4
0x026C	0xB133    CBZ	R3, L_GPIO_Config30
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 170 :: 		
0x026E	0xF0050320  AND	R3, R5, #32
0x0272	0xB10B    CBZ	R3, L_GPIO_Config31
;__Lib_GPIO_32F10x.c, 171 :: 		
; currentmode start address is: 4 (R1)
0x0274	0x2104    MOVS	R1, #4
; currentmode end address is: 4 (R1)
0x0276	0xE000    B	L_GPIO_Config32
L_GPIO_Config31:
;__Lib_GPIO_32F10x.c, 173 :: 		
; currentmode start address is: 4 (R1)
0x0278	0x2100    MOVS	R1, #0
; currentmode end address is: 4 (R1)
L_GPIO_Config32:
;__Lib_GPIO_32F10x.c, 174 :: 		
; currentmode start address is: 4 (R1)
0x027A	0xE009    B	L_GPIO_Config33
L_GPIO_Config30:
;__Lib_GPIO_32F10x.c, 175 :: 		
0x027C	0xF0050308  AND	R3, R5, #8
0x0280	0xB133    CBZ	R3, L__GPIO_Config100
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 176 :: 		
0x0282	0xF0050320  AND	R3, R5, #32
0x0286	0xB10B    CBZ	R3, L_GPIO_Config35
;__Lib_GPIO_32F10x.c, 177 :: 		
; currentmode start address is: 4 (R1)
0x0288	0x210C    MOVS	R1, #12
; currentmode end address is: 4 (R1)
0x028A	0xE000    B	L_GPIO_Config36
L_GPIO_Config35:
;__Lib_GPIO_32F10x.c, 179 :: 		
; currentmode start address is: 4 (R1)
0x028C	0x2108    MOVS	R1, #8
; currentmode end address is: 4 (R1)
L_GPIO_Config36:
;__Lib_GPIO_32F10x.c, 180 :: 		
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
0x028E	0xE7FF    B	L_GPIO_Config34
L__GPIO_Config100:
;__Lib_GPIO_32F10x.c, 175 :: 		
;__Lib_GPIO_32F10x.c, 180 :: 		
L_GPIO_Config34:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config33:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config29:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config25:
;__Lib_GPIO_32F10x.c, 182 :: 		
; currentmode start address is: 4 (R1)
0x0290	0x4B4E    LDR	R3, [PC, #312]
0x0292	0xEA050303  AND	R3, R5, R3, LSL #0
0x0296	0xB10B    CBZ	R3, L_GPIO_Config37
;__Lib_GPIO_32F10x.c, 183 :: 		
0x0298	0x2003    MOVS	R0, #3
0x029A	0xE009    B	L_GPIO_Config38
L_GPIO_Config37:
;__Lib_GPIO_32F10x.c, 184 :: 		
0x029C	0xF4057300  AND	R3, R5, #512
0x02A0	0xB10B    CBZ	R3, L_GPIO_Config39
;__Lib_GPIO_32F10x.c, 185 :: 		
0x02A2	0x2002    MOVS	R0, #2
0x02A4	0xE004    B	L_GPIO_Config40
L_GPIO_Config39:
;__Lib_GPIO_32F10x.c, 186 :: 		
0x02A6	0xF4056380  AND	R3, R5, #1024
0x02AA	0xB10B    CBZ	R3, L__GPIO_Config101
;__Lib_GPIO_32F10x.c, 187 :: 		
0x02AC	0x2001    MOVS	R0, #1
; speed end address is: 0 (R0)
0x02AE	0xE7FF    B	L_GPIO_Config41
L__GPIO_Config101:
;__Lib_GPIO_32F10x.c, 186 :: 		
;__Lib_GPIO_32F10x.c, 187 :: 		
L_GPIO_Config41:
; speed start address is: 0 (R0)
; speed end address is: 0 (R0)
L_GPIO_Config40:
; speed start address is: 0 (R0)
; speed end address is: 0 (R0)
L_GPIO_Config38:
;__Lib_GPIO_32F10x.c, 189 :: 		
; speed start address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 195 :: 		
0x02B0	0xF005030C  AND	R3, R5, #12
0x02B4	0xB10B    CBZ	R3, L__GPIO_Config102
;__Lib_GPIO_32F10x.c, 198 :: 		
0x02B6	0x4301    ORRS	R1, R0
; speed end address is: 0 (R0)
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 199 :: 		
0x02B8	0xE7FF    B	L_GPIO_Config42
L__GPIO_Config102:
;__Lib_GPIO_32F10x.c, 195 :: 		
;__Lib_GPIO_32F10x.c, 199 :: 		
L_GPIO_Config42:
;__Lib_GPIO_32F10x.c, 201 :: 		
; currentmode start address is: 4 (R1)
0x02BA	0xF00403FF  AND	R3, R4, #255
0x02BE	0xB29B    UXTH	R3, R3
0x02C0	0x2B00    CMP	R3, #0
0x02C2	0xD03B    BEQ	L__GPIO_Config104
;__Lib_GPIO_32F10x.c, 202 :: 		
0x02C4	0x6837    LDR	R7, [R6, #0]
; tmpreg start address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 204 :: 		
; pinpos start address is: 0 (R0)
0x02C6	0x2000    MOVS	R0, #0
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
; currentmode end address is: 4 (R1)
; tmpreg end address is: 28 (R7)
; pinpos end address is: 0 (R0)
; port end address is: 24 (R6)
0x02C8	0xFA1FF884  UXTH	R8, R4
0x02CC	0x4632    MOV	R2, R6
0x02CE	0x462E    MOV	R6, R5
L_GPIO_Config44:
; pinpos start address is: 0 (R0)
; tmpreg start address is: 28 (R7)
; currentmode start address is: 4 (R1)
; port start address is: 8 (R2)
; config start address is: 24 (R6)
; pin_mask start address is: 32 (R8)
0x02D0	0x2808    CMP	R0, #8
0x02D2	0xD22C    BCS	L_GPIO_Config45
;__Lib_GPIO_32F10x.c, 206 :: 		
0x02D4	0xF04F0301  MOV	R3, #1
0x02D8	0xFA03F400  LSL	R4, R3, R0
;__Lib_GPIO_32F10x.c, 208 :: 		
0x02DC	0xEA080304  AND	R3, R8, R4, LSL #0
;__Lib_GPIO_32F10x.c, 210 :: 		
0x02E0	0x42A3    CMP	R3, R4
0x02E2	0xD122    BNE	L__GPIO_Config103
;__Lib_GPIO_32F10x.c, 212 :: 		
0x02E4	0x0085    LSLS	R5, R0, #2
;__Lib_GPIO_32F10x.c, 214 :: 		
0x02E6	0xF04F030F  MOV	R3, #15
0x02EA	0x40AB    LSLS	R3, R5
;__Lib_GPIO_32F10x.c, 215 :: 		
0x02EC	0x43DB    MVN	R3, R3
0x02EE	0xEA070403  AND	R4, R7, R3, LSL #0
; tmpreg end address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 218 :: 		
0x02F2	0xFA01F305  LSL	R3, R1, R5
0x02F6	0xEA440303  ORR	R3, R4, R3, LSL #0
; tmpreg start address is: 20 (R5)
0x02FA	0x461D    MOV	R5, R3
;__Lib_GPIO_32F10x.c, 221 :: 		
0x02FC	0xF4067381  AND	R3, R6, #258
0x0300	0xF5B37F81  CMP	R3, #258
0x0304	0xD105    BNE	L_GPIO_Config48
;__Lib_GPIO_32F10x.c, 223 :: 		
0x0306	0xF2020414  ADDW	R4, R2, #20
0x030A	0xF04F0301  MOV	R3, #1
0x030E	0x4083    LSLS	R3, R0
0x0310	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 224 :: 		
L_GPIO_Config48:
;__Lib_GPIO_32F10x.c, 226 :: 		
0x0312	0xF0060382  AND	R3, R6, #130
0x0316	0x2B82    CMP	R3, #130
0x0318	0xD105    BNE	L_GPIO_Config49
;__Lib_GPIO_32F10x.c, 228 :: 		
0x031A	0xF2020410  ADDW	R4, R2, #16
0x031E	0xF04F0301  MOV	R3, #1
0x0322	0x4083    LSLS	R3, R0
0x0324	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 229 :: 		
L_GPIO_Config49:
;__Lib_GPIO_32F10x.c, 230 :: 		
0x0326	0x462F    MOV	R7, R5
0x0328	0xE7FF    B	L_GPIO_Config47
; tmpreg end address is: 20 (R5)
L__GPIO_Config103:
;__Lib_GPIO_32F10x.c, 210 :: 		
;__Lib_GPIO_32F10x.c, 230 :: 		
L_GPIO_Config47:
;__Lib_GPIO_32F10x.c, 204 :: 		
; tmpreg start address is: 28 (R7)
0x032A	0x1C40    ADDS	R0, R0, #1
;__Lib_GPIO_32F10x.c, 231 :: 		
; pinpos end address is: 0 (R0)
0x032C	0xE7D0    B	L_GPIO_Config44
L_GPIO_Config45:
;__Lib_GPIO_32F10x.c, 232 :: 		
0x032E	0x6017    STR	R7, [R2, #0]
; currentmode end address is: 4 (R1)
; port end address is: 8 (R2)
; config end address is: 24 (R6)
; pin_mask end address is: 32 (R8)
; tmpreg end address is: 28 (R7)
0x0330	0xFA1FF088  UXTH	R0, R8
0x0334	0x460F    MOV	R7, R1
0x0336	0x4631    MOV	R1, R6
0x0338	0x4616    MOV	R6, R2
;__Lib_GPIO_32F10x.c, 234 :: 		
0x033A	0xE002    B	L_GPIO_Config43
L__GPIO_Config104:
;__Lib_GPIO_32F10x.c, 201 :: 		
0x033C	0x460F    MOV	R7, R1
0x033E	0x4629    MOV	R1, R5
0x0340	0xB2A0    UXTH	R0, R4
;__Lib_GPIO_32F10x.c, 234 :: 		
L_GPIO_Config43:
;__Lib_GPIO_32F10x.c, 238 :: 		
; currentmode start address is: 28 (R7)
; port start address is: 24 (R6)
; config start address is: 4 (R1)
; pin_mask start address is: 0 (R0)
0x0342	0xF1B00FFF  CMP	R0, #255
0x0346	0xD939    BLS	L_GPIO_Config50
;__Lib_GPIO_32F10x.c, 240 :: 		
0x0348	0x1D33    ADDS	R3, R6, #4
0x034A	0xF8D38000  LDR	R8, [R3, #0]
; tmpreg start address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 241 :: 		
; pinpos start address is: 8 (R2)
0x034E	0x2200    MOVS	R2, #0
; port end address is: 24 (R6)
; tmpreg end address is: 32 (R8)
; pinpos end address is: 8 (R2)
L_GPIO_Config51:
; pinpos start address is: 8 (R2)
; tmpreg start address is: 32 (R8)
; pin_mask start address is: 0 (R0)
; pin_mask end address is: 0 (R0)
; config start address is: 4 (R1)
; config end address is: 4 (R1)
; port start address is: 24 (R6)
; currentmode start address is: 28 (R7)
; currentmode end address is: 28 (R7)
0x0350	0x2A08    CMP	R2, #8
0x0352	0xD230    BCS	L_GPIO_Config52
; pin_mask end address is: 0 (R0)
; config end address is: 4 (R1)
; currentmode end address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 243 :: 		
; currentmode start address is: 28 (R7)
; config start address is: 4 (R1)
; pin_mask start address is: 0 (R0)
0x0354	0xF2020408  ADDW	R4, R2, #8
0x0358	0xF04F0301  MOV	R3, #1
0x035C	0xFA03F404  LSL	R4, R3, R4
;__Lib_GPIO_32F10x.c, 245 :: 		
0x0360	0xEA000304  AND	R3, R0, R4, LSL #0
;__Lib_GPIO_32F10x.c, 246 :: 		
0x0364	0x42A3    CMP	R3, R4
0x0366	0xD124    BNE	L__GPIO_Config105
;__Lib_GPIO_32F10x.c, 248 :: 		
0x0368	0x0095    LSLS	R5, R2, #2
;__Lib_GPIO_32F10x.c, 250 :: 		
0x036A	0xF04F030F  MOV	R3, #15
0x036E	0x40AB    LSLS	R3, R5
;__Lib_GPIO_32F10x.c, 251 :: 		
0x0370	0x43DB    MVN	R3, R3
0x0372	0xEA080803  AND	R8, R8, R3, LSL #0
; tmpreg end address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 254 :: 		
0x0376	0xFA07F305  LSL	R3, R7, R5
0x037A	0xEA480803  ORR	R8, R8, R3, LSL #0
; tmpreg start address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 257 :: 		
0x037E	0xF4017381  AND	R3, R1, #258
0x0382	0xF5B37F81  CMP	R3, #258
0x0386	0xD107    BNE	L_GPIO_Config55
;__Lib_GPIO_32F10x.c, 259 :: 		
0x0388	0xF2060514  ADDW	R5, R6, #20
0x038C	0xF2020408  ADDW	R4, R2, #8
0x0390	0xF04F0301  MOV	R3, #1
0x0394	0x40A3    LSLS	R3, R4
0x0396	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F10x.c, 260 :: 		
L_GPIO_Config55:
;__Lib_GPIO_32F10x.c, 262 :: 		
0x0398	0xF0010382  AND	R3, R1, #130
0x039C	0x2B82    CMP	R3, #130
0x039E	0xD107    BNE	L_GPIO_Config56
;__Lib_GPIO_32F10x.c, 264 :: 		
0x03A0	0xF2060510  ADDW	R5, R6, #16
0x03A4	0xF2020408  ADDW	R4, R2, #8
0x03A8	0xF04F0301  MOV	R3, #1
0x03AC	0x40A3    LSLS	R3, R4
0x03AE	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F10x.c, 265 :: 		
L_GPIO_Config56:
;__Lib_GPIO_32F10x.c, 266 :: 		
0x03B0	0xE7FF    B	L_GPIO_Config54
; tmpreg end address is: 32 (R8)
L__GPIO_Config105:
;__Lib_GPIO_32F10x.c, 246 :: 		
;__Lib_GPIO_32F10x.c, 266 :: 		
L_GPIO_Config54:
;__Lib_GPIO_32F10x.c, 241 :: 		
; tmpreg start address is: 32 (R8)
0x03B2	0x1C52    ADDS	R2, R2, #1
;__Lib_GPIO_32F10x.c, 267 :: 		
; pin_mask end address is: 0 (R0)
; config end address is: 4 (R1)
; currentmode end address is: 28 (R7)
; pinpos end address is: 8 (R2)
0x03B4	0xE7CC    B	L_GPIO_Config51
L_GPIO_Config52:
;__Lib_GPIO_32F10x.c, 268 :: 		
0x03B6	0x1D33    ADDS	R3, R6, #4
; port end address is: 24 (R6)
0x03B8	0xF8C38000  STR	R8, [R3, #0]
; tmpreg end address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 269 :: 		
L_GPIO_Config50:
;__Lib_GPIO_32F10x.c, 270 :: 		
L_end_GPIO_Config:
0x03BC	0xF8DDE000  LDR	LR, [SP, #0]
0x03C0	0xB001    ADD	SP, SP, #4
0x03C2	0x4770    BX	LR
0x03C4	0xFC00FFFF  	#-1024
0x03C8	0x00140008  	#524308
0x03CC	0x08000008  	#526336
; end of _GPIO_Config
_GPIO_Clk_Enable:
;__Lib_GPIO_32F10x.c, 83 :: 		
; gpio_port start address is: 0 (R0)
0x0150	0xB081    SUB	SP, SP, #4
; gpio_port end address is: 0 (R0)
; gpio_port start address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 85 :: 		
0x0152	0x4919    LDR	R1, [PC, #100]
0x0154	0xEA000101  AND	R1, R0, R1, LSL #0
; gpio_port end address is: 0 (R0)
; prt start address is: 0 (R0)
0x0158	0x4608    MOV	R0, R1
;__Lib_GPIO_32F10x.c, 86 :: 		
; pos start address is: 8 (R2)
0x015A	0x2200    MOVS	R2, #0
;__Lib_GPIO_32F10x.c, 87 :: 		
0x015C	0xE00E    B	L_GPIO_Clk_Enable0
; prt end address is: 0 (R0)
; pos end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 88 :: 		
L_GPIO_Clk_Enable2:
; pos start address is: 0 (R0)
0x015E	0x2004    MOVS	R0, #4
; pos end address is: 0 (R0)
0x0160	0xE022    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 89 :: 		
L_GPIO_Clk_Enable3:
; pos start address is: 0 (R0)
0x0162	0x2008    MOVS	R0, #8
; pos end address is: 0 (R0)
0x0164	0xE020    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 90 :: 		
L_GPIO_Clk_Enable4:
; pos start address is: 0 (R0)
0x0166	0x2010    MOVS	R0, #16
; pos end address is: 0 (R0)
0x0168	0xE01E    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 91 :: 		
L_GPIO_Clk_Enable5:
; pos start address is: 0 (R0)
0x016A	0x2020    MOVS	R0, #32
; pos end address is: 0 (R0)
0x016C	0xE01C    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 92 :: 		
L_GPIO_Clk_Enable6:
; pos start address is: 0 (R0)
0x016E	0x2040    MOVS	R0, #64
; pos end address is: 0 (R0)
0x0170	0xE01A    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 93 :: 		
L_GPIO_Clk_Enable7:
; pos start address is: 0 (R0)
0x0172	0x2080    MOVS	R0, #128
; pos end address is: 0 (R0)
0x0174	0xE018    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 94 :: 		
L_GPIO_Clk_Enable8:
; pos start address is: 0 (R0)
0x0176	0xF2401000  MOVW	R0, #256
; pos end address is: 0 (R0)
0x017A	0xE015    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 95 :: 		
L_GPIO_Clk_Enable0:
; pos start address is: 8 (R2)
; prt start address is: 0 (R0)
0x017C	0x490F    LDR	R1, [PC, #60]
0x017E	0x4288    CMP	R0, R1
0x0180	0xD0ED    BEQ	L_GPIO_Clk_Enable2
0x0182	0x490F    LDR	R1, [PC, #60]
0x0184	0x4288    CMP	R0, R1
0x0186	0xD0EC    BEQ	L_GPIO_Clk_Enable3
0x0188	0x490E    LDR	R1, [PC, #56]
0x018A	0x4288    CMP	R0, R1
0x018C	0xD0EB    BEQ	L_GPIO_Clk_Enable4
0x018E	0x490E    LDR	R1, [PC, #56]
0x0190	0x4288    CMP	R0, R1
0x0192	0xD0EA    BEQ	L_GPIO_Clk_Enable5
0x0194	0x490D    LDR	R1, [PC, #52]
0x0196	0x4288    CMP	R0, R1
0x0198	0xD0E9    BEQ	L_GPIO_Clk_Enable6
0x019A	0x490D    LDR	R1, [PC, #52]
0x019C	0x4288    CMP	R0, R1
0x019E	0xD0E8    BEQ	L_GPIO_Clk_Enable7
0x01A0	0x490C    LDR	R1, [PC, #48]
0x01A2	0x4288    CMP	R0, R1
0x01A4	0xD0E7    BEQ	L_GPIO_Clk_Enable8
; prt end address is: 0 (R0)
; pos end address is: 8 (R2)
0x01A6	0x4610    MOV	R0, R2
L_GPIO_Clk_Enable1:
;__Lib_GPIO_32F10x.c, 97 :: 		
; pos start address is: 0 (R0)
0x01A8	0x490B    LDR	R1, [PC, #44]
0x01AA	0x6809    LDR	R1, [R1, #0]
0x01AC	0xEA410200  ORR	R2, R1, R0, LSL #0
; pos end address is: 0 (R0)
0x01B0	0x4909    LDR	R1, [PC, #36]
0x01B2	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 98 :: 		
L_end_GPIO_Clk_Enable:
0x01B4	0xB001    ADD	SP, SP, #4
0x01B6	0x4770    BX	LR
0x01B8	0xFC00FFFF  	#-1024
0x01BC	0x08004001  	#1073809408
0x01C0	0x0C004001  	#1073810432
0x01C4	0x10004001  	#1073811456
0x01C8	0x14004001  	#1073812480
0x01CC	0x18004001  	#1073813504
0x01D0	0x1C004001  	#1073814528
0x01D4	0x20004001  	#1073815552
0x01D8	0x10184002  	RCC_APB2ENR+0
; end of _GPIO_Clk_Enable
easymx_v7_STM32F107VC__uartInit_2:
;__em_f107vc_uart.c, 35 :: 		static T_mikrobus_ret _uartInit_2(const uint32_t* cfg)
; cfg start address is: 0 (R0)
0x0EFC	0xB081    SUB	SP, SP, #4
0x0EFE	0xF8CDE000  STR	LR, [SP, #0]
; cfg end address is: 0 (R0)
; cfg start address is: 0 (R0)
;__em_f107vc_uart.c, 37 :: 		UART2_Init_Advanced( (unsigned long) cfg[0], (unsigned int) cfg[1], (unsigned int) cfg[2], (unsigned int)cfg[3], &_GPIO_MODULE_USART2_PD56);
0x0F02	0x4D0B    LDR	R5, [PC, #44]
0x0F04	0xF200010C  ADDW	R1, R0, #12
0x0F08	0x680C    LDR	R4, [R1, #0]
0x0F0A	0xF2000108  ADDW	R1, R0, #8
0x0F0E	0x680B    LDR	R3, [R1, #0]
0x0F10	0x1D01    ADDS	R1, R0, #4
0x0F12	0x680A    LDR	R2, [R1, #0]
0x0F14	0x6801    LDR	R1, [R0, #0]
; cfg end address is: 0 (R0)
0x0F16	0x4608    MOV	R0, R1
0x0F18	0xB291    UXTH	R1, R2
0x0F1A	0xB29A    UXTH	R2, R3
0x0F1C	0xB2A3    UXTH	R3, R4
0x0F1E	0xB420    PUSH	(R5)
0x0F20	0xF7FFFE3A  BL	_UART2_Init_Advanced+0
0x0F24	0xB001    ADD	SP, SP, #4
;__em_f107vc_uart.c, 38 :: 		return _MIKROBUS_OK;
0x0F26	0x2000    MOVS	R0, __MIKROBUS_OK
;__em_f107vc_uart.c, 39 :: 		}
L_end__uartInit_2:
0x0F28	0xF8DDE000  LDR	LR, [SP, #0]
0x0F2C	0xB001    ADD	SP, SP, #4
0x0F2E	0x4770    BX	LR
0x0F30	0x1CD00000  	__GPIO_MODULE_USART2_PD56+0
; end of easymx_v7_STM32F107VC__uartInit_2
_UART2_Init_Advanced:
;__Lib_UART_123_45.c, 378 :: 		
; stop_bits start address is: 12 (R3)
; parity start address is: 8 (R2)
; data_bits start address is: 4 (R1)
; baud_rate start address is: 0 (R0)
0x0B98	0xB081    SUB	SP, SP, #4
0x0B9A	0xF8CDE000  STR	LR, [SP, #0]
; stop_bits end address is: 12 (R3)
; parity end address is: 8 (R2)
; data_bits end address is: 4 (R1)
; baud_rate end address is: 0 (R0)
; baud_rate start address is: 0 (R0)
; data_bits start address is: 4 (R1)
; parity start address is: 8 (R2)
; stop_bits start address is: 12 (R3)
; module start address is: 20 (R5)
0x0B9E	0x9D01    LDR	R5, [SP, #4]
;__Lib_UART_123_45.c, 380 :: 		
0x0BA0	0x462C    MOV	R4, R5
; module end address is: 20 (R5)
0x0BA2	0xB410    PUSH	(R4)
; parity end address is: 8 (R2)
0x0BA4	0xB408    PUSH	(R3)
0x0BA6	0xB293    UXTH	R3, R2
0x0BA8	0xB28A    UXTH	R2, R1
; data_bits end address is: 4 (R1)
0x0BAA	0x4601    MOV	R1, R0
; baud_rate end address is: 0 (R0)
0x0BAC	0x4803    LDR	R0, [PC, #12]
; stop_bits end address is: 12 (R3)
0x0BAE	0xF7FFFDB5  BL	__Lib_UART_123_45_UARTx_Init_Advanced+0
0x0BB2	0xB002    ADD	SP, SP, #8
;__Lib_UART_123_45.c, 381 :: 		
L_end_UART2_Init_Advanced:
0x0BB4	0xF8DDE000  LDR	LR, [SP, #0]
0x0BB8	0xB001    ADD	SP, SP, #4
0x0BBA	0x4770    BX	LR
0x0BBC	0x44004000  	USART2_SR+0
; end of _UART2_Init_Advanced
_mikrobus_logInit:
;easymx_v7_STM32F107VC.c, 283 :: 		T_mikrobus_ret mikrobus_logInit(T_log_bus port, const uint32_t baud)
; baud start address is: 4 (R1)
; port start address is: 0 (R0)
0x137C	0xB081    SUB	SP, SP, #4
0x137E	0xF8CDE000  STR	LR, [SP, #0]
; baud end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; baud start address is: 4 (R1)
;easymx_v7_STM32F107VC.c, 285 :: 		switch( port )
0x1382	0xE011    B	L_mikrobus_logInit88
; port end address is: 0 (R0)
;easymx_v7_STM32F107VC.c, 288 :: 		case _MIKROBUS1 : return _log_init1( baud );
L_mikrobus_logInit90:
0x1384	0x4608    MOV	R0, R1
; baud end address is: 4 (R1)
0x1386	0xF7FFFD9D  BL	easymx_v7_STM32F107VC__log_init1+0
0x138A	0xE016    B	L_end_mikrobus_logInit
;easymx_v7_STM32F107VC.c, 291 :: 		case _MIKROBUS2: return _log_init2( baud );
L_mikrobus_logInit91:
; baud start address is: 4 (R1)
0x138C	0x4608    MOV	R0, R1
; baud end address is: 4 (R1)
0x138E	0xF7FFFD39  BL	easymx_v7_STM32F107VC__log_init2+0
0x1392	0xE012    B	L_end_mikrobus_logInit
;easymx_v7_STM32F107VC.c, 309 :: 		case _LOG_USBUART_A : return _log_initUartA( baud );
L_mikrobus_logInit92:
; baud start address is: 4 (R1)
0x1394	0x4608    MOV	R0, R1
; baud end address is: 4 (R1)
0x1396	0xF7FFFD19  BL	easymx_v7_STM32F107VC__log_initUartA+0
0x139A	0xE00E    B	L_end_mikrobus_logInit
;easymx_v7_STM32F107VC.c, 312 :: 		case _LOG_USBUART_B : return _log_initUartB( baud );
L_mikrobus_logInit93:
; baud start address is: 4 (R1)
0x139C	0x4608    MOV	R0, R1
; baud end address is: 4 (R1)
0x139E	0xF7FFFDC9  BL	easymx_v7_STM32F107VC__log_initUartB+0
0x13A2	0xE00A    B	L_end_mikrobus_logInit
;easymx_v7_STM32F107VC.c, 314 :: 		default : return _MIKROBUS_ERR_BUS;
L_mikrobus_logInit94:
0x13A4	0x2001    MOVS	R0, #1
0x13A6	0xE008    B	L_end_mikrobus_logInit
;easymx_v7_STM32F107VC.c, 315 :: 		}
L_mikrobus_logInit88:
; baud start address is: 4 (R1)
; port start address is: 0 (R0)
0x13A8	0x2800    CMP	R0, #0
0x13AA	0xD0EB    BEQ	L_mikrobus_logInit90
0x13AC	0x2801    CMP	R0, #1
0x13AE	0xD0ED    BEQ	L_mikrobus_logInit91
0x13B0	0x2820    CMP	R0, #32
0x13B2	0xD0EF    BEQ	L_mikrobus_logInit92
0x13B4	0x2830    CMP	R0, #48
0x13B6	0xD0F1    BEQ	L_mikrobus_logInit93
; port end address is: 0 (R0)
; baud end address is: 4 (R1)
0x13B8	0xE7F4    B	L_mikrobus_logInit94
;easymx_v7_STM32F107VC.c, 317 :: 		}
L_end_mikrobus_logInit:
0x13BA	0xF8DDE000  LDR	LR, [SP, #0]
0x13BE	0xB001    ADD	SP, SP, #4
0x13C0	0x4770    BX	LR
; end of _mikrobus_logInit
easymx_v7_STM32F107VC__log_init1:
;__em_f107vc_log.c, 23 :: 		static T_mikrobus_ret _log_init1(uint32_t baud)
; baud start address is: 0 (R0)
0x0EC4	0xB081    SUB	SP, SP, #4
0x0EC6	0xF8CDE000  STR	LR, [SP, #0]
; baud end address is: 0 (R0)
; baud start address is: 0 (R0)
;__em_f107vc_log.c, 25 :: 		UART3_Init_Advanced(baud, _UART_8_BIT_DATA, _UART_NOPARITY, _UART_ONE_STOPBIT, &_GPIO_MODULE_USART3_PD89);
0x0ECA	0x4909    LDR	R1, [PC, #36]
0x0ECC	0xB402    PUSH	(R1)
0x0ECE	0xF2400300  MOVW	R3, #0
0x0ED2	0xF2400200  MOVW	R2, #0
0x0ED6	0xF2400100  MOVW	R1, #0
; baud end address is: 0 (R0)
0x0EDA	0xF7FFFF4F  BL	_UART3_Init_Advanced+0
0x0EDE	0xB001    ADD	SP, SP, #4
;__em_f107vc_log.c, 26 :: 		logger = UART3_Write;
0x0EE0	0x4A04    LDR	R2, [PC, #16]
0x0EE2	0x4905    LDR	R1, [PC, #20]
0x0EE4	0x600A    STR	R2, [R1, #0]
;__em_f107vc_log.c, 27 :: 		return 0;
0x0EE6	0x2000    MOVS	R0, #0
;__em_f107vc_log.c, 28 :: 		}
L_end__log_init1:
0x0EE8	0xF8DDE000  LDR	LR, [SP, #0]
0x0EEC	0xB001    ADD	SP, SP, #4
0x0EEE	0x4770    BX	LR
0x0EF0	0x1DA80000  	__GPIO_MODULE_USART3_PD89+0
0x0EF4	0x0BDD0000  	_UART3_Write+0
0x0EF8	0x02A82000  	_logger+0
; end of easymx_v7_STM32F107VC__log_init1
easymx_v7_STM32F107VC__log_init2:
;__em_f107vc_log.c, 30 :: 		static T_mikrobus_ret _log_init2(uint32_t baud)
; baud start address is: 0 (R0)
0x0E04	0xB081    SUB	SP, SP, #4
0x0E06	0xF8CDE000  STR	LR, [SP, #0]
; baud end address is: 0 (R0)
; baud start address is: 0 (R0)
;__em_f107vc_log.c, 32 :: 		UART2_Init_Advanced(baud, _UART_8_BIT_DATA, _UART_NOPARITY, _UART_ONE_STOPBIT, &_GPIO_MODULE_USART2_PD56);
0x0E0A	0x4909    LDR	R1, [PC, #36]
0x0E0C	0xB402    PUSH	(R1)
0x0E0E	0xF2400300  MOVW	R3, #0
0x0E12	0xF2400200  MOVW	R2, #0
0x0E16	0xF2400100  MOVW	R1, #0
; baud end address is: 0 (R0)
0x0E1A	0xF7FFFEBD  BL	_UART2_Init_Advanced+0
0x0E1E	0xB001    ADD	SP, SP, #4
;__em_f107vc_log.c, 33 :: 		logger = UART2_Write;
0x0E20	0x4A04    LDR	R2, [PC, #16]
0x0E22	0x4905    LDR	R1, [PC, #20]
0x0E24	0x600A    STR	R2, [R1, #0]
;__em_f107vc_log.c, 34 :: 		return 0;
0x0E26	0x2000    MOVS	R0, #0
;__em_f107vc_log.c, 35 :: 		}
L_end__log_init2:
0x0E28	0xF8DDE000  LDR	LR, [SP, #0]
0x0E2C	0xB001    ADD	SP, SP, #4
0x0E2E	0x4770    BX	LR
0x0E30	0x1CD00000  	__GPIO_MODULE_USART2_PD56+0
0x0E34	0x0C150000  	_UART2_Write+0
0x0E38	0x02A82000  	_logger+0
; end of easymx_v7_STM32F107VC__log_init2
easymx_v7_STM32F107VC__log_initUartA:
;__em_f107vc_log.c, 37 :: 		static T_mikrobus_ret _log_initUartA(uint32_t baud)
; baud start address is: 0 (R0)
0x0DCC	0xB081    SUB	SP, SP, #4
0x0DCE	0xF8CDE000  STR	LR, [SP, #0]
; baud end address is: 0 (R0)
; baud start address is: 0 (R0)
;__em_f107vc_log.c, 39 :: 		UART1_Init_Advanced(baud, _UART_8_BIT_DATA, _UART_NOPARITY, _UART_ONE_STOPBIT, &_GPIO_MODULE_USART1_PA9_10);
0x0DD2	0x4909    LDR	R1, [PC, #36]
0x0DD4	0xB402    PUSH	(R1)
0x0DD6	0xF2400300  MOVW	R3, #0
0x0DDA	0xF2400200  MOVW	R2, #0
0x0DDE	0xF2400100  MOVW	R1, #0
; baud end address is: 0 (R0)
0x0DE2	0xF7FFFFDF  BL	_UART1_Init_Advanced+0
0x0DE6	0xB001    ADD	SP, SP, #4
;__em_f107vc_log.c, 40 :: 		logger = UART1_Write;
0x0DE8	0x4A04    LDR	R2, [PC, #16]
0x0DEA	0x4905    LDR	R1, [PC, #20]
0x0DEC	0x600A    STR	R2, [R1, #0]
;__em_f107vc_log.c, 41 :: 		return 0;
0x0DEE	0x2000    MOVS	R0, #0
;__em_f107vc_log.c, 42 :: 		}
L_end__log_initUartA:
0x0DF0	0xF8DDE000  LDR	LR, [SP, #0]
0x0DF4	0xB001    ADD	SP, SP, #4
0x0DF6	0x4770    BX	LR
0x0DF8	0x1D3C0000  	__GPIO_MODULE_USART1_PA9_10+0
0x0DFC	0x0BC10000  	_UART1_Write+0
0x0E00	0x02A82000  	_logger+0
; end of easymx_v7_STM32F107VC__log_initUartA
_UART1_Init_Advanced:
;__Lib_UART_123_45.c, 372 :: 		
; stop_bits start address is: 12 (R3)
; parity start address is: 8 (R2)
; data_bits start address is: 4 (R1)
; baud_rate start address is: 0 (R0)
0x0DA4	0xB081    SUB	SP, SP, #4
0x0DA6	0xF8CDE000  STR	LR, [SP, #0]
; stop_bits end address is: 12 (R3)
; parity end address is: 8 (R2)
; data_bits end address is: 4 (R1)
; baud_rate end address is: 0 (R0)
; baud_rate start address is: 0 (R0)
; data_bits start address is: 4 (R1)
; parity start address is: 8 (R2)
; stop_bits start address is: 12 (R3)
; module start address is: 20 (R5)
0x0DAA	0x9D01    LDR	R5, [SP, #4]
;__Lib_UART_123_45.c, 374 :: 		
0x0DAC	0x462C    MOV	R4, R5
; module end address is: 20 (R5)
0x0DAE	0xB410    PUSH	(R4)
; parity end address is: 8 (R2)
0x0DB0	0xB408    PUSH	(R3)
0x0DB2	0xB293    UXTH	R3, R2
0x0DB4	0xB28A    UXTH	R2, R1
; data_bits end address is: 4 (R1)
0x0DB6	0x4601    MOV	R1, R0
; baud_rate end address is: 0 (R0)
0x0DB8	0x4803    LDR	R0, [PC, #12]
; stop_bits end address is: 12 (R3)
0x0DBA	0xF7FFFCAF  BL	__Lib_UART_123_45_UARTx_Init_Advanced+0
0x0DBE	0xB002    ADD	SP, SP, #8
;__Lib_UART_123_45.c, 375 :: 		
L_end_UART1_Init_Advanced:
0x0DC0	0xF8DDE000  LDR	LR, [SP, #0]
0x0DC4	0xB001    ADD	SP, SP, #4
0x0DC6	0x4770    BX	LR
0x0DC8	0x38004001  	USART1_SR+0
; end of _UART1_Init_Advanced
easymx_v7_STM32F107VC__log_initUartB:
;__em_f107vc_log.c, 44 :: 		static T_mikrobus_ret _log_initUartB(uint32_t baud)
; baud start address is: 0 (R0)
0x0F34	0xB081    SUB	SP, SP, #4
0x0F36	0xF8CDE000  STR	LR, [SP, #0]
; baud end address is: 0 (R0)
; baud start address is: 0 (R0)
;__em_f107vc_log.c, 46 :: 		UART2_Init_Advanced(baud, _UART_8_BIT_DATA, _UART_NOPARITY, _UART_ONE_STOPBIT, &_GPIO_MODULE_USART2_PD56);
0x0F3A	0x4909    LDR	R1, [PC, #36]
0x0F3C	0xB402    PUSH	(R1)
0x0F3E	0xF2400300  MOVW	R3, #0
0x0F42	0xF2400200  MOVW	R2, #0
0x0F46	0xF2400100  MOVW	R1, #0
; baud end address is: 0 (R0)
0x0F4A	0xF7FFFE25  BL	_UART2_Init_Advanced+0
0x0F4E	0xB001    ADD	SP, SP, #4
;__em_f107vc_log.c, 47 :: 		logger = UART2_Write;
0x0F50	0x4A04    LDR	R2, [PC, #16]
0x0F52	0x4905    LDR	R1, [PC, #20]
0x0F54	0x600A    STR	R2, [R1, #0]
;__em_f107vc_log.c, 48 :: 		return 0;
0x0F56	0x2000    MOVS	R0, #0
;__em_f107vc_log.c, 49 :: 		}
L_end__log_initUartB:
0x0F58	0xF8DDE000  LDR	LR, [SP, #0]
0x0F5C	0xB001    ADD	SP, SP, #4
0x0F5E	0x4770    BX	LR
0x0F60	0x1CD00000  	__GPIO_MODULE_USART2_PD56+0
0x0F64	0x0C150000  	_UART2_Write+0
0x0F68	0x02A82000  	_logger+0
; end of easymx_v7_STM32F107VC__log_initUartB
_mikrobus_logWrite:
;easymx_v7_STM32F107VC.c, 319 :: 		T_mikrobus_ret mikrobus_logWrite(uint8_t* data_, T_log_format format)
; format start address is: 4 (R1)
; data_ start address is: 0 (R0)
0x1284	0xB083    SUB	SP, SP, #12
0x1286	0xF8CDE000  STR	LR, [SP, #0]
0x128A	0x4602    MOV	R2, R0
; format end address is: 4 (R1)
; data_ end address is: 0 (R0)
; data_ start address is: 8 (R2)
; format start address is: 4 (R1)
;easymx_v7_STM32F107VC.c, 321 :: 		uint8_t *ptr = data_;
; ptr start address is: 0 (R0)
0x128C	0x4610    MOV	R0, R2
; data_ end address is: 8 (R2)
;easymx_v7_STM32F107VC.c, 322 :: 		uint8_t row = 13;
0x128E	0x220D    MOVS	R2, #13
0x1290	0xF88D2008  STRB	R2, [SP, #8]
0x1294	0x220A    MOVS	R2, #10
0x1296	0xF88D2009  STRB	R2, [SP, #9]
;easymx_v7_STM32F107VC.c, 323 :: 		uint8_t line = 10;
;easymx_v7_STM32F107VC.c, 324 :: 		switch( format )
0x129A	0xE01F    B	L_mikrobus_logWrite95
; format end address is: 4 (R1)
;easymx_v7_STM32F107VC.c, 326 :: 		case _LOG_BYTE :
L_mikrobus_logWrite97:
;easymx_v7_STM32F107VC.c, 327 :: 		_log_write( ptr );
; ptr end address is: 0 (R0)
0x129C	0xF7FFFF76  BL	easymx_v7_STM32F107VC__log_write+0
;easymx_v7_STM32F107VC.c, 328 :: 		break;
0x12A0	0xE023    B	L_mikrobus_logWrite96
;easymx_v7_STM32F107VC.c, 329 :: 		case _LOG_TEXT :
L_mikrobus_logWrite98:
;easymx_v7_STM32F107VC.c, 330 :: 		while( *ptr )
; ptr start address is: 0 (R0)
L_mikrobus_logWrite99:
; ptr end address is: 0 (R0)
; ptr start address is: 0 (R0)
0x12A2	0x7802    LDRB	R2, [R0, #0]
0x12A4	0xB12A    CBZ	R2, L_mikrobus_logWrite100
;easymx_v7_STM32F107VC.c, 332 :: 		_log_write( ptr );
0x12A6	0x9001    STR	R0, [SP, #4]
0x12A8	0xF7FFFF70  BL	easymx_v7_STM32F107VC__log_write+0
0x12AC	0x9801    LDR	R0, [SP, #4]
;easymx_v7_STM32F107VC.c, 333 :: 		ptr++;
0x12AE	0x1C40    ADDS	R0, R0, #1
;easymx_v7_STM32F107VC.c, 334 :: 		}
; ptr end address is: 0 (R0)
0x12B0	0xE7F7    B	L_mikrobus_logWrite99
L_mikrobus_logWrite100:
;easymx_v7_STM32F107VC.c, 335 :: 		break;
0x12B2	0xE01A    B	L_mikrobus_logWrite96
;easymx_v7_STM32F107VC.c, 336 :: 		case _LOG_LINE :
L_mikrobus_logWrite101:
;easymx_v7_STM32F107VC.c, 337 :: 		while( *ptr )
; ptr start address is: 0 (R0)
L_mikrobus_logWrite102:
; ptr end address is: 0 (R0)
; ptr start address is: 0 (R0)
0x12B4	0x7802    LDRB	R2, [R0, #0]
0x12B6	0xB12A    CBZ	R2, L_mikrobus_logWrite103
;easymx_v7_STM32F107VC.c, 339 :: 		_log_write( ptr );
0x12B8	0x9001    STR	R0, [SP, #4]
0x12BA	0xF7FFFF67  BL	easymx_v7_STM32F107VC__log_write+0
0x12BE	0x9801    LDR	R0, [SP, #4]
;easymx_v7_STM32F107VC.c, 340 :: 		ptr++;
0x12C0	0x1C40    ADDS	R0, R0, #1
;easymx_v7_STM32F107VC.c, 341 :: 		}
; ptr end address is: 0 (R0)
0x12C2	0xE7F7    B	L_mikrobus_logWrite102
L_mikrobus_logWrite103:
;easymx_v7_STM32F107VC.c, 342 :: 		_log_write( &row );
0x12C4	0xAA02    ADD	R2, SP, #8
0x12C6	0x4610    MOV	R0, R2
0x12C8	0xF7FFFF60  BL	easymx_v7_STM32F107VC__log_write+0
;easymx_v7_STM32F107VC.c, 343 :: 		_log_write( &line );
0x12CC	0xF10D0209  ADD	R2, SP, #9
0x12D0	0x4610    MOV	R0, R2
0x12D2	0xF7FFFF5B  BL	easymx_v7_STM32F107VC__log_write+0
;easymx_v7_STM32F107VC.c, 344 :: 		break;
0x12D6	0xE008    B	L_mikrobus_logWrite96
;easymx_v7_STM32F107VC.c, 345 :: 		default :
L_mikrobus_logWrite104:
;easymx_v7_STM32F107VC.c, 346 :: 		return _MIKROBUS_ERR_LOG;
0x12D8	0x2006    MOVS	R0, #6
0x12DA	0xE007    B	L_end_mikrobus_logWrite
;easymx_v7_STM32F107VC.c, 347 :: 		}
L_mikrobus_logWrite95:
; ptr start address is: 0 (R0)
; format start address is: 4 (R1)
0x12DC	0x2900    CMP	R1, #0
0x12DE	0xD0DD    BEQ	L_mikrobus_logWrite97
0x12E0	0x2901    CMP	R1, #1
0x12E2	0xD0DE    BEQ	L_mikrobus_logWrite98
0x12E4	0x2902    CMP	R1, #2
0x12E6	0xD0E5    BEQ	L_mikrobus_logWrite101
; format end address is: 4 (R1)
; ptr end address is: 0 (R0)
0x12E8	0xE7F6    B	L_mikrobus_logWrite104
L_mikrobus_logWrite96:
;easymx_v7_STM32F107VC.c, 348 :: 		return 0;
0x12EA	0x2000    MOVS	R0, #0
;easymx_v7_STM32F107VC.c, 349 :: 		}
L_end_mikrobus_logWrite:
0x12EC	0xF8DDE000  LDR	LR, [SP, #0]
0x12F0	0xB003    ADD	SP, SP, #12
0x12F2	0x4770    BX	LR
; end of _mikrobus_logWrite
easymx_v7_STM32F107VC__log_write:
;__em_f107vc_log.c, 17 :: 		static T_mikrobus_ret _log_write(uint8_t *data_)
; data_ start address is: 0 (R0)
0x118C	0xB081    SUB	SP, SP, #4
0x118E	0xF8CDE000  STR	LR, [SP, #0]
; data_ end address is: 0 (R0)
; data_ start address is: 0 (R0)
;__em_f107vc_log.c, 19 :: 		logger( *data_ );
0x1192	0x7801    LDRB	R1, [R0, #0]
; data_ end address is: 0 (R0)
0x1194	0xB2CC    UXTB	R4, R1
0x1196	0xB2A0    UXTH	R0, R4
0x1198	0x4C03    LDR	R4, [PC, #12]
0x119A	0x6824    LDR	R4, [R4, #0]
0x119C	0x47A0    BLX	R4
;__em_f107vc_log.c, 20 :: 		return 0;
0x119E	0x2000    MOVS	R0, #0
;__em_f107vc_log.c, 21 :: 		}
L_end__log_write:
0x11A0	0xF8DDE000  LDR	LR, [SP, #0]
0x11A4	0xB001    ADD	SP, SP, #4
0x11A6	0x4770    BX	LR
0x11A8	0x02A82000  	_logger+0
; end of easymx_v7_STM32F107VC__log_write
_UART1_Write:
;__Lib_UART_123_45.c, 41 :: 		
; _data start address is: 0 (R0)
0x0BC0	0xB081    SUB	SP, SP, #4
0x0BC2	0xF8CDE000  STR	LR, [SP, #0]
; _data end address is: 0 (R0)
; _data start address is: 0 (R0)
;__Lib_UART_123_45.c, 42 :: 		
0x0BC6	0xB281    UXTH	R1, R0
; _data end address is: 0 (R0)
0x0BC8	0x4803    LDR	R0, [PC, #12]
0x0BCA	0xF7FFFD69  BL	__Lib_UART_123_45_UARTx_Write+0
;__Lib_UART_123_45.c, 43 :: 		
L_end_UART1_Write:
0x0BCE	0xF8DDE000  LDR	LR, [SP, #0]
0x0BD2	0xB001    ADD	SP, SP, #4
0x0BD4	0x4770    BX	LR
0x0BD6	0xBF00    NOP
0x0BD8	0x38004001  	USART1_SR+0
; end of _UART1_Write
__Lib_UART_123_45_UARTx_Write:
;__Lib_UART_123_45.c, 35 :: 		
; _data start address is: 4 (R1)
; UART_Base start address is: 0 (R0)
0x06A0	0xB081    SUB	SP, SP, #4
; _data end address is: 4 (R1)
; UART_Base end address is: 0 (R0)
; UART_Base start address is: 0 (R0)
; _data start address is: 4 (R1)
0x06A2	0xF8AD1000  STRH	R1, [SP, #0]
; UART_Base end address is: 0 (R0)
; _data end address is: 4 (R1)
0x06A6	0x4601    MOV	R1, R0
0x06A8	0xF8BD0000  LDRH	R0, [SP, #0]
;__Lib_UART_123_45.c, 36 :: 		
L___Lib_UART_123_45_UARTx_Write0:
; _data start address is: 0 (R0)
; UART_Base start address is: 4 (R1)
0x06AC	0x680B    LDR	R3, [R1, #0]
0x06AE	0xF3C312C0  UBFX	R2, R3, #7, #1
0x06B2	0xB902    CBNZ	R2, L___Lib_UART_123_45_UARTx_Write1
;__Lib_UART_123_45.c, 37 :: 		
0x06B4	0xE7FA    B	L___Lib_UART_123_45_UARTx_Write0
L___Lib_UART_123_45_UARTx_Write1:
;__Lib_UART_123_45.c, 38 :: 		
0x06B6	0x1D0A    ADDS	R2, R1, #4
; UART_Base end address is: 4 (R1)
0x06B8	0x6010    STR	R0, [R2, #0]
; _data end address is: 0 (R0)
;__Lib_UART_123_45.c, 39 :: 		
L_end_UARTx_Write:
0x06BA	0xB001    ADD	SP, SP, #4
0x06BC	0x4770    BX	LR
; end of __Lib_UART_123_45_UARTx_Write
_UART2_Write:
;__Lib_UART_123_45.c, 45 :: 		
; _data start address is: 0 (R0)
0x0C14	0xB081    SUB	SP, SP, #4
0x0C16	0xF8CDE000  STR	LR, [SP, #0]
; _data end address is: 0 (R0)
; _data start address is: 0 (R0)
;__Lib_UART_123_45.c, 46 :: 		
0x0C1A	0xB281    UXTH	R1, R0
; _data end address is: 0 (R0)
0x0C1C	0x4803    LDR	R0, [PC, #12]
0x0C1E	0xF7FFFD3F  BL	__Lib_UART_123_45_UARTx_Write+0
;__Lib_UART_123_45.c, 47 :: 		
L_end_UART2_Write:
0x0C22	0xF8DDE000  LDR	LR, [SP, #0]
0x0C26	0xB001    ADD	SP, SP, #4
0x0C28	0x4770    BX	LR
0x0C2A	0xBF00    NOP
0x0C2C	0x44004000  	USART2_SR+0
; end of _UART2_Write
_UART3_Write:
;__Lib_UART_123_45.c, 49 :: 		
; _data start address is: 0 (R0)
0x0BDC	0xB081    SUB	SP, SP, #4
0x0BDE	0xF8CDE000  STR	LR, [SP, #0]
; _data end address is: 0 (R0)
; _data start address is: 0 (R0)
;__Lib_UART_123_45.c, 50 :: 		
0x0BE2	0xB281    UXTH	R1, R0
; _data end address is: 0 (R0)
0x0BE4	0x4803    LDR	R0, [PC, #12]
0x0BE6	0xF7FFFD5B  BL	__Lib_UART_123_45_UARTx_Write+0
;__Lib_UART_123_45.c, 51 :: 		
L_end_UART3_Write:
0x0BEA	0xF8DDE000  LDR	LR, [SP, #0]
0x0BEE	0xB001    ADD	SP, SP, #4
0x0BF0	0x4770    BX	LR
0x0BF2	0xBF00    NOP
0x0BF4	0x48004000  	USART3_SR+0
; end of _UART3_Write
_UART4_Write:
;__Lib_UART_123_45.c, 53 :: 		
; _data start address is: 0 (R0)
0x0BF8	0xB081    SUB	SP, SP, #4
0x0BFA	0xF8CDE000  STR	LR, [SP, #0]
; _data end address is: 0 (R0)
; _data start address is: 0 (R0)
;__Lib_UART_123_45.c, 54 :: 		
0x0BFE	0xB281    UXTH	R1, R0
; _data end address is: 0 (R0)
0x0C00	0x4803    LDR	R0, [PC, #12]
0x0C02	0xF7FFFD4D  BL	__Lib_UART_123_45_UARTx_Write+0
;__Lib_UART_123_45.c, 55 :: 		
L_end_UART4_Write:
0x0C06	0xF8DDE000  LDR	LR, [SP, #0]
0x0C0A	0xB001    ADD	SP, SP, #4
0x0C0C	0x4770    BX	LR
0x0C0E	0xBF00    NOP
0x0C10	0x4C004000  	UART4_SR+0
; end of _UART4_Write
_UART5_Write:
;__Lib_UART_123_45.c, 57 :: 		
; _data start address is: 0 (R0)
0x0B7C	0xB081    SUB	SP, SP, #4
0x0B7E	0xF8CDE000  STR	LR, [SP, #0]
; _data end address is: 0 (R0)
; _data start address is: 0 (R0)
;__Lib_UART_123_45.c, 58 :: 		
0x0B82	0xB281    UXTH	R1, R0
; _data end address is: 0 (R0)
0x0B84	0x4803    LDR	R0, [PC, #12]
0x0B86	0xF7FFFD8B  BL	__Lib_UART_123_45_UARTx_Write+0
;__Lib_UART_123_45.c, 59 :: 		
L_end_UART5_Write:
0x0B8A	0xF8DDE000  LDR	LR, [SP, #0]
0x0B8E	0xB001    ADD	SP, SP, #4
0x0B90	0x4770    BX	LR
0x0B92	0xBF00    NOP
0x0B94	0x50004000  	UART5_SR+0
; end of _UART5_Write
_applicationInit:
;Click_SAML_Touch_STM.c, 53 :: 		void applicationInit()
0x1804	0xB081    SUB	SP, SP, #4
0x1806	0xF8CDE000  STR	LR, [SP, #0]
;Click_SAML_Touch_STM.c, 56 :: 		samltouch_configTimer();
0x180A	0xF7FFFD73  BL	Click_SAML_Touch_STM_samltouch_configTimer+0
;Click_SAML_Touch_STM.c, 59 :: 		samltouch_uartDriverInit((T_SAMLTOUCH_P)&_MIKROBUS1_GPIO, (T_SAMLTOUCH_P)&_MIKROBUS1_UART);
0x180E	0x4909    LDR	R1, [PC, #36]
0x1810	0x4809    LDR	R0, [PC, #36]
0x1812	0xF7FFFDD7  BL	_samltouch_uartDriverInit+0
;Click_SAML_Touch_STM.c, 60 :: 		samltouch_coreInit( samltouch_default_handler, 1500 );
0x1816	0x4809    LDR	R0, [PC, #36]
0x1818	0xF24051DC  MOVW	R1, #1500
0x181C	0xF7FFFE8A  BL	_samltouch_coreInit+0
;Click_SAML_Touch_STM.c, 63 :: 		samltouch_hfcEnable( 1 );
0x1820	0x2001    MOVS	R0, #1
0x1822	0xF7FFFDDD  BL	_samltouch_hfcEnable+0
;Click_SAML_Touch_STM.c, 64 :: 		timerCounter = 0;
0x1826	0x2100    MOVS	R1, #0
0x1828	0x4805    LDR	R0, [PC, #20]
0x182A	0x6001    STR	R1, [R0, #0]
;Click_SAML_Touch_STM.c, 65 :: 		}
L_end_applicationInit:
0x182C	0xF8DDE000  LDR	LR, [SP, #0]
0x1830	0xB001    ADD	SP, SP, #4
0x1832	0x4770    BX	LR
0x1834	0x1EA80000  	__MIKROBUS1_UART+0
0x1838	0x1E140000  	__MIKROBUS1_GPIO+0
0x183C	0x11C90000  	_samltouch_default_handler+0
0x1840	0x002C2000  	_timerCounter+0
; end of _applicationInit
Click_SAML_Touch_STM_samltouch_configTimer:
;click_saml_touch_timer.h, 15 :: 		static void samltouch_configTimer()
0x12F4	0xB081    SUB	SP, SP, #4
0x12F6	0xF8CDE000  STR	LR, [SP, #0]
;click_saml_touch_timer.h, 17 :: 		RCC_APB1ENR.TIM2EN = 1;
0x12FA	0x2101    MOVS	R1, #1
0x12FC	0xB249    SXTB	R1, R1
0x12FE	0x480E    LDR	R0, [PC, #56]
0x1300	0x6001    STR	R1, [R0, #0]
;click_saml_touch_timer.h, 18 :: 		TIM2_CR1.CEN = 0;
0x1302	0x2100    MOVS	R1, #0
0x1304	0xB249    SXTB	R1, R1
0x1306	0x480D    LDR	R0, [PC, #52]
0x1308	0x6001    STR	R1, [R0, #0]
;click_saml_touch_timer.h, 19 :: 		TIM2_PSC = 1;
0x130A	0x2101    MOVS	R1, #1
0x130C	0x480C    LDR	R0, [PC, #48]
0x130E	0x6001    STR	R1, [R0, #0]
;click_saml_touch_timer.h, 20 :: 		TIM2_ARR = 35999;
0x1310	0xF648419F  MOVW	R1, #35999
0x1314	0x480B    LDR	R0, [PC, #44]
0x1316	0x6001    STR	R1, [R0, #0]
;click_saml_touch_timer.h, 21 :: 		NVIC_IntEnable(IVT_INT_TIM2);
0x1318	0xF240002C  MOVW	R0, #44
0x131C	0xF7FFFE3C  BL	_NVIC_IntEnable+0
;click_saml_touch_timer.h, 22 :: 		TIM2_DIER.UIE = 1;
0x1320	0x2101    MOVS	R1, #1
0x1322	0xB249    SXTB	R1, R1
0x1324	0x4808    LDR	R0, [PC, #32]
0x1326	0x6001    STR	R1, [R0, #0]
;click_saml_touch_timer.h, 23 :: 		TIM2_CR1.CEN = 1;
0x1328	0x4804    LDR	R0, [PC, #16]
0x132A	0x6001    STR	R1, [R0, #0]
;click_saml_touch_timer.h, 24 :: 		EnableInterrupts();
0x132C	0xF7FFFE1E  BL	_EnableInterrupts+0
;click_saml_touch_timer.h, 25 :: 		}
L_end_samltouch_configTimer:
0x1330	0xF8DDE000  LDR	LR, [SP, #0]
0x1334	0xB001    ADD	SP, SP, #4
0x1336	0x4770    BX	LR
0x1338	0x03804242  	RCC_APB1ENR+0
0x133C	0x00004200  	TIM2_CR1+0
0x1340	0x00284000  	TIM2_PSC+0
0x1344	0x002C4000  	TIM2_ARR+0
0x1348	0x01804200  	TIM2_DIER+0
; end of Click_SAML_Touch_STM_samltouch_configTimer
_NVIC_IntEnable:
;__Lib_System_105_107.c, 156 :: 		
; ivt start address is: 0 (R0)
0x0F98	0xB081    SUB	SP, SP, #4
; ivt end address is: 0 (R0)
; ivt start address is: 0 (R0)
;__Lib_System_105_107.c, 168 :: 		
0x0F9A	0x2804    CMP	R0, #4
0x0F9C	0xD106    BNE	L_NVIC_IntEnable6
; ivt end address is: 0 (R0)
;__Lib_System_105_107.c, 173 :: 		
0x0F9E	0x4919    LDR	R1, [PC, #100]
0x0FA0	0x6809    LDR	R1, [R1, #0]
0x0FA2	0xF4413280  ORR	R2, R1, #65536
0x0FA6	0x4917    LDR	R1, [PC, #92]
0x0FA8	0x600A    STR	R2, [R1, #0]
;__Lib_System_105_107.c, 174 :: 		
0x0FAA	0xE028    B	L_NVIC_IntEnable7
L_NVIC_IntEnable6:
;__Lib_System_105_107.c, 175 :: 		
; ivt start address is: 0 (R0)
0x0FAC	0x2805    CMP	R0, #5
0x0FAE	0xD106    BNE	L_NVIC_IntEnable8
; ivt end address is: 0 (R0)
;__Lib_System_105_107.c, 180 :: 		
0x0FB0	0x4914    LDR	R1, [PC, #80]
0x0FB2	0x6809    LDR	R1, [R1, #0]
0x0FB4	0xF4413200  ORR	R2, R1, #131072
0x0FB8	0x4912    LDR	R1, [PC, #72]
0x0FBA	0x600A    STR	R2, [R1, #0]
;__Lib_System_105_107.c, 181 :: 		
0x0FBC	0xE01F    B	L_NVIC_IntEnable9
L_NVIC_IntEnable8:
;__Lib_System_105_107.c, 182 :: 		
; ivt start address is: 0 (R0)
0x0FBE	0x2806    CMP	R0, #6
0x0FC0	0xD106    BNE	L_NVIC_IntEnable10
; ivt end address is: 0 (R0)
;__Lib_System_105_107.c, 187 :: 		
0x0FC2	0x4910    LDR	R1, [PC, #64]
0x0FC4	0x6809    LDR	R1, [R1, #0]
0x0FC6	0xF4412280  ORR	R2, R1, #262144
0x0FCA	0x490E    LDR	R1, [PC, #56]
0x0FCC	0x600A    STR	R2, [R1, #0]
;__Lib_System_105_107.c, 188 :: 		
0x0FCE	0xE016    B	L_NVIC_IntEnable11
L_NVIC_IntEnable10:
;__Lib_System_105_107.c, 189 :: 		
; ivt start address is: 0 (R0)
0x0FD0	0x280F    CMP	R0, #15
0x0FD2	0xD106    BNE	L_NVIC_IntEnable12
; ivt end address is: 0 (R0)
;__Lib_System_105_107.c, 194 :: 		
0x0FD4	0x490C    LDR	R1, [PC, #48]
0x0FD6	0x6809    LDR	R1, [R1, #0]
0x0FD8	0xF0410202  ORR	R2, R1, #2
0x0FDC	0x490A    LDR	R1, [PC, #40]
0x0FDE	0x600A    STR	R2, [R1, #0]
;__Lib_System_105_107.c, 195 :: 		
0x0FE0	0xE00D    B	L_NVIC_IntEnable13
L_NVIC_IntEnable12:
;__Lib_System_105_107.c, 196 :: 		
; ivt start address is: 0 (R0)
0x0FE2	0x2810    CMP	R0, #16
0x0FE4	0xD30B    BCC	L_NVIC_IntEnable14
;__Lib_System_105_107.c, 201 :: 		
0x0FE6	0xF2A00410  SUBW	R4, R0, #16
; ivt end address is: 0 (R0)
0x0FEA	0x0961    LSRS	R1, R4, #5
0x0FEC	0x008A    LSLS	R2, R1, #2
0x0FEE	0x4907    LDR	R1, [PC, #28]
0x0FF0	0x188B    ADDS	R3, R1, R2
;__Lib_System_105_107.c, 202 :: 		
0x0FF2	0xF004021F  AND	R2, R4, #31
0x0FF6	0xF04F0101  MOV	R1, #1
0x0FFA	0x4091    LSLS	R1, R2
0x0FFC	0x6019    STR	R1, [R3, #0]
;__Lib_System_105_107.c, 203 :: 		
L_NVIC_IntEnable14:
L_NVIC_IntEnable13:
L_NVIC_IntEnable11:
L_NVIC_IntEnable9:
L_NVIC_IntEnable7:
;__Lib_System_105_107.c, 204 :: 		
L_end_NVIC_IntEnable:
0x0FFE	0xB001    ADD	SP, SP, #4
0x1000	0x4770    BX	LR
0x1002	0xBF00    NOP
0x1004	0xED24E000  	SCB_SHCRS+0
0x1008	0xE010E000  	STK_CTRL+0
0x100C	0xE100E000  	NVIC_ISER0+0
; end of _NVIC_IntEnable
_EnableInterrupts:
;__Lib_System_105_107.c, 107 :: 		
0x0F6C	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 110 :: 		
0x0F6E	0xF3EF8C10  MRS	R12, #16
0x0F72	0x4660    MOV	R0, R12
; result start address is: 0 (R0)
;__Lib_System_105_107.c, 111 :: 		
0x0F74	0xB662    CPSIE	i
;__Lib_System_105_107.c, 113 :: 		
; result end address is: 0 (R0)
;__Lib_System_105_107.c, 114 :: 		
L_end_EnableInterrupts:
0x0F76	0xB001    ADD	SP, SP, #4
0x0F78	0x4770    BX	LR
; end of _EnableInterrupts
_samltouch_uartDriverInit:
;__samltouch_driver.c, 506 :: 		void samltouch_uartDriverInit(T_SAMLTOUCH_P gpioObj, T_SAMLTOUCH_P uartObj)
; uartObj start address is: 4 (R1)
; gpioObj start address is: 0 (R0)
0x13C4	0xB081    SUB	SP, SP, #4
0x13C6	0xF8CDE000  STR	LR, [SP, #0]
0x13CA	0x4603    MOV	R3, R0
; uartObj end address is: 4 (R1)
; gpioObj end address is: 0 (R0)
; gpioObj start address is: 12 (R3)
; uartObj start address is: 4 (R1)
;__samltouch_driver.c, 508 :: 		hal_uartMap( (T_HAL_P)uartObj );
0x13CC	0x4608    MOV	R0, R1
; uartObj end address is: 4 (R1)
0x13CE	0xF7FFFEC9  BL	__samltouch_driver_hal_uartMap+0
;__samltouch_driver.c, 509 :: 		hal_gpioMap( (T_HAL_P)gpioObj );
0x13D2	0x4618    MOV	R0, R3
; gpioObj end address is: 12 (R3)
0x13D4	0xF7FFFF04  BL	__samltouch_driver_hal_gpioMap+0
;__samltouch_driver.c, 510 :: 		}
L_end_samltouch_uartDriverInit:
0x13D8	0xF8DDE000  LDR	LR, [SP, #0]
0x13DC	0xB001    ADD	SP, SP, #4
0x13DE	0x4770    BX	LR
; end of _samltouch_uartDriverInit
__samltouch_driver_hal_uartMap:
;__hal_stm32.c, 133 :: 		static void hal_uartMap(T_HAL_P uartObj)
; uartObj start address is: 0 (R0)
; uartObj end address is: 0 (R0)
; uartObj start address is: 0 (R0)
;__hal_stm32.c, 137 :: 		fp_uartWrite = tmp->uartWrite;
0x1164	0x6802    LDR	R2, [R0, #0]
0x1166	0x4906    LDR	R1, [PC, #24]
0x1168	0x600A    STR	R2, [R1, #0]
;__hal_stm32.c, 138 :: 		fp_uartRead  = tmp->uartRead;
0x116A	0x1D01    ADDS	R1, R0, #4
0x116C	0x680A    LDR	R2, [R1, #0]
0x116E	0x4905    LDR	R1, [PC, #20]
0x1170	0x600A    STR	R2, [R1, #0]
;__hal_stm32.c, 139 :: 		fp_uartReady = tmp->uartReady;
0x1172	0xF2000108  ADDW	R1, R0, #8
; uartObj end address is: 0 (R0)
0x1176	0x680A    LDR	R2, [R1, #0]
0x1178	0x4903    LDR	R1, [PC, #12]
0x117A	0x600A    STR	R2, [R1, #0]
;__hal_stm32.c, 140 :: 		}
L_end_hal_uartMap:
0x117C	0x4770    BX	LR
0x117E	0xBF00    NOP
0x1180	0x08BC2000  	__samltouch_driver_fp_uartWrite+0
0x1184	0x08C02000  	__samltouch_driver_fp_uartRead+0
0x1188	0x08C42000  	__samltouch_driver_fp_uartReady+0
; end of __samltouch_driver_hal_uartMap
__samltouch_driver_hal_gpioMap:
;__samltouch_hal.c, 215 :: 		static void hal_gpioMap(T_HAL_P gpioObj)
;__samltouch_hal.c, 291 :: 		}
L_end_hal_gpioMap:
0x11E0	0x4770    BX	LR
; end of __samltouch_driver_hal_gpioMap
_samltouch_coreInit:
;__samltouch_driver.c, 515 :: 		void samltouch_coreInit(T_samltouch_handler defaultHdl, uint32_t defaultWdog)
; defaultWdog start address is: 4 (R1)
; defaultHdl start address is: 0 (R0)
0x1534	0xB081    SUB	SP, SP, #4
0x1536	0xF8CDE000  STR	LR, [SP, #0]
; defaultWdog end address is: 4 (R1)
; defaultHdl end address is: 0 (R0)
; defaultHdl start address is: 0 (R0)
; defaultWdog start address is: 4 (R1)
;__samltouch_driver.c, 517 :: 		f_sequence_active          = false;
0x153A	0x2300    MOVS	R3, #0
0x153C	0x4A24    LDR	R2, [PC, #144]
0x153E	0x7013    STRB	R3, [R2, #0]
;__samltouch_driver.c, 518 :: 		f_buffer_warning           = false;
0x1540	0x2300    MOVS	R3, #0
0x1542	0x4A24    LDR	R2, [PC, #144]
0x1544	0x7013    STRB	R3, [R2, #0]
;__samltouch_driver.c, 519 :: 		f_response_ready           = false;
0x1546	0x2300    MOVS	R3, #0
0x1548	0x4A23    LDR	R2, [PC, #140]
0x154A	0x7013    STRB	R3, [R2, #0]
;__samltouch_driver.c, 520 :: 		f_wdog_timeout             = false;
0x154C	0x2300    MOVS	R3, #0
0x154E	0x4A23    LDR	R2, [PC, #140]
0x1550	0x7013    STRB	R3, [R2, #0]
;__samltouch_driver.c, 523 :: 		hdlBuff.storage[0].handler = defaultHdl;
0x1552	0x4A23    LDR	R2, [PC, #140]
0x1554	0x6010    STR	R0, [R2, #0]
; defaultHdl end address is: 0 (R0)
;__samltouch_driver.c, 524 :: 		hdlBuff.storage[0].timeout = defaultWdog;
0x1556	0x4A23    LDR	R2, [PC, #140]
0x1558	0x6011    STR	R1, [R2, #0]
; defaultWdog end address is: 4 (R1)
;__samltouch_driver.c, 525 :: 		hdlBuff.storage[0].hash    = generateHash("");
0x155A	0x4A23    LDR	R2, [PC, #140]
0x155C	0x4610    MOV	R0, R2
0x155E	0xF7FFFE41  BL	__samltouch_driver_generateHash+0
0x1562	0x4A22    LDR	R2, [PC, #136]
0x1564	0x6010    STR	R0, [R2, #0]
;__samltouch_driver.c, 526 :: 		hdlBuff.storage[0].len     = 0;
0x1566	0x2300    MOVS	R3, #0
0x1568	0x4A21    LDR	R2, [PC, #132]
0x156A	0x8013    STRH	R3, [R2, #0]
;__samltouch_driver.c, 527 :: 		hdlBuff.idx                = 1;
0x156C	0x2301    MOVS	R3, #1
0x156E	0x4A21    LDR	R2, [PC, #132]
0x1570	0x8013    STRH	R3, [R2, #0]
;__samltouch_driver.c, 530 :: 		CORE_CLEAN_RX();
0x1572	0x2300    MOVS	R3, #0
0x1574	0x4A20    LDR	R2, [PC, #128]
0x1576	0x8013    STRH	R3, [R2, #0]
0x1578	0x2300    MOVS	R3, #0
0x157A	0x4A20    LDR	R2, [PC, #128]
0x157C	0x7013    STRB	R3, [R2, #0]
;__samltouch_driver.c, 531 :: 		CORE_BLOCK();
0x157E	0x2300    MOVS	R3, #0
0x1580	0x4A16    LDR	R2, [PC, #88]
0x1582	0x7013    STRB	R3, [R2, #0]
0x1584	0x2300    MOVS	R3, #0
0x1586	0x4A14    LDR	R2, [PC, #80]
0x1588	0x7013    STRB	R3, [R2, #0]
0x158A	0x2301    MOVS	R3, #1
0x158C	0x4A10    LDR	R2, [PC, #64]
0x158E	0x7013    STRB	R3, [R2, #0]
;__samltouch_driver.c, 532 :: 		CORE_UNBLOCK();
0x1590	0x2300    MOVS	R3, #0
0x1592	0x4A12    LDR	R2, [PC, #72]
0x1594	0x7013    STRB	R3, [R2, #0]
0x1596	0x2300    MOVS	R3, #0
0x1598	0x4A0F    LDR	R2, [PC, #60]
0x159A	0x7013    STRB	R3, [R2, #0]
0x159C	0x2300    MOVS	R3, #0
0x159E	0x4A0C    LDR	R2, [PC, #48]
0x15A0	0x7013    STRB	R3, [R2, #0]
;__samltouch_driver.c, 533 :: 		WATCHDOG_START();
0x15A2	0x2300    MOVS	R3, #0
0x15A4	0x4A16    LDR	R2, [PC, #88]
0x15A6	0x6013    STR	R3, [R2, #0]
0x15A8	0x2301    MOVS	R3, #1
0x15AA	0x4A16    LDR	R2, [PC, #88]
0x15AC	0x7013    STRB	R3, [R2, #0]
;__samltouch_driver.c, 534 :: 		WATCHDOG_STOP();
0x15AE	0x2300    MOVS	R3, #0
0x15B0	0x4A14    LDR	R2, [PC, #80]
0x15B2	0x7013    STRB	R3, [R2, #0]
;__samltouch_driver.c, 535 :: 		TIMER_START();
0x15B4	0x2300    MOVS	R3, #0
0x15B6	0x4A14    LDR	R2, [PC, #80]
0x15B8	0x6013    STR	R3, [R2, #0]
0x15BA	0x2301    MOVS	R3, #1
0x15BC	0x4A13    LDR	R2, [PC, #76]
0x15BE	0x7013    STRB	R3, [R2, #0]
;__samltouch_driver.c, 536 :: 		TIMER_STOP();
0x15C0	0x2300    MOVS	R3, #0
0x15C2	0x4A12    LDR	R2, [PC, #72]
0x15C4	0x7013    STRB	R3, [R2, #0]
;__samltouch_driver.c, 537 :: 		}
L_end_samltouch_coreInit:
0x15C6	0xF8DDE000  LDR	LR, [SP, #0]
0x15CA	0xB001    ADD	SP, SP, #4
0x15CC	0x4770    BX	LR
0x15CE	0xBF00    NOP
0x15D0	0x02A62000  	__samltouch_driver_f_sequence_active+0
0x15D4	0x02A72000  	__samltouch_driver_f_buffer_warning+0
0x15D8	0x04C42000  	__samltouch_driver_f_response_ready+0
0x15DC	0x04C52000  	__samltouch_driver_f_wdog_timeout+0
0x15E0	0x02D02000  	__samltouch_driver_hdlBuff+16
0x15E4	0x02CC2000  	__samltouch_driver_hdlBuff+12
0x15E8	0x029C2000  	?lstr1___samltouch_driver+0
0x15EC	0x02C82000  	__samltouch_driver_hdlBuff+8
0x15F0	0x02C42000  	__samltouch_driver_hdlBuff+4
0x15F4	0x02C02000  	__samltouch_driver_hdlBuff+0
0x15F8	0x04C62000  	__samltouch_driver_rxBuff+0
0x15FC	0x04C82000  	__samltouch_driver_rxBuff+2
0x1600	0x08B02000  	__samltouch_driver_c_watchdog_timer+0
0x1604	0x08B42000  	__samltouch_driver_f_watchdog_active+0
0x1608	0x08B82000  	__samltouch_driver_c_timer+0
0x160C	0x08B52000  	__samltouch_driver_f_timer_active+0
; end of _samltouch_coreInit
__samltouch_driver_generateHash:
;__samltouch_driver.c, 399 :: 		static uint32_t generateHash( char *pCmd )
; pCmd start address is: 0 (R0)
; pCmd end address is: 0 (R0)
; pCmd start address is: 0 (R0)
;__samltouch_driver.c, 401 :: 		uint8_t  cnt  = 0;
; cnt start address is: 4 (R1)
0x11E4	0x2100    MOVS	R1, #0
;__samltouch_driver.c, 402 :: 		uint16_t ch   = 0;
;__samltouch_driver.c, 403 :: 		uint32_t hash = 5;
; hash start address is: 16 (R4)
0x11E6	0xF04F0405  MOV	R4, #5
; pCmd end address is: 0 (R0)
; cnt end address is: 4 (R1)
; hash end address is: 16 (R4)
0x11EA	0x4603    MOV	R3, R0
0x11EC	0xB2C8    UXTB	R0, R1
;__samltouch_driver.c, 405 :: 		while ( ch = *pCmd++ )
L___samltouch_driver_generateHash27:
; hash start address is: 16 (R4)
; pCmd start address is: 12 (R3)
; cnt start address is: 0 (R0)
; pCmd start address is: 12 (R3)
0x11EE	0x461A    MOV	R2, R3
0x11F0	0x1C59    ADDS	R1, R3, #1
0x11F2	0x460B    MOV	R3, R1
; pCmd end address is: 12 (R3)
0x11F4	0x7811    LDRB	R1, [R2, #0]
; ch start address is: 8 (R2)
0x11F6	0xB2CA    UXTB	R2, R1
0x11F8	0xB14A    CBZ	R2, L___samltouch_driver_generateHash28
; pCmd end address is: 12 (R3)
;__samltouch_driver.c, 407 :: 		hash += (ch << (cnt % 8));
; pCmd start address is: 12 (R3)
0x11FA	0xF0000107  AND	R1, R0, #7
0x11FE	0xB2C9    UXTB	R1, R1
0x1200	0xFA02F101  LSL	R1, R2, R1
0x1204	0xB289    UXTH	R1, R1
0x1206	0x1864    ADDS	R4, R4, R1
;__samltouch_driver.c, 408 :: 		cnt++;
0x1208	0x1C40    ADDS	R0, R0, #1
0x120A	0xB2C0    UXTB	R0, R0
;__samltouch_driver.c, 409 :: 		}
; pCmd end address is: 12 (R3)
; ch end address is: 8 (R2)
; cnt end address is: 0 (R0)
0x120C	0xE7EF    B	L___samltouch_driver_generateHash27
L___samltouch_driver_generateHash28:
;__samltouch_driver.c, 410 :: 		return hash;
0x120E	0x4620    MOV	R0, R4
; hash end address is: 16 (R4)
;__samltouch_driver.c, 411 :: 		}
L_end_generateHash:
0x1210	0x4770    BX	LR
; end of __samltouch_driver_generateHash
_samltouch_hfcEnable:
;__samltouch_driver.c, 539 :: 		void samltouch_hfcEnable( bool hfcState )
; hfcState start address is: 0 (R0)
; hfcState end address is: 0 (R0)
; hfcState start address is: 0 (R0)
;__samltouch_driver.c, 541 :: 		f_hfc_active = hfcState;
0x13E0	0x4901    LDR	R1, [PC, #4]
0x13E2	0x7008    STRB	R0, [R1, #0]
; hfcState end address is: 0 (R0)
;__samltouch_driver.c, 542 :: 		}
L_end_samltouch_hfcEnable:
0x13E4	0x4770    BX	LR
0x13E6	0xBF00    NOP
0x13E8	0x08B62000  	__samltouch_driver_f_hfc_active+0
; end of _samltouch_hfcEnable
_applicationTask:
;Click_SAML_Touch_STM.c, 67 :: 		void applicationTask()
0x1768	0xB081    SUB	SP, SP, #4
0x176A	0xF8CDE000  STR	LR, [SP, #0]
;Click_SAML_Touch_STM.c, 70 :: 		samltouch_process();
0x176E	0xF7FFFE3D  BL	_samltouch_process+0
;Click_SAML_Touch_STM.c, 72 :: 		if(timerCounter > 100)
0x1772	0x481A    LDR	R0, [PC, #104]
0x1774	0x6800    LDR	R0, [R0, #0]
0x1776	0x2864    CMP	R0, #100
0x1778	0xD913    BLS	L_applicationTask0
;Click_SAML_Touch_STM.c, 74 :: 		if(SAML_Touch.button2 == 1)
0x177A	0x4819    LDR	R0, [PC, #100]
0x177C	0x7800    LDRB	R0, [R0, #0]
0x177E	0x2801    CMP	R0, #1
0x1780	0xD104    BNE	L_applicationTask1
;Click_SAML_Touch_STM.c, 76 :: 		mikrobus_logWrite( "Button 2 is pressed.", _LOG_LINE );
0x1782	0x4818    LDR	R0, [PC, #96]
0x1784	0x2102    MOVS	R1, #2
0x1786	0xF7FFFD7D  BL	_mikrobus_logWrite+0
;Click_SAML_Touch_STM.c, 77 :: 		}
0x178A	0xE007    B	L_applicationTask2
L_applicationTask1:
;Click_SAML_Touch_STM.c, 78 :: 		else if(SAML_Touch.button1 == 1)
0x178C	0x4816    LDR	R0, [PC, #88]
0x178E	0x7800    LDRB	R0, [R0, #0]
0x1790	0x2801    CMP	R0, #1
0x1792	0xD103    BNE	L_applicationTask3
;Click_SAML_Touch_STM.c, 80 :: 		mikrobus_logWrite( "Button 1 is pressed.", _LOG_LINE );
0x1794	0x4815    LDR	R0, [PC, #84]
0x1796	0x2102    MOVS	R1, #2
0x1798	0xF7FFFD74  BL	_mikrobus_logWrite+0
;Click_SAML_Touch_STM.c, 81 :: 		}
L_applicationTask3:
L_applicationTask2:
;Click_SAML_Touch_STM.c, 82 :: 		timerCounter = 0;
0x179C	0x2100    MOVS	R1, #0
0x179E	0x480F    LDR	R0, [PC, #60]
0x17A0	0x6001    STR	R1, [R0, #0]
;Click_SAML_Touch_STM.c, 83 :: 		}
L_applicationTask0:
;Click_SAML_Touch_STM.c, 85 :: 		if(SAML_Touch.sw_state == 1)
0x17A2	0x4813    LDR	R0, [PC, #76]
0x17A4	0x7800    LDRB	R0, [R0, #0]
0x17A6	0x2801    CMP	R0, #1
0x17A8	0xD113    BNE	L_applicationTask4
;Click_SAML_Touch_STM.c, 87 :: 		mikrobus_logWrite( "Slider is active.", _LOG_LINE );
0x17AA	0x4812    LDR	R0, [PC, #72]
0x17AC	0x2102    MOVS	R1, #2
0x17AE	0xF7FFFD69  BL	_mikrobus_logWrite+0
;Click_SAML_Touch_STM.c, 88 :: 		if(SAML_Touch.sw_pos != 0)
0x17B2	0x4811    LDR	R0, [PC, #68]
0x17B4	0x8800    LDRH	R0, [R0, #0]
0x17B6	0xB160    CBZ	R0, L_applicationTask5
;Click_SAML_Touch_STM.c, 90 :: 		mikrobus_logWrite( "Slider position is  ", _LOG_TEXT );
0x17B8	0x4810    LDR	R0, [PC, #64]
0x17BA	0x2101    MOVS	R1, #1
0x17BC	0xF7FFFD62  BL	_mikrobus_logWrite+0
;Click_SAML_Touch_STM.c, 91 :: 		IntToStr(SAML_Touch.sw_pos, demoText);
0x17C0	0x480D    LDR	R0, [PC, #52]
0x17C2	0x8800    LDRH	R0, [R0, #0]
0x17C4	0x490E    LDR	R1, [PC, #56]
0x17C6	0xF7FFFD25  BL	_IntToStr+0
;Click_SAML_Touch_STM.c, 92 :: 		mikrobus_logWrite( demoText, _LOG_LINE );
0x17CA	0x2102    MOVS	R1, #2
0x17CC	0x480C    LDR	R0, [PC, #48]
0x17CE	0xF7FFFD59  BL	_mikrobus_logWrite+0
;Click_SAML_Touch_STM.c, 93 :: 		}
L_applicationTask5:
;Click_SAML_Touch_STM.c, 94 :: 		}
L_applicationTask4:
;Click_SAML_Touch_STM.c, 95 :: 		}
L_end_applicationTask:
0x17D2	0xF8DDE000  LDR	LR, [SP, #0]
0x17D6	0xB001    ADD	SP, SP, #4
0x17D8	0x4770    BX	LR
0x17DA	0xBF00    NOP
0x17DC	0x002C2000  	_timerCounter+0
0x17E0	0x02A12000  	_SAML_Touch+1
0x17E4	0x00302000  	?lstr3_Click_SAML_Touch_STM+0
0x17E8	0x02A02000  	_SAML_Touch+0
0x17EC	0x00452000  	?lstr4_Click_SAML_Touch_STM+0
0x17F0	0x02A22000  	_SAML_Touch+2
0x17F4	0x005A2000  	?lstr5_Click_SAML_Touch_STM+0
0x17F8	0x02A42000  	_SAML_Touch+4
0x17FC	0x006C2000  	?lstr6_Click_SAML_Touch_STM+0
0x1800	0x00812000  	_demoText+0
; end of _applicationTask
_samltouch_process:
;__samltouch_driver.c, 692 :: 		void samltouch_process()
0x13EC	0xB081    SUB	SP, SP, #4
0x13EE	0xF8CDE000  STR	LR, [SP, #0]
;__samltouch_driver.c, 695 :: 		if (0 != _SAMLTOUCH_POLL_ENABLE)
0x13F2	0x2000    MOVS	R0, #0
0x13F4	0x2801    CMP	R0, __SAMLTOUCH_POLL_ENABLE
0x13F6	0xD006    BEQ	L_samltouch_process80
;__samltouch_driver.c, 697 :: 		if (0 != hal_uartReady())
0x13F8	0xF7FFFED8  BL	__samltouch_driver_hal_uartReady+0
0x13FC	0xB118    CBZ	R0, L_samltouch_process81
;__samltouch_driver.c, 699 :: 		char tmp = hal_uartRead();
0x13FE	0xF7FFFDBD  BL	__samltouch_driver_hal_uartRead+0
;__samltouch_driver.c, 700 :: 		samltouch_putc( tmp );
0x1402	0xF7FFFE6F  BL	_samltouch_putc+0
;__samltouch_driver.c, 701 :: 		}
L_samltouch_process81:
;__samltouch_driver.c, 702 :: 		}
L_samltouch_process80:
;__samltouch_driver.c, 705 :: 		if (f_buffer_warning)
0x1406	0x4840    LDR	R0, [PC, #256]
0x1408	0x7800    LDRB	R0, [R0, #0]
0x140A	0x2800    CMP	R0, #0
0x140C	0xD02D    BEQ	L_samltouch_process82
;__samltouch_driver.c, 707 :: 		TIMER_STOP();
0x140E	0x2100    MOVS	R1, #0
0x1410	0x483E    LDR	R0, [PC, #248]
0x1412	0x7001    STRB	R1, [R0, #0]
;__samltouch_driver.c, 708 :: 		WATCHDOG_STOP();
0x1414	0x2100    MOVS	R1, #0
0x1416	0x483E    LDR	R0, [PC, #248]
0x1418	0x7001    STRB	R1, [R0, #0]
;__samltouch_driver.c, 711 :: 		if (_SAMLTOUCH_EVENT_BUFFER_OUT == currentEv.evArg[_SAMLTOUCH_EVARG_EVENT_T])
0x141A	0x483E    LDR	R0, [PC, #248]
0x141C	0x7800    LDRB	R0, [R0, #0]
0x141E	0x2802    CMP	R0, #2
0x1420	0xD105    BNE	L_samltouch_process83
;__samltouch_driver.c, 714 :: 		currentEv.fpHdl(rxBuff.storage, currentEv.evArg);
0x1422	0x493D    LDR	R1, [PC, #244]
0x1424	0x483D    LDR	R0, [PC, #244]
0x1426	0x4C3E    LDR	R4, [PC, #248]
0x1428	0x6824    LDR	R4, [R4, #0]
0x142A	0x47A0    BLX	R4
;__samltouch_driver.c, 715 :: 		}
0x142C	0xE00B    B	L_samltouch_process84
L_samltouch_process83:
;__samltouch_driver.c, 719 :: 		createEvent(rxBuff.storage, &currentEv);
0x142E	0x493C    LDR	R1, [PC, #240]
0x1430	0x483A    LDR	R0, [PC, #232]
0x1432	0xF7FFFDED  BL	__samltouch_driver_createEvent+0
;__samltouch_driver.c, 720 :: 		EXEC_EVENT(_SAMLTOUCH_EVENT_BUFFER_OUT);
0x1436	0x2102    MOVS	R1, #2
0x1438	0x4836    LDR	R0, [PC, #216]
0x143A	0x7001    STRB	R1, [R0, #0]
0x143C	0x4936    LDR	R1, [PC, #216]
0x143E	0x4837    LDR	R0, [PC, #220]
0x1440	0x4C37    LDR	R4, [PC, #220]
0x1442	0x6824    LDR	R4, [R4, #0]
0x1444	0x47A0    BLX	R4
;__samltouch_driver.c, 721 :: 		}
L_samltouch_process84:
;__samltouch_driver.c, 722 :: 		f_buffer_warning = false;
0x1446	0x2100    MOVS	R1, #0
0x1448	0x482F    LDR	R0, [PC, #188]
0x144A	0x7001    STRB	R1, [R0, #0]
;__samltouch_driver.c, 724 :: 		CORE_CLEAN_RX();
0x144C	0x2100    MOVS	R1, #0
0x144E	0x4835    LDR	R0, [PC, #212]
0x1450	0x8001    STRH	R1, [R0, #0]
0x1452	0x2100    MOVS	R1, #0
0x1454	0x4831    LDR	R0, [PC, #196]
0x1456	0x7001    STRB	R1, [R0, #0]
;__samltouch_driver.c, 725 :: 		CORE_UNBLOCK();
0x1458	0x2100    MOVS	R1, #0
0x145A	0x4833    LDR	R0, [PC, #204]
0x145C	0x7001    STRB	R1, [R0, #0]
0x145E	0x2100    MOVS	R1, #0
0x1460	0x4832    LDR	R0, [PC, #200]
0x1462	0x7001    STRB	R1, [R0, #0]
0x1464	0x2100    MOVS	R1, #0
0x1466	0x4832    LDR	R0, [PC, #200]
0x1468	0x7001    STRB	R1, [R0, #0]
;__samltouch_driver.c, 726 :: 		}
L_samltouch_process82:
;__samltouch_driver.c, 729 :: 		if (f_response_ready)
0x146A	0x4830    LDR	R0, [PC, #192]
0x146C	0x7800    LDRB	R0, [R0, #0]
0x146E	0x2800    CMP	R0, #0
0x1470	0xD020    BEQ	L_samltouch_process85
;__samltouch_driver.c, 731 :: 		TIMER_STOP();
0x1472	0x2100    MOVS	R1, #0
0x1474	0x4825    LDR	R0, [PC, #148]
0x1476	0x7001    STRB	R1, [R0, #0]
;__samltouch_driver.c, 732 :: 		WATCHDOG_STOP();
0x1478	0x2100    MOVS	R1, #0
0x147A	0x4825    LDR	R0, [PC, #148]
0x147C	0x7001    STRB	R1, [R0, #0]
;__samltouch_driver.c, 734 :: 		createEvent(rxBuff.storage, &currentEv);
0x147E	0x4928    LDR	R1, [PC, #160]
0x1480	0x4826    LDR	R0, [PC, #152]
0x1482	0xF7FFFDC5  BL	__samltouch_driver_createEvent+0
;__samltouch_driver.c, 735 :: 		EXEC_EVENT(_SAMLTOUCH_EVENT_RESPONSE);
0x1486	0x2100    MOVS	R1, #0
0x1488	0x4822    LDR	R0, [PC, #136]
0x148A	0x7001    STRB	R1, [R0, #0]
0x148C	0x4922    LDR	R1, [PC, #136]
0x148E	0x4823    LDR	R0, [PC, #140]
0x1490	0x4C23    LDR	R4, [PC, #140]
0x1492	0x6824    LDR	R4, [R4, #0]
0x1494	0x47A0    BLX	R4
;__samltouch_driver.c, 737 :: 		CORE_CLEAN_RX();
0x1496	0x2100    MOVS	R1, #0
0x1498	0x4822    LDR	R0, [PC, #136]
0x149A	0x8001    STRH	R1, [R0, #0]
0x149C	0x2100    MOVS	R1, #0
0x149E	0x481F    LDR	R0, [PC, #124]
0x14A0	0x7001    STRB	R1, [R0, #0]
;__samltouch_driver.c, 738 :: 		CORE_UNBLOCK();
0x14A2	0x2100    MOVS	R1, #0
0x14A4	0x4820    LDR	R0, [PC, #128]
0x14A6	0x7001    STRB	R1, [R0, #0]
0x14A8	0x2100    MOVS	R1, #0
0x14AA	0x4820    LDR	R0, [PC, #128]
0x14AC	0x7001    STRB	R1, [R0, #0]
0x14AE	0x2100    MOVS	R1, #0
0x14B0	0x481F    LDR	R0, [PC, #124]
0x14B2	0x7001    STRB	R1, [R0, #0]
;__samltouch_driver.c, 739 :: 		}
L_samltouch_process85:
;__samltouch_driver.c, 742 :: 		if (f_wdog_timeout)
0x14B4	0x481C    LDR	R0, [PC, #112]
0x14B6	0x7800    LDRB	R0, [R0, #0]
0x14B8	0x2800    CMP	R0, #0
0x14BA	0xD020    BEQ	L_samltouch_process86
;__samltouch_driver.c, 744 :: 		TIMER_STOP();
0x14BC	0x2100    MOVS	R1, #0
0x14BE	0x4813    LDR	R0, [PC, #76]
0x14C0	0x7001    STRB	R1, [R0, #0]
;__samltouch_driver.c, 745 :: 		WATCHDOG_STOP();
0x14C2	0x2100    MOVS	R1, #0
0x14C4	0x4812    LDR	R0, [PC, #72]
0x14C6	0x7001    STRB	R1, [R0, #0]
;__samltouch_driver.c, 747 :: 		createEvent(rxBuff.storage, &currentEv);
0x14C8	0x4915    LDR	R1, [PC, #84]
0x14CA	0x4814    LDR	R0, [PC, #80]
0x14CC	0xF7FFFDA0  BL	__samltouch_driver_createEvent+0
;__samltouch_driver.c, 748 :: 		EXEC_EVENT(_SAMLTOUCH_EVENT_TIMEOUT);
0x14D0	0x2101    MOVS	R1, #1
0x14D2	0x4810    LDR	R0, [PC, #64]
0x14D4	0x7001    STRB	R1, [R0, #0]
0x14D6	0x4910    LDR	R1, [PC, #64]
0x14D8	0x4810    LDR	R0, [PC, #64]
0x14DA	0x4C11    LDR	R4, [PC, #68]
0x14DC	0x6824    LDR	R4, [R4, #0]
0x14DE	0x47A0    BLX	R4
;__samltouch_driver.c, 750 :: 		CORE_CLEAN_RX();
0x14E0	0x2100    MOVS	R1, #0
0x14E2	0x4810    LDR	R0, [PC, #64]
0x14E4	0x8001    STRH	R1, [R0, #0]
0x14E6	0x2100    MOVS	R1, #0
0x14E8	0x480C    LDR	R0, [PC, #48]
0x14EA	0x7001    STRB	R1, [R0, #0]
;__samltouch_driver.c, 751 :: 		CORE_UNBLOCK();
0x14EC	0x2100    MOVS	R1, #0
0x14EE	0x480E    LDR	R0, [PC, #56]
0x14F0	0x7001    STRB	R1, [R0, #0]
0x14F2	0x2100    MOVS	R1, #0
0x14F4	0x480D    LDR	R0, [PC, #52]
0x14F6	0x7001    STRB	R1, [R0, #0]
0x14F8	0x2100    MOVS	R1, #0
0x14FA	0x480D    LDR	R0, [PC, #52]
0x14FC	0x7001    STRB	R1, [R0, #0]
;__samltouch_driver.c, 752 :: 		}
L_samltouch_process86:
;__samltouch_driver.c, 753 :: 		}
L_end_samltouch_process:
0x14FE	0xF8DDE000  LDR	LR, [SP, #0]
0x1502	0xB001    ADD	SP, SP, #4
0x1504	0x4770    BX	LR
0x1506	0xBF00    NOP
0x1508	0x02A72000  	__samltouch_driver_f_buffer_warning+0
0x150C	0x08B52000  	__samltouch_driver_f_timer_active+0
0x1510	0x08B42000  	__samltouch_driver_f_watchdog_active+0
0x1514	0x08D22000  	__samltouch_driver_currentEv+10
0x1518	0x08D02000  	__samltouch_driver_currentEv+8
0x151C	0x04C82000  	__samltouch_driver_rxBuff+2
0x1520	0x08C82000  	__samltouch_driver_currentEv+0
0x1524	0x04C62000  	__samltouch_driver_rxBuff+0
0x1528	0x04C52000  	__samltouch_driver_f_wdog_timeout+0
0x152C	0x04C42000  	__samltouch_driver_f_response_ready+0
0x1530	0x02A62000  	__samltouch_driver_f_sequence_active+0
; end of _samltouch_process
_samltouch_default_handler:
;Click_SAML_Touch_STM.c, 38 :: 		void samltouch_default_handler( uint8_t *rsp, uint8_t *evArgs )
; rsp start address is: 0 (R0)
0x11C8	0xB081    SUB	SP, SP, #4
0x11CA	0xF8CDE000  STR	LR, [SP, #0]
; rsp end address is: 0 (R0)
; rsp start address is: 0 (R0)
;Click_SAML_Touch_STM.c, 42 :: 		samltouch_parser(tmp, &SAML_Touch);
0x11CE	0x4903    LDR	R1, [PC, #12]
; rsp end address is: 0 (R0)
0x11D0	0xF7FFFBE4  BL	_samltouch_parser+0
;Click_SAML_Touch_STM.c, 43 :: 		}
L_end_samltouch_default_handler:
0x11D4	0xF8DDE000  LDR	LR, [SP, #0]
0x11D8	0xB001    ADD	SP, SP, #4
0x11DA	0x4770    BX	LR
0x11DC	0x02A02000  	_SAML_Touch+0
; end of _samltouch_default_handler
_samltouch_parser:
;__samltouch_driver.c, 757 :: 		void samltouch_parser(char *dataIn, samltouch_state_T *state)
; state start address is: 4 (R1)
; dataIn start address is: 0 (R0)
0x099C	0xB081    SUB	SP, SP, #4
0x099E	0xF8CDE000  STR	LR, [SP, #0]
0x09A2	0x460E    MOV	R6, R1
; state end address is: 4 (R1)
; dataIn end address is: 0 (R0)
; dataIn start address is: 0 (R0)
; state start address is: 24 (R6)
;__samltouch_driver.c, 771 :: 		pom = _strchr( tmp, start_frame );
0x09A4	0x4A25    LDR	R2, [PC, #148]
0x09A6	0x7812    LDRB	R2, [R2, #0]
0x09A8	0xB211    SXTH	R1, R2
; dataIn end address is: 0 (R0)
0x09AA	0xF7FFFE45  BL	__samltouch_driver__strchr+0
;__samltouch_driver.c, 774 :: 		button_1 = *(pom + 10);
0x09AE	0xF200020A  ADDW	R2, R0, #10
0x09B2	0x7812    LDRB	R2, [R2, #0]
; button_1 start address is: 4 (R1)
0x09B4	0xB2D1    UXTB	R1, R2
;__samltouch_driver.c, 775 :: 		button_2 = *(pom + 20);
0x09B6	0xF2000214  ADDW	R2, R0, #20
0x09BA	0x7815    LDRB	R5, [R2, #0]
;__samltouch_driver.c, 778 :: 		slider_active  = *(pom + 61);
0x09BC	0xF200023D  ADDW	R2, R0, #61
0x09C0	0x7812    LDRB	R2, [R2, #0]
; slider_active start address is: 28 (R7)
0x09C2	0xB2D7    UXTB	R7, R2
;__samltouch_driver.c, 779 :: 		pSWL = *(pom + 66);
0x09C4	0xF2000242  ADDW	R2, R0, #66
0x09C8	0x7814    LDRB	R4, [R2, #0]
;__samltouch_driver.c, 780 :: 		pSWM = *(pom + 67);
0x09CA	0xF2000243  ADDW	R2, R0, #67
0x09CE	0x7812    LDRB	R2, [R2, #0]
;__samltouch_driver.c, 784 :: 		slider_pos = slider_msb;
0x09D0	0x4B1B    LDR	R3, [PC, #108]
0x09D2	0x801A    STRH	R2, [R3, #0]
;__samltouch_driver.c, 785 :: 		slider_pos = slider_pos << 8;
0x09D4	0x461A    MOV	R2, R3
0x09D6	0x8812    LDRH	R2, [R2, #0]
0x09D8	0x0212    LSLS	R2, R2, #8
0x09DA	0xB292    UXTH	R2, R2
0x09DC	0x801A    STRH	R2, [R3, #0]
;__samltouch_driver.c, 786 :: 		slider_pos = slider_pos | slider_lsb;
0x09DE	0x4322    ORRS	R2, R4
0x09E0	0x801A    STRH	R2, [R3, #0]
;__samltouch_driver.c, 789 :: 		if(button_2 == 0x01)
0x09E2	0x2D01    CMP	R5, #1
0x09E4	0xD103    BNE	L_samltouch_parser87
; button_1 end address is: 4 (R1)
;__samltouch_driver.c, 791 :: 		state->button2 = 1;
0x09E6	0x1C73    ADDS	R3, R6, #1
0x09E8	0x2201    MOVS	R2, #1
0x09EA	0x701A    STRB	R2, [R3, #0]
;__samltouch_driver.c, 792 :: 		}
0x09EC	0xE009    B	L_samltouch_parser88
L_samltouch_parser87:
;__samltouch_driver.c, 793 :: 		else if(button_1 == 0x01)
; button_1 start address is: 4 (R1)
0x09EE	0x2901    CMP	R1, #1
0x09F0	0xD102    BNE	L_samltouch_parser89
; button_1 end address is: 4 (R1)
;__samltouch_driver.c, 795 :: 		state->button1 = 1;
0x09F2	0x2201    MOVS	R2, #1
0x09F4	0x7032    STRB	R2, [R6, #0]
;__samltouch_driver.c, 796 :: 		}
0x09F6	0xE004    B	L_samltouch_parser90
L_samltouch_parser89:
;__samltouch_driver.c, 799 :: 		state->button1 = 0;
0x09F8	0x2200    MOVS	R2, #0
0x09FA	0x7032    STRB	R2, [R6, #0]
;__samltouch_driver.c, 800 :: 		state->button2 = 0;
0x09FC	0x1C73    ADDS	R3, R6, #1
0x09FE	0x2200    MOVS	R2, #0
0x0A00	0x701A    STRB	R2, [R3, #0]
;__samltouch_driver.c, 801 :: 		}
L_samltouch_parser90:
L_samltouch_parser88:
;__samltouch_driver.c, 803 :: 		if(slider_active == 0x01)
0x0A02	0x2F01    CMP	R7, #1
0x0A04	0xD103    BNE	L_samltouch_parser91
; slider_active end address is: 28 (R7)
;__samltouch_driver.c, 805 :: 		state->sw_state = 1;
0x0A06	0x1CB3    ADDS	R3, R6, #2
0x0A08	0x2201    MOVS	R2, #1
0x0A0A	0x701A    STRB	R2, [R3, #0]
;__samltouch_driver.c, 806 :: 		}
0x0A0C	0xE002    B	L_samltouch_parser92
L_samltouch_parser91:
;__samltouch_driver.c, 809 :: 		state->sw_state = 0;
0x0A0E	0x1CB3    ADDS	R3, R6, #2
0x0A10	0x2200    MOVS	R2, #0
0x0A12	0x701A    STRB	R2, [R3, #0]
;__samltouch_driver.c, 810 :: 		}
L_samltouch_parser92:
;__samltouch_driver.c, 813 :: 		if((slider_pos != 0) && (slider_pos <= 255))
0x0A14	0x4A0A    LDR	R2, [PC, #40]
0x0A16	0x8812    LDRH	R2, [R2, #0]
0x0A18	0xB14A    CBZ	R2, L__samltouch_parser104
0x0A1A	0x4A09    LDR	R2, [PC, #36]
0x0A1C	0x8812    LDRH	R2, [R2, #0]
0x0A1E	0xF1B20FFF  CMP	R2, #255
0x0A22	0xD804    BHI	L__samltouch_parser103
L__samltouch_parser102:
;__samltouch_driver.c, 815 :: 		state->sw_pos = slider_pos;
0x0A24	0x1D33    ADDS	R3, R6, #4
; state end address is: 24 (R6)
0x0A26	0x4A06    LDR	R2, [PC, #24]
0x0A28	0x8812    LDRH	R2, [R2, #0]
0x0A2A	0x801A    STRH	R2, [R3, #0]
;__samltouch_driver.c, 816 :: 		}
0x0A2C	0xE002    B	L_samltouch_parser96
;__samltouch_driver.c, 813 :: 		if((slider_pos != 0) && (slider_pos <= 255))
L__samltouch_parser104:
; state start address is: 24 (R6)
L__samltouch_parser103:
;__samltouch_driver.c, 819 :: 		state->sw_pos = 0;
0x0A2E	0x1D33    ADDS	R3, R6, #4
; state end address is: 24 (R6)
0x0A30	0x2200    MOVS	R2, #0
0x0A32	0x801A    STRH	R2, [R3, #0]
;__samltouch_driver.c, 820 :: 		}
L_samltouch_parser96:
;__samltouch_driver.c, 821 :: 		}
L_end_samltouch_parser:
0x0A34	0xF8DDE000  LDR	LR, [SP, #0]
0x0A38	0xB001    ADD	SP, SP, #4
0x0A3A	0x4770    BX	LR
0x0A3C	0x029D2000  	__samltouch_driver_start_frame+0
0x0A40	0x029E2000  	__samltouch_driver_slider_pos+0
; end of _samltouch_parser
__samltouch_driver__strchr:
;__samltouch_driver.c, 315 :: 		static char *_strchr(char *s, int c)
; c start address is: 4 (R1)
; s start address is: 0 (R0)
0x0638	0xB081    SUB	SP, SP, #4
; c end address is: 4 (R1)
; s end address is: 0 (R0)
; s start address is: 0 (R0)
; c start address is: 4 (R1)
0x063A	0xF8AD1000  STRH	R1, [SP, #0]
; s end address is: 0 (R0)
; c end address is: 4 (R1)
0x063E	0x4601    MOV	R1, R0
0x0640	0xF9BD0000  LDRSH	R0, [SP, #0]
;__samltouch_driver.c, 317 :: 		while (*s != (char)c)
L___samltouch_driver__strchr17:
; c start address is: 0 (R0)
; s start address is: 4 (R1)
0x0644	0x780B    LDRB	R3, [R1, #0]
0x0646	0xB2C2    UXTB	R2, R0
0x0648	0x4293    CMP	R3, R2
0x064A	0xD007    BEQ	L___samltouch_driver__strchr18
;__samltouch_driver.c, 318 :: 		if (!*s++)
0x064C	0x460B    MOV	R3, R1
0x064E	0x1C49    ADDS	R1, R1, #1
0x0650	0x781A    LDRB	R2, [R3, #0]
0x0652	0x2A00    CMP	R2, #0
0x0654	0xD101    BNE	L___samltouch_driver__strchr19
; c end address is: 0 (R0)
; s end address is: 4 (R1)
;__samltouch_driver.c, 319 :: 		return 0;
0x0656	0x2000    MOVS	R0, #0
0x0658	0xE001    B	L_end__strchr
L___samltouch_driver__strchr19:
; s start address is: 4 (R1)
; c start address is: 0 (R0)
; c end address is: 0 (R0)
0x065A	0xE7F3    B	L___samltouch_driver__strchr17
L___samltouch_driver__strchr18:
;__samltouch_driver.c, 320 :: 		return (char *)s;
0x065C	0x4608    MOV	R0, R1
; s end address is: 4 (R1)
;__samltouch_driver.c, 321 :: 		}
L_end__strchr:
0x065E	0xB001    ADD	SP, SP, #4
0x0660	0x4770    BX	LR
; end of __samltouch_driver__strchr
__samltouch_driver_hal_uartReady:
;__hal_stm32.c, 152 :: 		static uint8_t hal_uartReady()
0x11AC	0xB081    SUB	SP, SP, #4
0x11AE	0xF8CDE000  STR	LR, [SP, #0]
;__hal_stm32.c, 154 :: 		return ( uint8_t )fp_uartReady();
0x11B2	0x4C04    LDR	R4, [PC, #16]
0x11B4	0x6824    LDR	R4, [R4, #0]
0x11B6	0x47A0    BLX	R4
0x11B8	0xB2C0    UXTB	R0, R0
;__hal_stm32.c, 155 :: 		}
L_end_hal_uartReady:
0x11BA	0xF8DDE000  LDR	LR, [SP, #0]
0x11BE	0xB001    ADD	SP, SP, #4
0x11C0	0x4770    BX	LR
0x11C2	0xBF00    NOP
0x11C4	0x08C42000  	__samltouch_driver_fp_uartReady+0
; end of __samltouch_driver_hal_uartReady
_UART1_Read:
;__Lib_UART_123_45.c, 104 :: 		
0x096C	0xB081    SUB	SP, SP, #4
0x096E	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_UART_123_45.c, 105 :: 		
0x0972	0x4803    LDR	R0, [PC, #12]
0x0974	0xF7FFFE88  BL	__Lib_UART_123_45_UARTx_Read+0
;__Lib_UART_123_45.c, 106 :: 		
L_end_UART1_Read:
0x0978	0xF8DDE000  LDR	LR, [SP, #0]
0x097C	0xB001    ADD	SP, SP, #4
0x097E	0x4770    BX	LR
0x0980	0x38004001  	USART1_SR+0
; end of _UART1_Read
__Lib_UART_123_45_UARTx_Read:
;__Lib_UART_123_45.c, 96 :: 		
; UART_Base start address is: 0 (R0)
0x0688	0xB081    SUB	SP, SP, #4
; UART_Base end address is: 0 (R0)
; UART_Base start address is: 0 (R0)
; UART_Base end address is: 0 (R0)
;__Lib_UART_123_45.c, 98 :: 		
L___Lib_UART_123_45_UARTx_Read4:
; UART_Base start address is: 0 (R0)
0x068A	0x6802    LDR	R2, [R0, #0]
0x068C	0xF3C21140  UBFX	R1, R2, #5, #1
0x0690	0xB901    CBNZ	R1, L___Lib_UART_123_45_UARTx_Read5
0x0692	0xE7FA    B	L___Lib_UART_123_45_UARTx_Read4
L___Lib_UART_123_45_UARTx_Read5:
;__Lib_UART_123_45.c, 101 :: 		
0x0694	0x1D01    ADDS	R1, R0, #4
; UART_Base end address is: 0 (R0)
0x0696	0x6809    LDR	R1, [R1, #0]
0x0698	0xB288    UXTH	R0, R1
;__Lib_UART_123_45.c, 102 :: 		
L_end_UARTx_Read:
0x069A	0xB001    ADD	SP, SP, #4
0x069C	0x4770    BX	LR
; end of __Lib_UART_123_45_UARTx_Read
_UART1_Data_Ready:
;__Lib_UART_123_45.c, 131 :: 		
0x0A8C	0xB081    SUB	SP, SP, #4
0x0A8E	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_UART_123_45.c, 132 :: 		
0x0A92	0x4803    LDR	R0, [PC, #12]
0x0A94	0xF7FFFF64  BL	__Lib_UART_123_45_UARTx_Data_Ready+0
;__Lib_UART_123_45.c, 133 :: 		
L_end_UART1_Data_Ready:
0x0A98	0xF8DDE000  LDR	LR, [SP, #0]
0x0A9C	0xB001    ADD	SP, SP, #4
0x0A9E	0x4770    BX	LR
0x0AA0	0x38004001  	USART1_SR+0
; end of _UART1_Data_Ready
__Lib_UART_123_45_UARTx_Data_Ready:
;__Lib_UART_123_45.c, 126 :: 		
; UART_Base start address is: 0 (R0)
0x0960	0xB081    SUB	SP, SP, #4
; UART_Base end address is: 0 (R0)
; UART_Base start address is: 0 (R0)
;__Lib_UART_123_45.c, 128 :: 		
0x0962	0x6801    LDR	R1, [R0, #0]
; UART_Base end address is: 0 (R0)
0x0964	0xF3C11040  UBFX	R0, R1, #5, #1
;__Lib_UART_123_45.c, 129 :: 		
L_end_UARTx_Data_Ready:
0x0968	0xB001    ADD	SP, SP, #4
0x096A	0x4770    BX	LR
; end of __Lib_UART_123_45_UARTx_Data_Ready
_UART1_Tx_Idle:
;__Lib_UART_123_45.c, 212 :: 		
0x0B34	0xB081    SUB	SP, SP, #4
0x0B36	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_UART_123_45.c, 213 :: 		
0x0B3A	0x4803    LDR	R0, [PC, #12]
0x0B3C	0xF7FFFD76  BL	__Lib_UART_123_45_UARTx_Tx_Idle+0
;__Lib_UART_123_45.c, 214 :: 		
L_end_UART1_Tx_Idle:
0x0B40	0xF8DDE000  LDR	LR, [SP, #0]
0x0B44	0xB001    ADD	SP, SP, #4
0x0B46	0x4770    BX	LR
0x0B48	0x38004001  	USART1_SR+0
; end of _UART1_Tx_Idle
__Lib_UART_123_45_UARTx_Tx_Idle:
;__Lib_UART_123_45.c, 208 :: 		
; UART_Base start address is: 0 (R0)
0x062C	0xB081    SUB	SP, SP, #4
; UART_Base end address is: 0 (R0)
; UART_Base start address is: 0 (R0)
;__Lib_UART_123_45.c, 209 :: 		
0x062E	0x6801    LDR	R1, [R0, #0]
; UART_Base end address is: 0 (R0)
0x0630	0xF3C11080  UBFX	R0, R1, #6, #1
;__Lib_UART_123_45.c, 210 :: 		
L_end_UARTx_Tx_Idle:
0x0634	0xB001    ADD	SP, SP, #4
0x0636	0x4770    BX	LR
; end of __Lib_UART_123_45_UARTx_Tx_Idle
_UART2_Read:
;__Lib_UART_123_45.c, 108 :: 		
0x0B1C	0xB081    SUB	SP, SP, #4
0x0B1E	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_UART_123_45.c, 109 :: 		
0x0B22	0x4803    LDR	R0, [PC, #12]
0x0B24	0xF7FFFDB0  BL	__Lib_UART_123_45_UARTx_Read+0
;__Lib_UART_123_45.c, 110 :: 		
L_end_UART2_Read:
0x0B28	0xF8DDE000  LDR	LR, [SP, #0]
0x0B2C	0xB001    ADD	SP, SP, #4
0x0B2E	0x4770    BX	LR
0x0B30	0x44004000  	USART2_SR+0
; end of _UART2_Read
_UART2_Data_Ready:
;__Lib_UART_123_45.c, 135 :: 		
0x0B64	0xB081    SUB	SP, SP, #4
0x0B66	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_UART_123_45.c, 136 :: 		
0x0B6A	0x4803    LDR	R0, [PC, #12]
0x0B6C	0xF7FFFEF8  BL	__Lib_UART_123_45_UARTx_Data_Ready+0
;__Lib_UART_123_45.c, 137 :: 		
L_end_UART2_Data_Ready:
0x0B70	0xF8DDE000  LDR	LR, [SP, #0]
0x0B74	0xB001    ADD	SP, SP, #4
0x0B76	0x4770    BX	LR
0x0B78	0x44004000  	USART2_SR+0
; end of _UART2_Data_Ready
_UART2_Tx_Idle:
;__Lib_UART_123_45.c, 216 :: 		
0x0B4C	0xB081    SUB	SP, SP, #4
0x0B4E	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_UART_123_45.c, 217 :: 		
0x0B52	0x4803    LDR	R0, [PC, #12]
0x0B54	0xF7FFFD6A  BL	__Lib_UART_123_45_UARTx_Tx_Idle+0
;__Lib_UART_123_45.c, 218 :: 		
L_end_UART2_Tx_Idle:
0x0B58	0xF8DDE000  LDR	LR, [SP, #0]
0x0B5C	0xB001    ADD	SP, SP, #4
0x0B5E	0x4770    BX	LR
0x0B60	0x44004000  	USART2_SR+0
; end of _UART2_Tx_Idle
_UART3_Read:
;__Lib_UART_123_45.c, 112 :: 		
0x0B04	0xB081    SUB	SP, SP, #4
0x0B06	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_UART_123_45.c, 113 :: 		
0x0B0A	0x4803    LDR	R0, [PC, #12]
0x0B0C	0xF7FFFDBC  BL	__Lib_UART_123_45_UARTx_Read+0
;__Lib_UART_123_45.c, 114 :: 		
L_end_UART3_Read:
0x0B10	0xF8DDE000  LDR	LR, [SP, #0]
0x0B14	0xB001    ADD	SP, SP, #4
0x0B16	0x4770    BX	LR
0x0B18	0x48004000  	USART3_SR+0
; end of _UART3_Read
_UART3_Data_Ready:
;__Lib_UART_123_45.c, 139 :: 		
0x0ABC	0xB081    SUB	SP, SP, #4
0x0ABE	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_UART_123_45.c, 140 :: 		
0x0AC2	0x4803    LDR	R0, [PC, #12]
0x0AC4	0xF7FFFF4C  BL	__Lib_UART_123_45_UARTx_Data_Ready+0
;__Lib_UART_123_45.c, 141 :: 		
L_end_UART3_Data_Ready:
0x0AC8	0xF8DDE000  LDR	LR, [SP, #0]
0x0ACC	0xB001    ADD	SP, SP, #4
0x0ACE	0x4770    BX	LR
0x0AD0	0x48004000  	USART3_SR+0
; end of _UART3_Data_Ready
_UART3_Tx_Idle:
;__Lib_UART_123_45.c, 220 :: 		
0x0AA4	0xB081    SUB	SP, SP, #4
0x0AA6	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_UART_123_45.c, 221 :: 		
0x0AAA	0x4803    LDR	R0, [PC, #12]
0x0AAC	0xF7FFFDBE  BL	__Lib_UART_123_45_UARTx_Tx_Idle+0
;__Lib_UART_123_45.c, 222 :: 		
L_end_UART3_Tx_Idle:
0x0AB0	0xF8DDE000  LDR	LR, [SP, #0]
0x0AB4	0xB001    ADD	SP, SP, #4
0x0AB6	0x4770    BX	LR
0x0AB8	0x48004000  	USART3_SR+0
; end of _UART3_Tx_Idle
_UART4_Read:
;__Lib_UART_123_45.c, 116 :: 		
0x0AEC	0xB081    SUB	SP, SP, #4
0x0AEE	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_UART_123_45.c, 117 :: 		
0x0AF2	0x4803    LDR	R0, [PC, #12]
0x0AF4	0xF7FFFDC8  BL	__Lib_UART_123_45_UARTx_Read+0
;__Lib_UART_123_45.c, 118 :: 		
L_end_UART4_Read:
0x0AF8	0xF8DDE000  LDR	LR, [SP, #0]
0x0AFC	0xB001    ADD	SP, SP, #4
0x0AFE	0x4770    BX	LR
0x0B00	0x4C004000  	UART4_SR+0
; end of _UART4_Read
_UART4_Data_Ready:
;__Lib_UART_123_45.c, 143 :: 		
0x0AD4	0xB081    SUB	SP, SP, #4
0x0AD6	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_UART_123_45.c, 144 :: 		
0x0ADA	0x4803    LDR	R0, [PC, #12]
0x0ADC	0xF7FFFF40  BL	__Lib_UART_123_45_UARTx_Data_Ready+0
;__Lib_UART_123_45.c, 145 :: 		
L_end_UART4_Data_Ready:
0x0AE0	0xF8DDE000  LDR	LR, [SP, #0]
0x0AE4	0xB001    ADD	SP, SP, #4
0x0AE6	0x4770    BX	LR
0x0AE8	0x4C004000  	UART4_SR+0
; end of _UART4_Data_Ready
_UART4_Tx_Idle:
;__Lib_UART_123_45.c, 224 :: 		
0x0984	0xB081    SUB	SP, SP, #4
0x0986	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_UART_123_45.c, 225 :: 		
0x098A	0x4803    LDR	R0, [PC, #12]
0x098C	0xF7FFFE4E  BL	__Lib_UART_123_45_UARTx_Tx_Idle+0
;__Lib_UART_123_45.c, 226 :: 		
L_end_UART4_Tx_Idle:
0x0990	0xF8DDE000  LDR	LR, [SP, #0]
0x0994	0xB001    ADD	SP, SP, #4
0x0996	0x4770    BX	LR
0x0998	0x4C004000  	UART4_SR+0
; end of _UART4_Tx_Idle
_UART5_Read:
;__Lib_UART_123_45.c, 120 :: 		
0x0A44	0xB081    SUB	SP, SP, #4
0x0A46	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_UART_123_45.c, 121 :: 		
0x0A4A	0x4803    LDR	R0, [PC, #12]
0x0A4C	0xF7FFFE1C  BL	__Lib_UART_123_45_UARTx_Read+0
;__Lib_UART_123_45.c, 122 :: 		
L_end_UART5_Read:
0x0A50	0xF8DDE000  LDR	LR, [SP, #0]
0x0A54	0xB001    ADD	SP, SP, #4
0x0A56	0x4770    BX	LR
0x0A58	0x50004000  	UART5_SR+0
; end of _UART5_Read
_UART5_Data_Ready:
;__Lib_UART_123_45.c, 147 :: 		
0x0A74	0xB081    SUB	SP, SP, #4
0x0A76	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_UART_123_45.c, 148 :: 		
0x0A7A	0x4803    LDR	R0, [PC, #12]
0x0A7C	0xF7FFFF70  BL	__Lib_UART_123_45_UARTx_Data_Ready+0
;__Lib_UART_123_45.c, 149 :: 		
L_end_UART5_Data_Ready:
0x0A80	0xF8DDE000  LDR	LR, [SP, #0]
0x0A84	0xB001    ADD	SP, SP, #4
0x0A86	0x4770    BX	LR
0x0A88	0x50004000  	UART5_SR+0
; end of _UART5_Data_Ready
_UART5_Tx_Idle:
;__Lib_UART_123_45.c, 228 :: 		
0x0A5C	0xB081    SUB	SP, SP, #4
0x0A5E	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_UART_123_45.c, 229 :: 		
0x0A62	0x4803    LDR	R0, [PC, #12]
0x0A64	0xF7FFFDE2  BL	__Lib_UART_123_45_UARTx_Tx_Idle+0
;__Lib_UART_123_45.c, 230 :: 		
L_end_UART5_Tx_Idle:
0x0A68	0xF8DDE000  LDR	LR, [SP, #0]
0x0A6C	0xB001    ADD	SP, SP, #4
0x0A6E	0x4770    BX	LR
0x0A70	0x50004000  	UART5_SR+0
; end of _UART5_Tx_Idle
__samltouch_driver_hal_uartRead:
;__hal_stm32.c, 147 :: 		static uint8_t hal_uartRead()
0x0F7C	0xB081    SUB	SP, SP, #4
0x0F7E	0xF8CDE000  STR	LR, [SP, #0]
;__hal_stm32.c, 149 :: 		return ( uint8_t )fp_uartRead();
0x0F82	0x4C04    LDR	R4, [PC, #16]
0x0F84	0x6824    LDR	R4, [R4, #0]
0x0F86	0x47A0    BLX	R4
0x0F88	0xB2C0    UXTB	R0, R0
;__hal_stm32.c, 150 :: 		}
L_end_hal_uartRead:
0x0F8A	0xF8DDE000  LDR	LR, [SP, #0]
0x0F8E	0xB001    ADD	SP, SP, #4
0x0F90	0x4770    BX	LR
0x0F92	0xBF00    NOP
0x0F94	0x08C02000  	__samltouch_driver_fp_uartRead+0
; end of __samltouch_driver_hal_uartRead
_samltouch_putc:
;__samltouch_driver.c, 544 :: 		void samltouch_putc( uint8_t rxInput )
; rxInput start address is: 0 (R0)
; rxInput end address is: 0 (R0)
; rxInput start address is: 0 (R0)
;__samltouch_driver.c, 546 :: 		CORE_BLOCK();
0x10E4	0x2200    MOVS	R2, #0
0x10E6	0x4916    LDR	R1, [PC, #88]
0x10E8	0x700A    STRB	R2, [R1, #0]
0x10EA	0x2200    MOVS	R2, #0
0x10EC	0x4915    LDR	R1, [PC, #84]
0x10EE	0x700A    STRB	R2, [R1, #0]
0x10F0	0x2201    MOVS	R2, #1
0x10F2	0x4915    LDR	R1, [PC, #84]
0x10F4	0x700A    STRB	R2, [R1, #0]
;__samltouch_driver.c, 547 :: 		TIMER_START();
0x10F6	0x2200    MOVS	R2, #0
0x10F8	0x4914    LDR	R1, [PC, #80]
0x10FA	0x600A    STR	R2, [R1, #0]
0x10FC	0x2201    MOVS	R2, #1
0x10FE	0x4914    LDR	R1, [PC, #80]
0x1100	0x700A    STRB	R2, [R1, #0]
;__samltouch_driver.c, 548 :: 		rxBuff.storage[rxBuff.idx++] = rxInput;
0x1102	0x4914    LDR	R1, [PC, #80]
0x1104	0x880A    LDRH	R2, [R1, #0]
0x1106	0x4914    LDR	R1, [PC, #80]
0x1108	0x1889    ADDS	R1, R1, R2
0x110A	0x7008    STRB	R0, [R1, #0]
; rxInput end address is: 0 (R0)
0x110C	0x4911    LDR	R1, [PC, #68]
0x110E	0x8809    LDRH	R1, [R1, #0]
0x1110	0x1C4A    ADDS	R2, R1, #1
0x1112	0x4910    LDR	R1, [PC, #64]
0x1114	0x800A    STRH	R2, [R1, #0]
;__samltouch_driver.c, 550 :: 		if (_SAMLTOUCH_BUF_WARNING <= rxBuff.idx)
0x1116	0x490F    LDR	R1, [PC, #60]
0x1118	0x880A    LDRH	R2, [R1, #0]
0x111A	0x4910    LDR	R1, [PC, #64]
0x111C	0x428A    CMP	R2, R1
0x111E	0xD302    BCC	L_samltouch_putc46
;__samltouch_driver.c, 552 :: 		f_buffer_warning = true;
0x1120	0x2201    MOVS	R2, #1
0x1122	0x490F    LDR	R1, [PC, #60]
0x1124	0x700A    STRB	R2, [R1, #0]
;__samltouch_driver.c, 553 :: 		}
L_samltouch_putc46:
;__samltouch_driver.c, 555 :: 		if((_SAMLTOUCH_BUF_SIZE - 1) == rxBuff.idx)
0x1126	0x490B    LDR	R1, [PC, #44]
0x1128	0x880A    LDRH	R2, [R1, #0]
0x112A	0xF24031E7  MOVW	R1, #999
0x112E	0x428A    CMP	R2, R1
0x1130	0xD104    BNE	L_samltouch_putc47
;__samltouch_driver.c, 557 :: 		rxBuff.idx--;
0x1132	0x4908    LDR	R1, [PC, #32]
0x1134	0x8809    LDRH	R1, [R1, #0]
0x1136	0x1E4A    SUBS	R2, R1, #1
0x1138	0x4906    LDR	R1, [PC, #24]
0x113A	0x800A    STRH	R2, [R1, #0]
;__samltouch_driver.c, 558 :: 		}
L_samltouch_putc47:
;__samltouch_driver.c, 559 :: 		}
L_end_samltouch_putc:
0x113C	0x4770    BX	LR
0x113E	0xBF00    NOP
0x1140	0x04C52000  	__samltouch_driver_f_wdog_timeout+0
0x1144	0x04C42000  	__samltouch_driver_f_response_ready+0
0x1148	0x02A62000  	__samltouch_driver_f_sequence_active+0
0x114C	0x08B82000  	__samltouch_driver_c_timer+0
0x1150	0x08B52000  	__samltouch_driver_f_timer_active+0
0x1154	0x04C62000  	__samltouch_driver_rxBuff+0
0x1158	0x04C82000  	__samltouch_driver_rxBuff+2
0x115C	0x00FA0000  	__SAMLTOUCH_BUF_WARNING
0x1160	0x02A72000  	__samltouch_driver_f_buffer_warning+0
; end of _samltouch_putc
__samltouch_driver_createEvent:
;__samltouch_driver.c, 474 :: 		static void createEvent( char *pInput, T_CORE_event *pEvent )
0x1010	0xB089    SUB	SP, SP, #36
0x1012	0xF8CDE000  STR	LR, [SP, #0]
0x1016	0x9006    STR	R0, [SP, #24]
0x1018	0x9107    STR	R1, [SP, #28]
;__samltouch_driver.c, 476 :: 		uint8_t hIdx     = 0;
;__samltouch_driver.c, 477 :: 		uint8_t startIdx = 0;
;__samltouch_driver.c, 478 :: 		uint8_t startOff = 0;
;__samltouch_driver.c, 479 :: 		uint8_t endIdx   = 0;
;__samltouch_driver.c, 480 :: 		uint8_t endOff   = 0;
;__samltouch_driver.c, 482 :: 		char tmp[_SAMLTOUCH_CMD_MAXSIZE + 1] = { 0 };
0x101A	0xF10D0B04  ADD	R11, SP, #4
0x101E	0xF10B0A11  ADD	R10, R11, #17
0x1022	0xF8DFC0B0  LDR	R12, [PC, #176]
0x1026	0xF000FAF3  BL	___CC2DW+0
;__samltouch_driver.c, 485 :: 		startIdx = searchLut(pInput, LUT_START_MARK, LUT_START_MARK_SIZE, SEARCH_IDX);
0x102A	0x2300    MOVS	R3, #0
0x102C	0x2207    MOVS	R2, #7
0x102E	0x492A    LDR	R1, [PC, #168]
0x1030	0x9806    LDR	R0, [SP, #24]
0x1032	0xF7FFFE29  BL	__samltouch_driver_searchLut+0
0x1036	0xF88D0020  STRB	R0, [SP, #32]
;__samltouch_driver.c, 486 :: 		startOff = searchLut(pInput, LUT_START_MARK, LUT_START_MARK_SIZE, SEARCH_OFFSET);
0x103A	0x2301    MOVS	R3, #1
0x103C	0x2207    MOVS	R2, #7
0x103E	0x4926    LDR	R1, [PC, #152]
0x1040	0x9806    LDR	R0, [SP, #24]
0x1042	0xF7FFFE21  BL	__samltouch_driver_searchLut+0
0x1046	0xF88D0021  STRB	R0, [SP, #33]
;__samltouch_driver.c, 487 :: 		endIdx = searchLut(pInput, LUT_END_MARK, LUT_END_MARK_SIZE, SEARCH_IDX);
0x104A	0x2300    MOVS	R3, #0
0x104C	0x2206    MOVS	R2, #6
0x104E	0x4923    LDR	R1, [PC, #140]
0x1050	0x9806    LDR	R0, [SP, #24]
0x1052	0xF7FFFE19  BL	__samltouch_driver_searchLut+0
0x1056	0xF88D0022  STRB	R0, [SP, #34]
;__samltouch_driver.c, 488 :: 		endOff = searchLut(pInput, LUT_END_MARK, LUT_END_MARK_SIZE, SEARCH_OFFSET);
0x105A	0x2301    MOVS	R3, #1
0x105C	0x2206    MOVS	R2, #6
0x105E	0x491F    LDR	R1, [PC, #124]
0x1060	0x9806    LDR	R0, [SP, #24]
0x1062	0xF7FFFE11  BL	__samltouch_driver_searchLut+0
; endOff start address is: 4 (R1)
0x1066	0xB2C1    UXTB	R1, R0
;__samltouch_driver.c, 490 :: 		if (0 == endOff)
0x1068	0xB908    CBNZ	R0, L___samltouch_driver_createEvent101
; endOff end address is: 4 (R1)
;__samltouch_driver.c, 492 :: 		endOff = _SAMLTOUCH_CMD_MAXSIZE;
; endOff start address is: 0 (R0)
0x106A	0x2010    MOVS	R0, #16
; endOff end address is: 0 (R0)
;__samltouch_driver.c, 493 :: 		}
0x106C	0xE000    B	L___samltouch_driver_createEvent45
L___samltouch_driver_createEvent101:
;__samltouch_driver.c, 490 :: 		if (0 == endOff)
0x106E	0xB2C8    UXTB	R0, R1
;__samltouch_driver.c, 493 :: 		}
L___samltouch_driver_createEvent45:
;__samltouch_driver.c, 496 :: 		_strncpy(tmp, pInput + startOff, endOff - startOff);
; endOff start address is: 0 (R0)
0x1070	0xF89D2021  LDRB	R2, [SP, #33]
0x1074	0x1A84    SUB	R4, R0, R2
; endOff end address is: 0 (R0)
0x1076	0xF89D3021  LDRB	R3, [SP, #33]
0x107A	0x9A06    LDR	R2, [SP, #24]
0x107C	0x18D3    ADDS	R3, R2, R3
0x107E	0xAA01    ADD	R2, SP, #4
0x1080	0x4619    MOV	R1, R3
0x1082	0x4610    MOV	R0, R2
0x1084	0xB2A2    UXTH	R2, R4
0x1086	0xF7FFFE5F  BL	__samltouch_driver__strncpy+0
;__samltouch_driver.c, 497 :: 		hIdx                         = locateHandler(tmp);
0x108A	0xAA01    ADD	R2, SP, #4
0x108C	0x4610    MOV	R0, R2
0x108E	0xF7FFFDCF  BL	__samltouch_driver_locateHandler+0
; hIdx start address is: 4 (R1)
0x1092	0xB2C1    UXTB	R1, R0
;__samltouch_driver.c, 498 :: 		pEvent->fpHdl                = hdlBuff.storage[hIdx].handler;
0x1094	0xB2C2    UXTB	R2, R0
0x1096	0x0113    LSLS	R3, R2, #4
0x1098	0x4A11    LDR	R2, [PC, #68]
0x109A	0x18D2    ADDS	R2, R2, R3
0x109C	0x320C    ADDS	R2, #12
0x109E	0x6813    LDR	R3, [R2, #0]
0x10A0	0x9A07    LDR	R2, [SP, #28]
0x10A2	0x6013    STR	R3, [R2, #0]
;__samltouch_driver.c, 499 :: 		pEvent->wDogLimit            = hdlBuff.storage[hIdx].timeout;
0x10A4	0x9A07    LDR	R2, [SP, #28]
0x10A6	0x1D14    ADDS	R4, R2, #4
0x10A8	0x010B    LSLS	R3, R1, #4
; hIdx end address is: 4 (R1)
0x10AA	0x4A0D    LDR	R2, [PC, #52]
0x10AC	0x18D2    ADDS	R2, R2, R3
0x10AE	0x3208    ADDS	R2, #8
0x10B0	0x6812    LDR	R2, [R2, #0]
0x10B2	0x6022    STR	R2, [R4, #0]
;__samltouch_driver.c, 500 :: 		pEvent->evArg[_SAMLTOUCH_EVARG_START_T]  = startIdx;
0x10B4	0x9A07    LDR	R2, [SP, #28]
0x10B6	0xF2020308  ADDW	R3, R2, #8
0x10BA	0xF89D2020  LDRB	R2, [SP, #32]
0x10BE	0x701A    STRB	R2, [R3, #0]
;__samltouch_driver.c, 501 :: 		pEvent->evArg[_SAMLTOUCH_EVARG_END_T]    = endIdx;
0x10C0	0x9A07    LDR	R2, [SP, #28]
0x10C2	0x3208    ADDS	R2, #8
0x10C4	0x1C53    ADDS	R3, R2, #1
0x10C6	0xF89D2022  LDRB	R2, [SP, #34]
0x10CA	0x701A    STRB	R2, [R3, #0]
;__samltouch_driver.c, 502 :: 		}
L_end_createEvent:
0x10CC	0xF8DDE000  LDR	LR, [SP, #0]
0x10D0	0xB009    ADD	SP, SP, #36
0x10D2	0x4770    BX	LR
0x10D4	0x1E740000  	?ICS__samltouch_driver_createEvent_tmp_L0+0
0x10D8	0x02752000  	__samltouch_driver_LUT_START_MARK+0
0x10DC	0x028A2000  	__samltouch_driver_LUT_END_MARK+0
0x10E0	0x02C42000  	__samltouch_driver_hdlBuff+4
; end of __samltouch_driver_createEvent
__samltouch_driver_searchLut:
;__samltouch_driver.c, 440 :: 		static uint8_t searchLut( char* pInput, char (*pLut)[ LUTS_WIDTH ], uint8_t lutSize, uint8_t flag )
; pInput start address is: 0 (R0)
0x0C88	0xB085    SUB	SP, SP, #20
0x0C8A	0xF8CDE000  STR	LR, [SP, #0]
0x0C8E	0x4682    MOV	R10, R0
0x0C90	0x9102    STR	R1, [SP, #8]
0x0C92	0xF88D200C  STRB	R2, [SP, #12]
0x0C96	0xF88D3010  STRB	R3, [SP, #16]
; pInput end address is: 0 (R0)
; pInput start address is: 40 (R10)
;__samltouch_driver.c, 442 :: 		uint8_t     inLen    = 0;
;__samltouch_driver.c, 443 :: 		uint8_t     inOff    = 0;
;__samltouch_driver.c, 444 :: 		uint8_t     lutLen   = 0;
;__samltouch_driver.c, 445 :: 		uint8_t     lutIdx   = 0;
;__samltouch_driver.c, 447 :: 		if (_SAMLTOUCH_CMD_MAXSIZE < (inLen = _strlen(pInput)))
0x0C9A	0x4650    MOV	R0, R10
0x0C9C	0xF7FFFCE2  BL	__samltouch_driver__strlen+0
0x0CA0	0xF88D0011  STRB	R0, [SP, #17]
0x0CA4	0xB2C4    UXTB	R4, R0
0x0CA6	0x2C10    CMP	R4, #16
0x0CA8	0xD902    BLS	L___samltouch_driver_searchLut34
;__samltouch_driver.c, 449 :: 		inLen = _SAMLTOUCH_CMD_MAXSIZE;
0x0CAA	0x2410    MOVS	R4, #16
0x0CAC	0xF88D4011  STRB	R4, [SP, #17]
;__samltouch_driver.c, 450 :: 		}
L___samltouch_driver_searchLut34:
;__samltouch_driver.c, 452 :: 		for (lutIdx = 1; lutIdx < lutSize; lutIdx++)
; lutIdx start address is: 28 (R7)
0x0CB0	0x2701    MOVS	R7, #1
; lutIdx end address is: 28 (R7)
; pInput end address is: 40 (R10)
0x0CB2	0x4651    MOV	R1, R10
L___samltouch_driver_searchLut35:
; lutIdx start address is: 28 (R7)
; pInput start address is: 4 (R1)
0x0CB4	0xF89D400C  LDRB	R4, [SP, #12]
0x0CB8	0x42A7    CMP	R7, R4
0x0CBA	0xD23F    BCS	L___samltouch_driver_searchLut36
;__samltouch_driver.c, 454 :: 		lutLen = _strlen(pLut[lutIdx]);
0x0CBC	0x2403    MOVS	R4, #3
0x0CBE	0xFB04F507  MUL	R5, R4, R7
0x0CC2	0x9C02    LDR	R4, [SP, #8]
0x0CC4	0x1964    ADDS	R4, R4, R5
0x0CC6	0x9101    STR	R1, [SP, #4]
0x0CC8	0x4620    MOV	R0, R4
0x0CCA	0xF7FFFCCB  BL	__samltouch_driver__strlen+0
0x0CCE	0x9901    LDR	R1, [SP, #4]
; lutLen start address is: 8 (R2)
0x0CD0	0xB2C2    UXTB	R2, R0
;__samltouch_driver.c, 456 :: 		for (inOff = 0; inOff < inLen; inOff++)
; inOff start address is: 48 (R12)
0x0CD2	0xF2400C00  MOVW	R12, #0
; lutIdx end address is: 28 (R7)
; pInput end address is: 4 (R1)
; lutLen end address is: 8 (R2)
; inOff end address is: 48 (R12)
0x0CD6	0x468A    MOV	R10, R1
0x0CD8	0xB2F9    UXTB	R1, R7
0x0CDA	0xFA5FFB8C  UXTB	R11, R12
0x0CDE	0xFA5FFC82  UXTB	R12, R2
L___samltouch_driver_searchLut38:
; lutLen start address is: 48 (R12)
; inOff start address is: 44 (R11)
; lutLen start address is: 48 (R12)
; lutLen end address is: 48 (R12)
; pInput start address is: 40 (R10)
; lutIdx start address is: 4 (R1)
0x0CE2	0xF89D4011  LDRB	R4, [SP, #17]
0x0CE6	0x45A3    CMP	R11, R4
0x0CE8	0xD223    BCS	L___samltouch_driver_searchLut39
; lutLen end address is: 48 (R12)
;__samltouch_driver.c, 458 :: 		if (!_strncmp(pLut[lutIdx], pInput + inOff, lutLen))
; lutLen start address is: 48 (R12)
0x0CEA	0xEB0A060B  ADD	R6, R10, R11, LSL #0
0x0CEE	0x2403    MOVS	R4, #3
0x0CF0	0xFB04F501  MUL	R5, R4, R1
0x0CF4	0x9C02    LDR	R4, [SP, #8]
0x0CF6	0x1964    ADDS	R4, R4, R5
0x0CF8	0xF88D1004  STRB	R1, [SP, #4]
0x0CFC	0xFA5FF28C  UXTB	R2, R12
0x0D00	0x4631    MOV	R1, R6
0x0D02	0x4620    MOV	R0, R4
0x0D04	0xF7FFFCDC  BL	__samltouch_driver__strncmp+0
0x0D08	0xF89D1004  LDRB	R1, [SP, #4]
0x0D0C	0xB958    CBNZ	R0, L___samltouch_driver_searchLut41
;__samltouch_driver.c, 460 :: 		if (SEARCH_IDX == flag)
0x0D0E	0xF89D4010  LDRB	R4, [SP, #16]
0x0D12	0xB90C    CBNZ	R4, L___samltouch_driver_searchLut42
; inOff end address is: 44 (R11)
; lutLen end address is: 48 (R12)
; pInput end address is: 40 (R10)
;__samltouch_driver.c, 462 :: 		return lutIdx;
0x0D14	0xB2C8    UXTB	R0, R1
; lutIdx end address is: 4 (R1)
0x0D16	0xE012    B	L_end_searchLut
;__samltouch_driver.c, 463 :: 		}
L___samltouch_driver_searchLut42:
;__samltouch_driver.c, 464 :: 		else if (SEARCH_OFFSET == flag)
; lutIdx start address is: 4 (R1)
; pInput start address is: 40 (R10)
; lutLen start address is: 48 (R12)
; inOff start address is: 44 (R11)
0x0D18	0xF89D4010  LDRB	R4, [SP, #16]
0x0D1C	0x2C01    CMP	R4, #1
0x0D1E	0xD102    BNE	L___samltouch_driver_searchLut44
; lutLen end address is: 48 (R12)
; pInput end address is: 40 (R10)
; lutIdx end address is: 4 (R1)
;__samltouch_driver.c, 466 :: 		return inOff;
0x0D20	0xFA5FF08B  UXTB	R0, R11
; inOff end address is: 44 (R11)
0x0D24	0xE00B    B	L_end_searchLut
;__samltouch_driver.c, 467 :: 		}
L___samltouch_driver_searchLut44:
;__samltouch_driver.c, 468 :: 		}
; lutIdx start address is: 4 (R1)
; pInput start address is: 40 (R10)
; lutLen start address is: 48 (R12)
; inOff start address is: 44 (R11)
L___samltouch_driver_searchLut41:
;__samltouch_driver.c, 456 :: 		for (inOff = 0; inOff < inLen; inOff++)
0x0D26	0xF10B0401  ADD	R4, R11, #1
; inOff end address is: 44 (R11)
; inOff start address is: 0 (R0)
0x0D2A	0xB2E0    UXTB	R0, R4
;__samltouch_driver.c, 469 :: 		}
; lutLen end address is: 48 (R12)
; inOff end address is: 0 (R0)
0x0D2C	0xFA5FFB80  UXTB	R11, R0
0x0D30	0xE7D7    B	L___samltouch_driver_searchLut38
L___samltouch_driver_searchLut39:
;__samltouch_driver.c, 452 :: 		for (lutIdx = 1; lutIdx < lutSize; lutIdx++)
0x0D32	0x1C4C    ADDS	R4, R1, #1
; lutIdx end address is: 4 (R1)
; lutIdx start address is: 20 (R5)
0x0D34	0xB2E5    UXTB	R5, R4
;__samltouch_driver.c, 470 :: 		}
0x0D36	0x4651    MOV	R1, R10
; pInput end address is: 40 (R10)
; lutIdx end address is: 20 (R5)
0x0D38	0xB2EF    UXTB	R7, R5
0x0D3A	0xE7BB    B	L___samltouch_driver_searchLut35
L___samltouch_driver_searchLut36:
;__samltouch_driver.c, 471 :: 		return 0;
0x0D3C	0x2000    MOVS	R0, #0
;__samltouch_driver.c, 472 :: 		}
L_end_searchLut:
0x0D3E	0xF8DDE000  LDR	LR, [SP, #0]
0x0D42	0xB005    ADD	SP, SP, #20
0x0D44	0x4770    BX	LR
; end of __samltouch_driver_searchLut
__samltouch_driver__strlen:
;__samltouch_driver.c, 301 :: 		static uint16_t _strlen(uint8_t *s)
; s start address is: 0 (R0)
0x0664	0x4601    MOV	R1, R0
; s end address is: 0 (R0)
; s start address is: 4 (R1)
;__samltouch_driver.c, 303 :: 		uint16_t i = 0;
; i start address is: 12 (R3)
0x0666	0xF2400300  MOVW	R3, #0
;__samltouch_driver.c, 304 :: 		uint16_t c = 0;
; c start address is: 0 (R0)
0x066A	0xF2400000  MOVW	R0, #0
; s end address is: 4 (R1)
; c end address is: 0 (R0)
; i end address is: 12 (R3)
0x066E	0xB282    UXTH	R2, R0
0x0670	0x4608    MOV	R0, R1
;__samltouch_driver.c, 306 :: 		while (0 != s[i])
L___samltouch_driver__strlen15:
; c start address is: 8 (R2)
; i start address is: 12 (R3)
; s start address is: 0 (R0)
0x0672	0x18C1    ADDS	R1, R0, R3
0x0674	0x7809    LDRB	R1, [R1, #0]
0x0676	0xB121    CBZ	R1, L___samltouch_driver__strlen16
;__samltouch_driver.c, 308 :: 		i++;
0x0678	0x1C5B    ADDS	R3, R3, #1
0x067A	0xB29B    UXTH	R3, R3
;__samltouch_driver.c, 309 :: 		c++;
0x067C	0x1C52    ADDS	R2, R2, #1
0x067E	0xB292    UXTH	R2, R2
;__samltouch_driver.c, 310 :: 		}
; s end address is: 0 (R0)
; i end address is: 12 (R3)
0x0680	0xE7F7    B	L___samltouch_driver__strlen15
L___samltouch_driver__strlen16:
;__samltouch_driver.c, 312 :: 		return c;
0x0682	0xB290    UXTH	R0, R2
; c end address is: 8 (R2)
;__samltouch_driver.c, 313 :: 		}
L_end__strlen:
0x0684	0x4770    BX	LR
; end of __samltouch_driver__strlen
__samltouch_driver__strncmp:
;__samltouch_driver.c, 233 :: 		static int8_t _strncmp(uint8_t *cs, uint8_t *ct, uint16_t count)
; count start address is: 8 (R2)
; ct start address is: 4 (R1)
; cs start address is: 0 (R0)
0x06C0	0xB293    UXTH	R3, R2
0x06C2	0x460A    MOV	R2, R1
0x06C4	0x4601    MOV	R1, R0
; count end address is: 8 (R2)
; ct end address is: 4 (R1)
; cs end address is: 0 (R0)
; cs start address is: 4 (R1)
; ct start address is: 8 (R2)
; count start address is: 12 (R3)
;__samltouch_driver.c, 237 :: 		uint16_t i = 0;
; i start address is: 16 (R4)
0x06C6	0xF2400400  MOVW	R4, #0
;__samltouch_driver.c, 238 :: 		uint16_t j = 0;
; j start address is: 0 (R0)
0x06CA	0xF2400000  MOVW	R0, #0
; ct end address is: 8 (R2)
; count end address is: 12 (R3)
; j end address is: 0 (R0)
; i end address is: 16 (R4)
0x06CE	0xFA1FF880  UXTH	R8, R0
0x06D2	0x4610    MOV	R0, R2
0x06D4	0xB29A    UXTH	R2, R3
;__samltouch_driver.c, 240 :: 		while (0 != count)
L___samltouch_driver__strncmp0:
; j start address is: 32 (R8)
; ct start address is: 0 (R0)
; i start address is: 16 (R4)
; count start address is: 8 (R2)
; ct start address is: 0 (R0)
; ct end address is: 0 (R0)
; cs start address is: 4 (R1)
; cs end address is: 4 (R1)
0x06D6	0xB1EA    CBZ	R2, L___samltouch_driver__strncmp1
; ct end address is: 0 (R0)
; cs end address is: 4 (R1)
;__samltouch_driver.c, 242 :: 		c1 = cs[i++];
; cs start address is: 4 (R1)
; ct start address is: 0 (R0)
0x06D8	0x190B    ADDS	R3, R1, R4
0x06DA	0x781D    LDRB	R5, [R3, #0]
; c1 start address is: 24 (R6)
0x06DC	0xB2EE    UXTB	R6, R5
0x06DE	0x1C63    ADDS	R3, R4, #1
; i end address is: 16 (R4)
; i start address is: 28 (R7)
0x06E0	0xB29F    UXTH	R7, R3
;__samltouch_driver.c, 243 :: 		c2 = ct[j++];
0x06E2	0xEB000308  ADD	R3, R0, R8, LSL #0
0x06E6	0x781C    LDRB	R4, [R3, #0]
; c2 start address is: 36 (R9)
0x06E8	0xFA5FF984  UXTB	R9, R4
0x06EC	0xF1080801  ADD	R8, R8, #1
0x06F0	0xFA1FF888  UXTH	R8, R8
;__samltouch_driver.c, 245 :: 		if (c1 != c2)
0x06F4	0x42A5    CMP	R5, R4
0x06F6	0xD007    BEQ	L___samltouch_driver__strncmp2
; ct end address is: 0 (R0)
; cs end address is: 4 (R1)
; i end address is: 28 (R7)
; j end address is: 32 (R8)
; count end address is: 8 (R2)
;__samltouch_driver.c, 247 :: 		return c1 < c2 ? -1 : 1;
0x06F8	0x454E    CMP	R6, R9
0x06FA	0xD202    BCS	L___samltouch_driver__strncmp3
; c1 end address is: 24 (R6)
; c2 end address is: 36 (R9)
; ?FLOC____samltouch_driver__strncmp?T29 start address is: 0 (R0)
0x06FC	0x20FF    MOVS	R0, #-1
0x06FE	0xB240    SXTB	R0, R0
; ?FLOC____samltouch_driver__strncmp?T29 end address is: 0 (R0)
0x0700	0xE001    B	L___samltouch_driver__strncmp4
L___samltouch_driver__strncmp3:
; ?FLOC____samltouch_driver__strncmp?T29 start address is: 0 (R0)
0x0702	0x2001    MOVS	R0, #1
0x0704	0xB240    SXTB	R0, R0
; ?FLOC____samltouch_driver__strncmp?T29 end address is: 0 (R0)
L___samltouch_driver__strncmp4:
; ?FLOC____samltouch_driver__strncmp?T29 start address is: 0 (R0)
; ?FLOC____samltouch_driver__strncmp?T29 end address is: 0 (R0)
0x0706	0xE007    B	L_end__strncmp
;__samltouch_driver.c, 248 :: 		}
L___samltouch_driver__strncmp2:
;__samltouch_driver.c, 249 :: 		if (0 == c1)
; count start address is: 8 (R2)
; j start address is: 32 (R8)
; i start address is: 28 (R7)
; c1 start address is: 24 (R6)
; cs start address is: 4 (R1)
; ct start address is: 0 (R0)
0x0708	0xB906    CBNZ	R6, L___samltouch_driver__strncmp5
; ct end address is: 0 (R0)
; cs end address is: 4 (R1)
; c1 end address is: 24 (R6)
; i end address is: 28 (R7)
; j end address is: 32 (R8)
; count end address is: 8 (R2)
;__samltouch_driver.c, 251 :: 		break;
0x070A	0xE003    B	L___samltouch_driver__strncmp1
;__samltouch_driver.c, 252 :: 		}
L___samltouch_driver__strncmp5:
;__samltouch_driver.c, 253 :: 		count--;
; count start address is: 8 (R2)
; j start address is: 32 (R8)
; i start address is: 28 (R7)
; cs start address is: 4 (R1)
; ct start address is: 0 (R0)
0x070C	0x1E52    SUBS	R2, R2, #1
0x070E	0xB292    UXTH	R2, R2
;__samltouch_driver.c, 254 :: 		}
; ct end address is: 0 (R0)
; cs end address is: 4 (R1)
; i end address is: 28 (R7)
; j end address is: 32 (R8)
; count end address is: 8 (R2)
0x0710	0xB2BC    UXTH	R4, R7
0x0712	0xE7E0    B	L___samltouch_driver__strncmp0
L___samltouch_driver__strncmp1:
;__samltouch_driver.c, 255 :: 		return 0;
0x0714	0x2000    MOVS	R0, #0
0x0716	0xB240    SXTB	R0, R0
;__samltouch_driver.c, 256 :: 		}
L_end__strncmp:
0x0718	0x4770    BX	LR
; end of __samltouch_driver__strncmp
__samltouch_driver__strncpy:
;__samltouch_driver.c, 258 :: 		static void _strncpy(uint8_t *dest, uint8_t *src, uint16_t count)
; count start address is: 8 (R2)
; src start address is: 4 (R1)
; dest start address is: 0 (R0)
0x0D48	0xB081    SUB	SP, SP, #4
; count end address is: 8 (R2)
; src end address is: 4 (R1)
; dest end address is: 0 (R0)
; dest start address is: 0 (R0)
; src start address is: 4 (R1)
; count start address is: 8 (R2)
;__samltouch_driver.c, 260 :: 		char *tmp  = dest;
; tmp start address is: 16 (R4)
0x0D4A	0x4604    MOV	R4, R0
; dest end address is: 0 (R0)
;__samltouch_driver.c, 262 :: 		uint16_t i = 0;
; i start address is: 0 (R0)
0x0D4C	0xF2400000  MOVW	R0, #0
; src end address is: 4 (R1)
; count end address is: 8 (R2)
; i end address is: 0 (R0)
; tmp end address is: 16 (R4)
0x0D50	0xF8AD2000  STRH	R2, [SP, #0]
0x0D54	0xB282    UXTH	R2, R0
0x0D56	0x4608    MOV	R0, R1
0x0D58	0xF8BD1000  LDRH	R1, [SP, #0]
;__samltouch_driver.c, 264 :: 		while (0 != count)
L___samltouch_driver__strncpy6:
; i start address is: 8 (R2)
; src start address is: 0 (R0)
; tmp start address is: 16 (R4)
; count start address is: 4 (R1)
; src start address is: 0 (R0)
; src end address is: 0 (R0)
0x0D5C	0xB159    CBZ	R1, L___samltouch_driver__strncpy7
; src end address is: 0 (R0)
;__samltouch_driver.c, 266 :: 		if (0 != (*tmp = src[i]))
; src start address is: 0 (R0)
0x0D5E	0x1883    ADDS	R3, R0, R2
0x0D60	0x781B    LDRB	R3, [R3, #0]
0x0D62	0x7023    STRB	R3, [R4, #0]
0x0D64	0x7823    LDRB	R3, [R4, #0]
0x0D66	0xB113    CBZ	R3, L___samltouch_driver__strncpy97
;__samltouch_driver.c, 268 :: 		i++;
0x0D68	0x1C52    ADDS	R2, R2, #1
0x0D6A	0xB292    UXTH	R2, R2
; i end address is: 8 (R2)
;__samltouch_driver.c, 269 :: 		}
0x0D6C	0xE7FF    B	L___samltouch_driver__strncpy8
L___samltouch_driver__strncpy97:
;__samltouch_driver.c, 266 :: 		if (0 != (*tmp = src[i]))
;__samltouch_driver.c, 269 :: 		}
L___samltouch_driver__strncpy8:
;__samltouch_driver.c, 270 :: 		tmp++;
; i start address is: 8 (R2)
0x0D6E	0x1C64    ADDS	R4, R4, #1
;__samltouch_driver.c, 271 :: 		count--;
0x0D70	0x1E49    SUBS	R1, R1, #1
0x0D72	0xB289    UXTH	R1, R1
;__samltouch_driver.c, 272 :: 		}
; src end address is: 0 (R0)
; i end address is: 8 (R2)
; tmp end address is: 16 (R4)
; count end address is: 4 (R1)
0x0D74	0xE7F2    B	L___samltouch_driver__strncpy6
L___samltouch_driver__strncpy7:
;__samltouch_driver.c, 273 :: 		}
L_end__strncpy:
0x0D76	0xB001    ADD	SP, SP, #4
0x0D78	0x4770    BX	LR
; end of __samltouch_driver__strncpy
__samltouch_driver_locateHandler:
;__samltouch_driver.c, 413 :: 		static uint16_t locateHandler( char* pCmd )
; pCmd start address is: 0 (R0)
0x0C30	0xB081    SUB	SP, SP, #4
0x0C32	0xF8CDE000  STR	LR, [SP, #0]
0x0C36	0x4604    MOV	R4, R0
; pCmd end address is: 0 (R0)
; pCmd start address is: 16 (R4)
;__samltouch_driver.c, 420 :: 		len = _strlen(pCmd);
0x0C38	0x4620    MOV	R0, R4
0x0C3A	0xF7FFFD13  BL	__samltouch_driver__strlen+0
; len start address is: 20 (R5)
0x0C3E	0xB2C5    UXTB	R5, R0
;__samltouch_driver.c, 421 :: 		hash = generateHash(pCmd);
0x0C40	0x4620    MOV	R0, R4
; pCmd end address is: 16 (R4)
0x0C42	0xF000FACF  BL	__samltouch_driver_generateHash+0
; hash start address is: 0 (R0)
;__samltouch_driver.c, 423 :: 		for (idx = 1; idx < hdlBuff.idx; idx++)
; idx start address is: 16 (R4)
0x0C46	0x2401    MOVS	R4, #1
; len end address is: 20 (R5)
; idx end address is: 16 (R4)
0x0C48	0xB2EB    UXTB	R3, R5
L___samltouch_driver_locateHandler29:
; idx start address is: 16 (R4)
; len start address is: 12 (R3)
; hash start address is: 0 (R0)
; hash end address is: 0 (R0)
; len start address is: 12 (R3)
; len end address is: 12 (R3)
0x0C4A	0x490D    LDR	R1, [PC, #52]
0x0C4C	0x8809    LDRH	R1, [R1, #0]
0x0C4E	0x428C    CMP	R4, R1
0x0C50	0xD211    BCS	L___samltouch_driver_locateHandler30
; hash end address is: 0 (R0)
; len end address is: 12 (R3)
;__samltouch_driver.c, 425 :: 		if (hdlBuff.storage[idx].len == len)
; len start address is: 12 (R3)
; hash start address is: 0 (R0)
0x0C52	0x0122    LSLS	R2, R4, #4
0x0C54	0x490B    LDR	R1, [PC, #44]
0x0C56	0x1889    ADDS	R1, R1, R2
0x0C58	0x8809    LDRH	R1, [R1, #0]
0x0C5A	0x4299    CMP	R1, R3
0x0C5C	0xD108    BNE	L___samltouch_driver_locateHandler32
;__samltouch_driver.c, 427 :: 		if (hdlBuff.storage[idx].hash == hash)
0x0C5E	0x0122    LSLS	R2, R4, #4
0x0C60	0x4908    LDR	R1, [PC, #32]
0x0C62	0x1889    ADDS	R1, R1, R2
0x0C64	0x1D09    ADDS	R1, R1, #4
0x0C66	0x6809    LDR	R1, [R1, #0]
0x0C68	0x4281    CMP	R1, R0
0x0C6A	0xD101    BNE	L___samltouch_driver_locateHandler33
; hash end address is: 0 (R0)
; len end address is: 12 (R3)
;__samltouch_driver.c, 429 :: 		return idx;
0x0C6C	0xB2A0    UXTH	R0, R4
; idx end address is: 16 (R4)
0x0C6E	0xE003    B	L_end_locateHandler
;__samltouch_driver.c, 430 :: 		}
L___samltouch_driver_locateHandler33:
;__samltouch_driver.c, 431 :: 		}
; idx start address is: 16 (R4)
; len start address is: 12 (R3)
; hash start address is: 0 (R0)
L___samltouch_driver_locateHandler32:
;__samltouch_driver.c, 423 :: 		for (idx = 1; idx < hdlBuff.idx; idx++)
0x0C70	0x1C64    ADDS	R4, R4, #1
0x0C72	0xB2A4    UXTH	R4, R4
;__samltouch_driver.c, 432 :: 		}
; hash end address is: 0 (R0)
; len end address is: 12 (R3)
; idx end address is: 16 (R4)
0x0C74	0xE7E9    B	L___samltouch_driver_locateHandler29
L___samltouch_driver_locateHandler30:
;__samltouch_driver.c, 434 :: 		return 0;
0x0C76	0x2000    MOVS	R0, #0
;__samltouch_driver.c, 435 :: 		}
L_end_locateHandler:
0x0C78	0xF8DDE000  LDR	LR, [SP, #0]
0x0C7C	0xB001    ADD	SP, SP, #4
0x0C7E	0x4770    BX	LR
0x0C80	0x02C02000  	__samltouch_driver_hdlBuff+0
0x0C84	0x02C42000  	__samltouch_driver_hdlBuff+4
; end of __samltouch_driver_locateHandler
_IntToStr:
;__Lib_Conversions.c, 211 :: 		
; output start address is: 4 (R1)
; input start address is: 0 (R0)
0x1214	0xB081    SUB	SP, SP, #4
0x1216	0xF8CDE000  STR	LR, [SP, #0]
0x121A	0x460E    MOV	R6, R1
; output end address is: 4 (R1)
; input end address is: 0 (R0)
; input start address is: 0 (R0)
; output start address is: 24 (R6)
;__Lib_Conversions.c, 217 :: 		
; negative start address is: 4 (R1)
0x121C	0x2100    MOVS	R1, #0
;__Lib_Conversions.c, 218 :: 		
; inword start address is: 12 (R3)
0x121E	0xB283    UXTH	R3, R0
;__Lib_Conversions.c, 219 :: 		
0x1220	0x2800    CMP	R0, #0
0x1222	0xDA05    BGE	L__IntToStr415
; inword end address is: 12 (R3)
;__Lib_Conversions.c, 220 :: 		
0x1224	0x2101    MOVS	R1, #1
;__Lib_Conversions.c, 221 :: 		
0x1226	0x4240    RSBS	R0, R0, #0
0x1228	0xB280    UXTH	R0, R0
; input end address is: 0 (R0)
; inword start address is: 0 (R0)
0x122A	0xB280    UXTH	R0, R0
; negative end address is: 4 (R1)
; inword end address is: 0 (R0)
0x122C	0xB28F    UXTH	R7, R1
;__Lib_Conversions.c, 222 :: 		
0x122E	0xE001    B	L_IntToStr37
L__IntToStr415:
;__Lib_Conversions.c, 219 :: 		
0x1230	0xB298    UXTH	R0, R3
0x1232	0xB28F    UXTH	R7, R1
;__Lib_Conversions.c, 222 :: 		
L_IntToStr37:
;__Lib_Conversions.c, 223 :: 		
; inword start address is: 0 (R0)
; negative start address is: 28 (R7)
0x1234	0x4631    MOV	R1, R6
; inword end address is: 0 (R0)
0x1236	0xF7FFFE1D  BL	_WordToStr+0
;__Lib_Conversions.c, 225 :: 		
; i start address is: 4 (R1)
0x123A	0x2106    MOVS	R1, #6
; output end address is: 24 (R6)
; negative end address is: 28 (R7)
; i end address is: 4 (R1)
0x123C	0x4634    MOV	R4, R6
0x123E	0xB2B8    UXTH	R0, R7
;__Lib_Conversions.c, 226 :: 		
L_IntToStr38:
; i start address is: 4 (R1)
; negative start address is: 0 (R0)
; output start address is: 16 (R4)
0x1240	0x2900    CMP	R1, #0
0x1242	0xD908    BLS	L_IntToStr39
;__Lib_Conversions.c, 227 :: 		
0x1244	0x1863    ADDS	R3, R4, R1
0x1246	0x1E4A    SUBS	R2, R1, #1
0x1248	0xB292    UXTH	R2, R2
0x124A	0x18A2    ADDS	R2, R4, R2
0x124C	0x7812    LDRB	R2, [R2, #0]
0x124E	0x701A    STRB	R2, [R3, #0]
;__Lib_Conversions.c, 228 :: 		
0x1250	0x1E49    SUBS	R1, R1, #1
0x1252	0xB289    UXTH	R1, R1
;__Lib_Conversions.c, 229 :: 		
; i end address is: 4 (R1)
0x1254	0xE7F4    B	L_IntToStr38
L_IntToStr39:
;__Lib_Conversions.c, 230 :: 		
0x1256	0x2220    MOVS	R2, #32
0x1258	0x7022    STRB	R2, [R4, #0]
;__Lib_Conversions.c, 231 :: 		
0x125A	0xB170    CBZ	R0, L_IntToStr40
; negative end address is: 0 (R0)
;__Lib_Conversions.c, 232 :: 		
; i start address is: 0 (R0)
0x125C	0x2000    MOVS	R0, #0
; output end address is: 16 (R4)
; i end address is: 0 (R0)
0x125E	0xB281    UXTH	R1, R0
0x1260	0x4620    MOV	R0, R4
;__Lib_Conversions.c, 233 :: 		
L_IntToStr41:
; i start address is: 4 (R1)
; output start address is: 0 (R0)
0x1262	0x1842    ADDS	R2, R0, R1
0x1264	0x7812    LDRB	R2, [R2, #0]
0x1266	0x2A20    CMP	R2, #32
0x1268	0xD102    BNE	L_IntToStr42
0x126A	0x1C49    ADDS	R1, R1, #1
0x126C	0xB289    UXTH	R1, R1
0x126E	0xE7F8    B	L_IntToStr41
L_IntToStr42:
;__Lib_Conversions.c, 234 :: 		
0x1270	0x1E4A    SUBS	R2, R1, #1
0x1272	0xB292    UXTH	R2, R2
; i end address is: 4 (R1)
;__Lib_Conversions.c, 235 :: 		
0x1274	0x1883    ADDS	R3, R0, R2
; output end address is: 0 (R0)
0x1276	0x222D    MOVS	R2, #45
0x1278	0x701A    STRB	R2, [R3, #0]
L_IntToStr40:
;__Lib_Conversions.c, 236 :: 		
L_end_IntToStr:
0x127A	0xF8DDE000  LDR	LR, [SP, #0]
0x127E	0xB001    ADD	SP, SP, #4
0x1280	0x4770    BX	LR
; end of _IntToStr
_WordToStr:
;__Lib_Conversions.c, 114 :: 		
; output start address is: 4 (R1)
; input start address is: 0 (R0)
0x0E74	0xB081    SUB	SP, SP, #4
0x0E76	0x460A    MOV	R2, R1
0x0E78	0xB281    UXTH	R1, R0
; output end address is: 4 (R1)
; input end address is: 0 (R0)
; input start address is: 4 (R1)
; output start address is: 8 (R2)
;__Lib_Conversions.c, 119 :: 		
; len start address is: 0 (R0)
0x0E7A	0x2000    MOVS	R0, #0
; input end address is: 4 (R1)
; output end address is: 8 (R2)
; len end address is: 0 (R0)
0x0E7C	0xB28D    UXTH	R5, R1
0x0E7E	0x4611    MOV	R1, R2
L_WordToStr11:
; len start address is: 0 (R0)
; output start address is: 4 (R1)
; input start address is: 20 (R5)
0x0E80	0x2805    CMP	R0, #5
0x0E82	0xD205    BCS	L_WordToStr12
;__Lib_Conversions.c, 120 :: 		
0x0E84	0x180B    ADDS	R3, R1, R0
0x0E86	0x2220    MOVS	R2, #32
0x0E88	0x701A    STRB	R2, [R3, #0]
;__Lib_Conversions.c, 119 :: 		
0x0E8A	0x1C40    ADDS	R0, R0, #1
0x0E8C	0xB2C0    UXTB	R0, R0
;__Lib_Conversions.c, 120 :: 		
0x0E8E	0xE7F7    B	L_WordToStr11
L_WordToStr12:
;__Lib_Conversions.c, 121 :: 		
0x0E90	0x180B    ADDS	R3, R1, R0
0x0E92	0x2200    MOVS	R2, #0
0x0E94	0x701A    STRB	R2, [R3, #0]
0x0E96	0x1E40    SUBS	R0, R0, #1
0x0E98	0xB2C0    UXTB	R0, R0
; output end address is: 4 (R1)
; len end address is: 0 (R0)
;__Lib_Conversions.c, 123 :: 		
L_WordToStr14:
;__Lib_Conversions.c, 124 :: 		
; len start address is: 0 (R0)
; input start address is: 20 (R5)
; output start address is: 4 (R1)
0x0E9A	0x180C    ADDS	R4, R1, R0
0x0E9C	0x230A    MOVS	R3, #10
0x0E9E	0xFBB5F2F3  UDIV	R2, R5, R3
0x0EA2	0xFB035212  MLS	R2, R3, R2, R5
0x0EA6	0xB292    UXTH	R2, R2
0x0EA8	0x3230    ADDS	R2, #48
0x0EAA	0x7022    STRB	R2, [R4, #0]
;__Lib_Conversions.c, 125 :: 		
0x0EAC	0x220A    MOVS	R2, #10
0x0EAE	0xFBB5F2F2  UDIV	R2, R5, R2
0x0EB2	0xB292    UXTH	R2, R2
0x0EB4	0xB295    UXTH	R5, R2
; input end address is: 20 (R5)
;__Lib_Conversions.c, 126 :: 		
0x0EB6	0xB902    CBNZ	R2, L_WordToStr16
; output end address is: 4 (R1)
; input end address is: 20 (R5)
; len end address is: 0 (R0)
;__Lib_Conversions.c, 127 :: 		
0x0EB8	0xE002    B	L_WordToStr15
L_WordToStr16:
;__Lib_Conversions.c, 128 :: 		
; len start address is: 0 (R0)
; input start address is: 20 (R5)
; output start address is: 4 (R1)
0x0EBA	0x1E40    SUBS	R0, R0, #1
0x0EBC	0xB2C0    UXTB	R0, R0
;__Lib_Conversions.c, 129 :: 		
; output end address is: 4 (R1)
; input end address is: 20 (R5)
; len end address is: 0 (R0)
0x0EBE	0xE7EC    B	L_WordToStr14
L_WordToStr15:
;__Lib_Conversions.c, 130 :: 		
L_end_WordToStr:
0x0EC0	0xB001    ADD	SP, SP, #4
0x0EC2	0x4770    BX	LR
; end of _WordToStr
__Lib_System_105_107_InitialSetUpRCCRCC2:
;__Lib_System_105_107.c, 387 :: 		
0x18B8	0xB081    SUB	SP, SP, #4
0x18BA	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_System_105_107.c, 390 :: 		
; ulRCC_CR start address is: 8 (R2)
0x18BE	0x4A46    LDR	R2, [PC, #280]
;__Lib_System_105_107.c, 391 :: 		
; ulRCC_CFGR start address is: 12 (R3)
0x18C0	0x4B46    LDR	R3, [PC, #280]
;__Lib_System_105_107.c, 392 :: 		
; ulRCC_CFGR2 start address is: 16 (R4)
0x18C2	0x4C47    LDR	R4, [PC, #284]
;__Lib_System_105_107.c, 393 :: 		
; Fosc_kHz start address is: 4 (R1)
0x18C4	0x4947    LDR	R1, [PC, #284]
;__Lib_System_105_107.c, 400 :: 		
0x18C6	0xF64B3080  MOVW	R0, #48000
0x18CA	0x4281    CMP	R1, R0
0x18CC	0xD906    BLS	L___Lib_System_105_107_InitialSetUpRCCRCC234
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_105_107.c, 401 :: 		
0x18CE	0x4846    LDR	R0, [PC, #280]
0x18D0	0x6800    LDR	R0, [R0, #0]
0x18D2	0xF0400102  ORR	R1, R0, #2
0x18D6	0x4844    LDR	R0, [PC, #272]
0x18D8	0x6001    STR	R1, [R0, #0]
0x18DA	0xE011    B	L___Lib_System_105_107_InitialSetUpRCCRCC235
L___Lib_System_105_107_InitialSetUpRCCRCC234:
;__Lib_System_105_107.c, 402 :: 		
; Fosc_kHz start address is: 4 (R1)
0x18DC	0xF64550C0  MOVW	R0, #24000
0x18E0	0x4281    CMP	R1, R0
0x18E2	0xD906    BLS	L___Lib_System_105_107_InitialSetUpRCCRCC236
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_105_107.c, 403 :: 		
0x18E4	0x4840    LDR	R0, [PC, #256]
0x18E6	0x6800    LDR	R0, [R0, #0]
0x18E8	0xF0400101  ORR	R1, R0, #1
0x18EC	0x483E    LDR	R0, [PC, #248]
0x18EE	0x6001    STR	R1, [R0, #0]
0x18F0	0xE006    B	L___Lib_System_105_107_InitialSetUpRCCRCC237
L___Lib_System_105_107_InitialSetUpRCCRCC236:
;__Lib_System_105_107.c, 405 :: 		
0x18F2	0x483D    LDR	R0, [PC, #244]
0x18F4	0x6801    LDR	R1, [R0, #0]
0x18F6	0xF06F0007  MVN	R0, #7
0x18FA	0x4001    ANDS	R1, R0
0x18FC	0x483A    LDR	R0, [PC, #232]
0x18FE	0x6001    STR	R1, [R0, #0]
L___Lib_System_105_107_InitialSetUpRCCRCC237:
L___Lib_System_105_107_InitialSetUpRCCRCC235:
;__Lib_System_105_107.c, 407 :: 		
0x1900	0xF7FFFEDE  BL	__Lib_System_105_107_SystemClockSetDefault+0
;__Lib_System_105_107.c, 409 :: 		
0x1904	0x4839    LDR	R0, [PC, #228]
0x1906	0x6003    STR	R3, [R0, #0]
;__Lib_System_105_107.c, 410 :: 		
0x1908	0x4839    LDR	R0, [PC, #228]
0x190A	0x6004    STR	R4, [R0, #0]
; ulRCC_CFGR2 end address is: 16 (R4)
;__Lib_System_105_107.c, 411 :: 		
0x190C	0x4839    LDR	R0, [PC, #228]
0x190E	0xEA020100  AND	R1, R2, R0, LSL #0
0x1912	0x4839    LDR	R0, [PC, #228]
0x1914	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 413 :: 		
0x1916	0xF0020001  AND	R0, R2, #1
0x191A	0xB140    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC255
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x191C	0x4619    MOV	R1, R3
;__Lib_System_105_107.c, 414 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC239:
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x191E	0x4836    LDR	R0, [PC, #216]
0x1920	0x6800    LDR	R0, [R0, #0]
0x1922	0xF0000002  AND	R0, R0, #2
0x1926	0x2800    CMP	R0, #0
0x1928	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC240
;__Lib_System_105_107.c, 415 :: 		
0x192A	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC239
L___Lib_System_105_107_InitialSetUpRCCRCC240:
;__Lib_System_105_107.c, 416 :: 		
; ulRCC_CFGR end address is: 4 (R1)
0x192C	0xE000    B	L___Lib_System_105_107_InitialSetUpRCCRCC238
; ulRCC_CR end address is: 8 (R2)
L___Lib_System_105_107_InitialSetUpRCCRCC255:
;__Lib_System_105_107.c, 413 :: 		
0x192E	0x4619    MOV	R1, R3
;__Lib_System_105_107.c, 416 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC238:
;__Lib_System_105_107.c, 418 :: 		
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x1930	0xF4023080  AND	R0, R2, #65536
0x1934	0xB140    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC256
; ulRCC_CR end address is: 8 (R2)
; ulRCC_CFGR end address is: 4 (R1)
0x1936	0x460B    MOV	R3, R1
;__Lib_System_105_107.c, 419 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC242:
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 12 (R3)
0x1938	0x482F    LDR	R0, [PC, #188]
0x193A	0x6800    LDR	R0, [R0, #0]
0x193C	0xF4003000  AND	R0, R0, #131072
0x1940	0x2800    CMP	R0, #0
0x1942	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC243
;__Lib_System_105_107.c, 420 :: 		
0x1944	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC242
L___Lib_System_105_107_InitialSetUpRCCRCC243:
;__Lib_System_105_107.c, 421 :: 		
; ulRCC_CR end address is: 8 (R2)
0x1946	0xE000    B	L___Lib_System_105_107_InitialSetUpRCCRCC241
; ulRCC_CFGR end address is: 12 (R3)
L___Lib_System_105_107_InitialSetUpRCCRCC256:
;__Lib_System_105_107.c, 418 :: 		
0x1948	0x460B    MOV	R3, R1
;__Lib_System_105_107.c, 421 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC241:
;__Lib_System_105_107.c, 423 :: 		
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 12 (R3)
0x194A	0xF0025080  AND	R0, R2, #268435456
0x194E	0xB168    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC257
;__Lib_System_105_107.c, 424 :: 		
0x1950	0x4829    LDR	R0, [PC, #164]
0x1952	0x6800    LDR	R0, [R0, #0]
0x1954	0xF0405180  ORR	R1, R0, #268435456
0x1958	0x4827    LDR	R0, [PC, #156]
0x195A	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
;__Lib_System_105_107.c, 425 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC245:
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CR start address is: 8 (R2)
0x195C	0x4826    LDR	R0, [PC, #152]
0x195E	0x6800    LDR	R0, [R0, #0]
0x1960	0xF0005000  AND	R0, R0, #536870912
0x1964	0x2800    CMP	R0, #0
0x1966	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC246
;__Lib_System_105_107.c, 426 :: 		
0x1968	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC245
L___Lib_System_105_107_InitialSetUpRCCRCC246:
;__Lib_System_105_107.c, 427 :: 		
; ulRCC_CR end address is: 8 (R2)
0x196A	0xE7FF    B	L___Lib_System_105_107_InitialSetUpRCCRCC244
; ulRCC_CFGR end address is: 12 (R3)
L___Lib_System_105_107_InitialSetUpRCCRCC257:
;__Lib_System_105_107.c, 423 :: 		
;__Lib_System_105_107.c, 427 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC244:
;__Lib_System_105_107.c, 429 :: 		
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CR start address is: 8 (R2)
0x196C	0xF0026080  AND	R0, R2, #67108864
0x1970	0xB178    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC258
;__Lib_System_105_107.c, 430 :: 		
0x1972	0x4821    LDR	R0, [PC, #132]
0x1974	0x6800    LDR	R0, [R0, #0]
0x1976	0xF0406180  ORR	R1, R0, #67108864
0x197A	0x481F    LDR	R0, [PC, #124]
0x197C	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x197E	0x4611    MOV	R1, R2
0x1980	0x461A    MOV	R2, R3
;__Lib_System_105_107.c, 431 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC248:
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x1982	0x481D    LDR	R0, [PC, #116]
0x1984	0x6800    LDR	R0, [R0, #0]
0x1986	0xF0006000  AND	R0, R0, #134217728
0x198A	0x2800    CMP	R0, #0
0x198C	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC249
;__Lib_System_105_107.c, 432 :: 		
0x198E	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC248
L___Lib_System_105_107_InitialSetUpRCCRCC249:
;__Lib_System_105_107.c, 433 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x1990	0xE001    B	L___Lib_System_105_107_InitialSetUpRCCRCC247
; ulRCC_CR end address is: 4 (R1)
L___Lib_System_105_107_InitialSetUpRCCRCC258:
;__Lib_System_105_107.c, 429 :: 		
0x1992	0x4611    MOV	R1, R2
0x1994	0x461A    MOV	R2, R3
;__Lib_System_105_107.c, 433 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC247:
;__Lib_System_105_107.c, 435 :: 		
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x1996	0xF0017080  AND	R0, R1, #16777216
; ulRCC_CR end address is: 4 (R1)
0x199A	0xB170    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC259
;__Lib_System_105_107.c, 436 :: 		
0x199C	0x4816    LDR	R0, [PC, #88]
0x199E	0x6800    LDR	R0, [R0, #0]
0x19A0	0xF0407180  ORR	R1, R0, #16777216
0x19A4	0x4814    LDR	R0, [PC, #80]
0x19A6	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 8 (R2)
0x19A8	0x4611    MOV	R1, R2
;__Lib_System_105_107.c, 437 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC251:
; ulRCC_CFGR start address is: 4 (R1)
0x19AA	0x4813    LDR	R0, [PC, #76]
0x19AC	0x6800    LDR	R0, [R0, #0]
0x19AE	0xF0007000  AND	R0, R0, #33554432
0x19B2	0xB900    CBNZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC252
;__Lib_System_105_107.c, 438 :: 		
0x19B4	0xE7F9    B	L___Lib_System_105_107_InitialSetUpRCCRCC251
L___Lib_System_105_107_InitialSetUpRCCRCC252:
;__Lib_System_105_107.c, 439 :: 		
0x19B6	0x460A    MOV	R2, R1
0x19B8	0xE7FF    B	L___Lib_System_105_107_InitialSetUpRCCRCC250
; ulRCC_CFGR end address is: 4 (R1)
L___Lib_System_105_107_InitialSetUpRCCRCC259:
;__Lib_System_105_107.c, 435 :: 		
;__Lib_System_105_107.c, 439 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC250:
;__Lib_System_105_107.c, 443 :: 		
; ulRCC_CFGR start address is: 8 (R2)
; ulRCC_CFGR end address is: 8 (R2)
L___Lib_System_105_107_InitialSetUpRCCRCC253:
; ulRCC_CFGR start address is: 8 (R2)
0x19BA	0x480C    LDR	R0, [PC, #48]
0x19BC	0x6800    LDR	R0, [R0, #0]
0x19BE	0xF000010C  AND	R1, R0, #12
0x19C2	0x0090    LSLS	R0, R2, #2
0x19C4	0xF000000C  AND	R0, R0, #12
0x19C8	0x4281    CMP	R1, R0
0x19CA	0xD000    BEQ	L___Lib_System_105_107_InitialSetUpRCCRCC254
;__Lib_System_105_107.c, 444 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x19CC	0xE7F5    B	L___Lib_System_105_107_InitialSetUpRCCRCC253
L___Lib_System_105_107_InitialSetUpRCCRCC254:
;__Lib_System_105_107.c, 445 :: 		
L_end_InitialSetUpRCCRCC2:
0x19CE	0xF8DDE000  LDR	LR, [SP, #0]
0x19D2	0xB001    ADD	SP, SP, #4
0x19D4	0x4770    BX	LR
0x19D6	0xBF00    NOP
0x19D8	0x00810501  	#83951745
0x19DC	0x8402001D  	#1934338
0x19E0	0x06440001  	#67140
0x19E4	0x19400001  	#72000
0x19E8	0x20004002  	FLASH_ACR+0
0x19EC	0x10044002  	RCC_CFGR+0
0x19F0	0x102C4002  	RCC_CFGR2+0
0x19F4	0xFFFF000F  	#1048575
0x19F8	0x10004002  	RCC_CR+0
; end of __Lib_System_105_107_InitialSetUpRCCRCC2
__Lib_System_105_107_SystemClockSetDefault:
;__Lib_System_105_107.c, 360 :: 		
0x16C0	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 363 :: 		
0x16C2	0x4815    LDR	R0, [PC, #84]
0x16C4	0x6800    LDR	R0, [R0, #0]
0x16C6	0xF0400101  ORR	R1, R0, #1
0x16CA	0x4813    LDR	R0, [PC, #76]
0x16CC	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 366 :: 		
0x16CE	0x4913    LDR	R1, [PC, #76]
0x16D0	0x4813    LDR	R0, [PC, #76]
0x16D2	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 369 :: 		
0x16D4	0x4810    LDR	R0, [PC, #64]
0x16D6	0x6801    LDR	R1, [R0, #0]
0x16D8	0x4812    LDR	R0, [PC, #72]
0x16DA	0x4001    ANDS	R1, R0
0x16DC	0x480E    LDR	R0, [PC, #56]
0x16DE	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 372 :: 		
0x16E0	0x480D    LDR	R0, [PC, #52]
0x16E2	0x6801    LDR	R1, [R0, #0]
0x16E4	0xF46F2080  MVN	R0, #262144
0x16E8	0x4001    ANDS	R1, R0
0x16EA	0x480B    LDR	R0, [PC, #44]
0x16EC	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 375 :: 		
0x16EE	0x480C    LDR	R0, [PC, #48]
0x16F0	0x6801    LDR	R1, [R0, #0]
0x16F2	0xF46F00FE  MVN	R0, #8323072
0x16F6	0x4001    ANDS	R1, R0
0x16F8	0x4809    LDR	R0, [PC, #36]
0x16FA	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 378 :: 		
0x16FC	0x4806    LDR	R0, [PC, #24]
0x16FE	0x6801    LDR	R1, [R0, #0]
0x1700	0xF06F50A0  MVN	R0, #335544320
0x1704	0x4001    ANDS	R1, R0
0x1706	0x4804    LDR	R0, [PC, #16]
0x1708	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 381 :: 		
0x170A	0xF04F0100  MOV	R1, #0
0x170E	0x4806    LDR	R0, [PC, #24]
0x1710	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 385 :: 		
L_end_SystemClockSetDefault:
0x1712	0xB001    ADD	SP, SP, #4
0x1714	0x4770    BX	LR
0x1716	0xBF00    NOP
0x1718	0x10004002  	RCC_CR+0
0x171C	0x0000F0FF  	#-251723776
0x1720	0x10044002  	RCC_CFGR+0
0x1724	0xFFFFFEF6  	#-17367041
0x1728	0x102C4002  	RCC_CFGR2+0
; end of __Lib_System_105_107_SystemClockSetDefault
__Lib_System_105_107_InitialSetUpFosc:
;__Lib_System_105_107.c, 447 :: 		
0x1A1C	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 448 :: 		
0x1A1E	0x4902    LDR	R1, [PC, #8]
0x1A20	0x4802    LDR	R0, [PC, #8]
0x1A22	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 449 :: 		
L_end_InitialSetUpFosc:
0x1A24	0xB001    ADD	SP, SP, #4
0x1A26	0x4770    BX	LR
0x1A28	0x19400001  	#72000
0x1A2C	0x02AC2000  	___System_CLOCK_IN_KHZ+0
; end of __Lib_System_105_107_InitialSetUpFosc
___GenExcept:
;__Lib_System_105_107.c, 311 :: 		
0x1884	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 312 :: 		
L___GenExcept30:
0x1886	0xE7FE    B	L___GenExcept30
;__Lib_System_105_107.c, 313 :: 		
L_end___GenExcept:
0x1888	0xB001    ADD	SP, SP, #4
0x188A	0x4770    BX	LR
; end of ___GenExcept
0x1EB8	0xB500    PUSH	(R14)
0x1EBA	0xF8DFB014  LDR	R11, [PC, #20]
0x1EBE	0xF8DFA014  LDR	R10, [PC, #20]
0x1EC2	0xF8DFC014  LDR	R12, [PC, #20]
0x1EC6	0xF7FFFBA3  BL	5648
0x1ECA	0xBD00    POP	(R15)
0x1ECC	0x4770    BX	LR
0x1ECE	0xBF00    NOP
0x1ED0	0x00002000  	#536870912
0x1ED4	0x02A02000  	#536871584
0x1ED8	0x1A300000  	#6704
0x1F38	0xB500    PUSH	(R14)
0x1F3A	0xF8DFB010  LDR	R11, [PC, #16]
0x1F3E	0xF8DFA010  LDR	R10, [PC, #16]
0x1F42	0xF7FFFBF3  BL	5932
0x1F46	0xBD00    POP	(R15)
0x1F48	0x4770    BX	LR
0x1F4A	0xBF00    NOP
0x1F4C	0x00002000  	#536870912
0x1F50	0x08D42000  	#536873172
_Timer_interrupt:
;click_saml_touch_timer.h, 27 :: 		void Timer_interrupt() iv IVT_INT_TIM2
0x188C	0xB081    SUB	SP, SP, #4
0x188E	0xF8CDE000  STR	LR, [SP, #0]
;click_saml_touch_timer.h, 29 :: 		samltouch_tick();
0x1892	0xF7FFFEC7  BL	_samltouch_tick+0
;click_saml_touch_timer.h, 30 :: 		timerCounter++;
0x1896	0x4906    LDR	R1, [PC, #24]
0x1898	0x6808    LDR	R0, [R1, #0]
0x189A	0x1C40    ADDS	R0, R0, #1
0x189C	0x6008    STR	R0, [R1, #0]
;click_saml_touch_timer.h, 31 :: 		TIM2_SR.UIF = 0;
0x189E	0x2100    MOVS	R1, #0
0x18A0	0xB249    SXTB	R1, R1
0x18A2	0x4804    LDR	R0, [PC, #16]
0x18A4	0x6001    STR	R1, [R0, #0]
;click_saml_touch_timer.h, 32 :: 		}
L_end_Timer_interrupt:
0x18A6	0xF8DDE000  LDR	LR, [SP, #0]
0x18AA	0xB001    ADD	SP, SP, #4
0x18AC	0x4770    BX	LR
0x18AE	0xBF00    NOP
0x18B0	0x002C2000  	_timerCounter+0
0x18B4	0x02004200  	TIM2_SR+0
; end of _Timer_interrupt
_samltouch_tick:
;__samltouch_driver.c, 561 :: 		void samltouch_tick()
;__samltouch_driver.c, 563 :: 		if (f_watchdog_active)
0x1624	0x481C    LDR	R0, [PC, #112]
0x1626	0x7800    LDRB	R0, [R0, #0]
0x1628	0xB1C8    CBZ	R0, L_samltouch_tick48
;__samltouch_driver.c, 565 :: 		if (c_watchdog_timer++ > currentEv.wDogLimit)
0x162A	0x481C    LDR	R0, [PC, #112]
0x162C	0x6802    LDR	R2, [R0, #0]
0x162E	0x481B    LDR	R0, [PC, #108]
0x1630	0x6800    LDR	R0, [R0, #0]
0x1632	0x1C41    ADDS	R1, R0, #1
0x1634	0x4819    LDR	R0, [PC, #100]
0x1636	0x6001    STR	R1, [R0, #0]
0x1638	0x4819    LDR	R0, [PC, #100]
0x163A	0x6800    LDR	R0, [R0, #0]
0x163C	0x4282    CMP	R2, R0
0x163E	0xD90E    BLS	L_samltouch_tick49
;__samltouch_driver.c, 567 :: 		f_watchdog_active = false;
0x1640	0x2100    MOVS	R1, #0
0x1642	0x4815    LDR	R0, [PC, #84]
0x1644	0x7001    STRB	R1, [R0, #0]
;__samltouch_driver.c, 568 :: 		c_watchdog_timer = 0;
0x1646	0x2100    MOVS	R1, #0
0x1648	0x4814    LDR	R0, [PC, #80]
0x164A	0x6001    STR	R1, [R0, #0]
;__samltouch_driver.c, 569 :: 		rxBuff.storage[rxBuff.idx] = 0;
0x164C	0x4815    LDR	R0, [PC, #84]
0x164E	0x8801    LDRH	R1, [R0, #0]
0x1650	0x4815    LDR	R0, [PC, #84]
0x1652	0x1841    ADDS	R1, R0, R1
0x1654	0x2000    MOVS	R0, #0
0x1656	0x7008    STRB	R0, [R1, #0]
;__samltouch_driver.c, 570 :: 		f_wdog_timeout = true;
0x1658	0x2101    MOVS	R1, #1
0x165A	0x4814    LDR	R0, [PC, #80]
0x165C	0x7001    STRB	R1, [R0, #0]
;__samltouch_driver.c, 571 :: 		}
L_samltouch_tick49:
;__samltouch_driver.c, 572 :: 		}
L_samltouch_tick48:
;__samltouch_driver.c, 573 :: 		if (f_timer_active)
0x165E	0x4814    LDR	R0, [PC, #80]
0x1660	0x7800    LDRB	R0, [R0, #0]
0x1662	0xB1C0    CBZ	R0, L_samltouch_tick50
;__samltouch_driver.c, 575 :: 		if (c_timer++ > _SAMLTOUCH_TIMER_LIMIT)
0x1664	0x4813    LDR	R0, [PC, #76]
0x1666	0x6802    LDR	R2, [R0, #0]
0x1668	0x4812    LDR	R0, [PC, #72]
0x166A	0x6800    LDR	R0, [R0, #0]
0x166C	0x1C41    ADDS	R1, R0, #1
0x166E	0x4811    LDR	R0, [PC, #68]
0x1670	0x6001    STR	R1, [R0, #0]
0x1672	0x4811    LDR	R0, [PC, #68]
0x1674	0x4282    CMP	R2, R0
0x1676	0xD90E    BLS	L_samltouch_tick51
;__samltouch_driver.c, 577 :: 		f_timer_active = false;
0x1678	0x2100    MOVS	R1, #0
0x167A	0x480D    LDR	R0, [PC, #52]
0x167C	0x7001    STRB	R1, [R0, #0]
;__samltouch_driver.c, 578 :: 		c_timer = 0;
0x167E	0x2100    MOVS	R1, #0
0x1680	0x480C    LDR	R0, [PC, #48]
0x1682	0x6001    STR	R1, [R0, #0]
;__samltouch_driver.c, 579 :: 		rxBuff.storage[rxBuff.idx] = 0;
0x1684	0x4807    LDR	R0, [PC, #28]
0x1686	0x8801    LDRH	R1, [R0, #0]
0x1688	0x4807    LDR	R0, [PC, #28]
0x168A	0x1841    ADDS	R1, R0, R1
0x168C	0x2000    MOVS	R0, #0
0x168E	0x7008    STRB	R0, [R1, #0]
;__samltouch_driver.c, 580 :: 		f_response_ready = true;
0x1690	0x2101    MOVS	R1, #1
0x1692	0x480A    LDR	R0, [PC, #40]
0x1694	0x7001    STRB	R1, [R0, #0]
;__samltouch_driver.c, 581 :: 		}
L_samltouch_tick51:
;__samltouch_driver.c, 582 :: 		}
L_samltouch_tick50:
;__samltouch_driver.c, 583 :: 		}
L_end_samltouch_tick:
0x1696	0x4770    BX	LR
0x1698	0x08B42000  	__samltouch_driver_f_watchdog_active+0
0x169C	0x08B02000  	__samltouch_driver_c_watchdog_timer+0
0x16A0	0x08CC2000  	__samltouch_driver_currentEv+4
0x16A4	0x04C62000  	__samltouch_driver_rxBuff+0
0x16A8	0x04C82000  	__samltouch_driver_rxBuff+2
0x16AC	0x04C52000  	__samltouch_driver_f_wdog_timeout+0
0x16B0	0x08B52000  	__samltouch_driver_f_timer_active+0
0x16B4	0x08B82000  	__samltouch_driver_c_timer+0
0x16B8	0x00050000  	__SAMLTOUCH_TIMER_LIMIT
0x16BC	0x04C42000  	__samltouch_driver_f_response_ready+0
; end of _samltouch_tick
;Click_SAML_Touch_STM.c,0 :: ?ICS?lstr1_Click_SAML_Touch_STM [22]
0x1A30	0x2D2D2D2D ;?ICS?lstr1_Click_SAML_Touch_STM+0
0x1A34	0x73795320 ;?ICS?lstr1_Click_SAML_Touch_STM+4
0x1A38	0x206D6574 ;?ICS?lstr1_Click_SAML_Touch_STM+8
0x1A3C	0x74696E49 ;?ICS?lstr1_Click_SAML_Touch_STM+12
0x1A40	0x2D2D2D20 ;?ICS?lstr1_Click_SAML_Touch_STM+16
0x1A44	0x002D ;?ICS?lstr1_Click_SAML_Touch_STM+20
; end of ?ICS?lstr1_Click_SAML_Touch_STM
;Click_SAML_Touch_STM.c,0 :: ?ICS?lstr2_Click_SAML_Touch_STM [22]
0x1A46	0x2D2D2D2D ;?ICS?lstr2_Click_SAML_Touch_STM+0
0x1A4A	0x2D2D2D2D ;?ICS?lstr2_Click_SAML_Touch_STM+4
0x1A4E	0x2D2D2D2D ;?ICS?lstr2_Click_SAML_Touch_STM+8
0x1A52	0x2D2D2D2D ;?ICS?lstr2_Click_SAML_Touch_STM+12
0x1A56	0x2D2D2D2D ;?ICS?lstr2_Click_SAML_Touch_STM+16
0x1A5A	0x002D ;?ICS?lstr2_Click_SAML_Touch_STM+20
; end of ?ICS?lstr2_Click_SAML_Touch_STM
;Click_SAML_Touch_STM.c,0 :: ?ICS_timerCounter [4]
0x1A5C	0x00000000 ;?ICS_timerCounter+0
; end of ?ICS_timerCounter
;,0 :: _initBlock_3 [42]
; Containing: ?ICS?lstr3_Click_SAML_Touch_STM [21]
;             ?ICS?lstr4_Click_SAML_Touch_STM [21]
0x1A60	0x74747542 ;_initBlock_3+0 : ?ICS?lstr3_Click_SAML_Touch_STM at 0x1A60
0x1A64	0x32206E6F ;_initBlock_3+4
0x1A68	0x20736920 ;_initBlock_3+8
0x1A6C	0x73657270 ;_initBlock_3+12
0x1A70	0x2E646573 ;_initBlock_3+16
0x1A74	0x74754200 ;_initBlock_3+20 : ?ICS?lstr4_Click_SAML_Touch_STM at 0x1A75
0x1A78	0x206E6F74 ;_initBlock_3+24
0x1A7C	0x73692031 ;_initBlock_3+28
0x1A80	0x65727020 ;_initBlock_3+32
0x1A84	0x64657373 ;_initBlock_3+36
0x1A88	0x002E ;_initBlock_3+40
; end of _initBlock_3
;Click_SAML_Touch_STM.c,0 :: ?ICS?lstr5_Click_SAML_Touch_STM [18]
0x1A8A	0x64696C53 ;?ICS?lstr5_Click_SAML_Touch_STM+0
0x1A8E	0x69207265 ;?ICS?lstr5_Click_SAML_Touch_STM+4
0x1A92	0x63612073 ;?ICS?lstr5_Click_SAML_Touch_STM+8
0x1A96	0x65766974 ;?ICS?lstr5_Click_SAML_Touch_STM+12
0x1A9A	0x002E ;?ICS?lstr5_Click_SAML_Touch_STM+16
; end of ?ICS?lstr5_Click_SAML_Touch_STM
;,0 :: _initBlock_5 [542]
; Containing: ?ICS?lstr6_Click_SAML_Touch_STM [21]
;             ?ICS_demoText [500]
;             ?ICS__samltouch_driver_LUT_START_MARK [21]
0x1A9C	0x64696C53 ;_initBlock_5+0 : ?ICS?lstr6_Click_SAML_Touch_STM at 0x1A9C
0x1AA0	0x70207265 ;_initBlock_5+4
0x1AA4	0x7469736F ;_initBlock_5+8
0x1AA8	0x206E6F69 ;_initBlock_5+12
0x1AAC	0x20207369 ;_initBlock_5+16
0x1AB0	0x00000000 ;_initBlock_5+20 : ?ICS_demoText at 0x1AB1
0x1AB4	0x00000000 ;_initBlock_5+24
0x1AB8	0x00000000 ;_initBlock_5+28
0x1ABC	0x00000000 ;_initBlock_5+32
0x1AC0	0x00000000 ;_initBlock_5+36
0x1AC4	0x00000000 ;_initBlock_5+40
0x1AC8	0x00000000 ;_initBlock_5+44
0x1ACC	0x00000000 ;_initBlock_5+48
0x1AD0	0x00000000 ;_initBlock_5+52
0x1AD4	0x00000000 ;_initBlock_5+56
0x1AD8	0x00000000 ;_initBlock_5+60
0x1ADC	0x00000000 ;_initBlock_5+64
0x1AE0	0x00000000 ;_initBlock_5+68
0x1AE4	0x00000000 ;_initBlock_5+72
0x1AE8	0x00000000 ;_initBlock_5+76
0x1AEC	0x00000000 ;_initBlock_5+80
0x1AF0	0x00000000 ;_initBlock_5+84
0x1AF4	0x00000000 ;_initBlock_5+88
0x1AF8	0x00000000 ;_initBlock_5+92
0x1AFC	0x00000000 ;_initBlock_5+96
0x1B00	0x00000000 ;_initBlock_5+100
0x1B04	0x00000000 ;_initBlock_5+104
0x1B08	0x00000000 ;_initBlock_5+108
0x1B0C	0x00000000 ;_initBlock_5+112
0x1B10	0x00000000 ;_initBlock_5+116
0x1B14	0x00000000 ;_initBlock_5+120
0x1B18	0x00000000 ;_initBlock_5+124
0x1B1C	0x00000000 ;_initBlock_5+128
0x1B20	0x00000000 ;_initBlock_5+132
0x1B24	0x00000000 ;_initBlock_5+136
0x1B28	0x00000000 ;_initBlock_5+140
0x1B2C	0x00000000 ;_initBlock_5+144
0x1B30	0x00000000 ;_initBlock_5+148
0x1B34	0x00000000 ;_initBlock_5+152
0x1B38	0x00000000 ;_initBlock_5+156
0x1B3C	0x00000000 ;_initBlock_5+160
0x1B40	0x00000000 ;_initBlock_5+164
0x1B44	0x00000000 ;_initBlock_5+168
0x1B48	0x00000000 ;_initBlock_5+172
0x1B4C	0x00000000 ;_initBlock_5+176
0x1B50	0x00000000 ;_initBlock_5+180
0x1B54	0x00000000 ;_initBlock_5+184
0x1B58	0x00000000 ;_initBlock_5+188
0x1B5C	0x00000000 ;_initBlock_5+192
0x1B60	0x00000000 ;_initBlock_5+196
0x1B64	0x00000000 ;_initBlock_5+200
0x1B68	0x00000000 ;_initBlock_5+204
0x1B6C	0x00000000 ;_initBlock_5+208
0x1B70	0x00000000 ;_initBlock_5+212
0x1B74	0x00000000 ;_initBlock_5+216
0x1B78	0x00000000 ;_initBlock_5+220
0x1B7C	0x00000000 ;_initBlock_5+224
0x1B80	0x00000000 ;_initBlock_5+228
0x1B84	0x00000000 ;_initBlock_5+232
0x1B88	0x00000000 ;_initBlock_5+236
0x1B8C	0x00000000 ;_initBlock_5+240
0x1B90	0x00000000 ;_initBlock_5+244
0x1B94	0x00000000 ;_initBlock_5+248
0x1B98	0x00000000 ;_initBlock_5+252
0x1B9C	0x00000000 ;_initBlock_5+256
0x1BA0	0x00000000 ;_initBlock_5+260
0x1BA4	0x00000000 ;_initBlock_5+264
0x1BA8	0x00000000 ;_initBlock_5+268
0x1BAC	0x00000000 ;_initBlock_5+272
0x1BB0	0x00000000 ;_initBlock_5+276
0x1BB4	0x00000000 ;_initBlock_5+280
0x1BB8	0x00000000 ;_initBlock_5+284
0x1BBC	0x00000000 ;_initBlock_5+288
0x1BC0	0x00000000 ;_initBlock_5+292
0x1BC4	0x00000000 ;_initBlock_5+296
0x1BC8	0x00000000 ;_initBlock_5+300
0x1BCC	0x00000000 ;_initBlock_5+304
0x1BD0	0x00000000 ;_initBlock_5+308
0x1BD4	0x00000000 ;_initBlock_5+312
0x1BD8	0x00000000 ;_initBlock_5+316
0x1BDC	0x00000000 ;_initBlock_5+320
0x1BE0	0x00000000 ;_initBlock_5+324
0x1BE4	0x00000000 ;_initBlock_5+328
0x1BE8	0x00000000 ;_initBlock_5+332
0x1BEC	0x00000000 ;_initBlock_5+336
0x1BF0	0x00000000 ;_initBlock_5+340
0x1BF4	0x00000000 ;_initBlock_5+344
0x1BF8	0x00000000 ;_initBlock_5+348
0x1BFC	0x00000000 ;_initBlock_5+352
0x1C00	0x00000000 ;_initBlock_5+356
0x1C04	0x00000000 ;_initBlock_5+360
0x1C08	0x00000000 ;_initBlock_5+364
0x1C0C	0x00000000 ;_initBlock_5+368
0x1C10	0x00000000 ;_initBlock_5+372
0x1C14	0x00000000 ;_initBlock_5+376
0x1C18	0x00000000 ;_initBlock_5+380
0x1C1C	0x00000000 ;_initBlock_5+384
0x1C20	0x00000000 ;_initBlock_5+388
0x1C24	0x00000000 ;_initBlock_5+392
0x1C28	0x00000000 ;_initBlock_5+396
0x1C2C	0x00000000 ;_initBlock_5+400
0x1C30	0x00000000 ;_initBlock_5+404
0x1C34	0x00000000 ;_initBlock_5+408
0x1C38	0x00000000 ;_initBlock_5+412
0x1C3C	0x00000000 ;_initBlock_5+416
0x1C40	0x00000000 ;_initBlock_5+420
0x1C44	0x00000000 ;_initBlock_5+424
0x1C48	0x00000000 ;_initBlock_5+428
0x1C4C	0x00000000 ;_initBlock_5+432
0x1C50	0x00000000 ;_initBlock_5+436
0x1C54	0x00000000 ;_initBlock_5+440
0x1C58	0x00000000 ;_initBlock_5+444
0x1C5C	0x00000000 ;_initBlock_5+448
0x1C60	0x00000000 ;_initBlock_5+452
0x1C64	0x00000000 ;_initBlock_5+456
0x1C68	0x00000000 ;_initBlock_5+460
0x1C6C	0x00000000 ;_initBlock_5+464
0x1C70	0x00000000 ;_initBlock_5+468
0x1C74	0x00000000 ;_initBlock_5+472
0x1C78	0x00000000 ;_initBlock_5+476
0x1C7C	0x00000000 ;_initBlock_5+480
0x1C80	0x00000000 ;_initBlock_5+484
0x1C84	0x00000000 ;_initBlock_5+488
0x1C88	0x00000000 ;_initBlock_5+492
0x1C8C	0x00000000 ;_initBlock_5+496
0x1C90	0x00000000 ;_initBlock_5+500
0x1C94	0x00000000 ;_initBlock_5+504
0x1C98	0x00000000 ;_initBlock_5+508
0x1C9C	0x00000000 ;_initBlock_5+512
0x1CA0	0x00000000 ;_initBlock_5+516
0x1CA4	0x00000000 ;_initBlock_5+520 : ?ICS__samltouch_driver_LUT_START_MARK at 0x1CA5
0x1CA8	0x2300002B ;_initBlock_5+524
0x1CAC	0x00240000 ;_initBlock_5+528
0x1CB0	0x005C2500 ;_initBlock_5+532
0x1CB4	0x00000026 ;_initBlock_5+536
0x1CB8	0x0000 ;_initBlock_5+540
; end of _initBlock_5
;__samltouch_driver.c,0 :: ?ICS__samltouch_driver_LUT_END_MARK [18]
0x1CBA	0x3D000000 ;?ICS__samltouch_driver_LUT_END_MARK+0
0x1CBE	0x003F003F ;?ICS__samltouch_driver_LUT_END_MARK+4
0x1CC2	0x00003D00 ;?ICS__samltouch_driver_LUT_END_MARK+8
0x1CC6	0x0D00003A ;?ICS__samltouch_driver_LUT_END_MARK+12
0x1CCA	0x0000 ;?ICS__samltouch_driver_LUT_END_MARK+16
; end of ?ICS__samltouch_driver_LUT_END_MARK
;,0 :: _initBlock_7 [2]
; Containing: ?ICS?lstr1___samltouch_driver [1]
;             ?ICS__samltouch_driver_start_frame [1]
0x1CCC	0x5500 ;_initBlock_7+0 : ?ICS?lstr1___samltouch_driver at 0x1CCC : ?ICS__samltouch_driver_start_frame at 0x1CCD
; end of _initBlock_7
;__samltouch_driver.c,0 :: ?ICS__samltouch_driver_slider_pos [2]
0x1CCE	0x0000 ;?ICS__samltouch_driver_slider_pos+0
; end of ?ICS__samltouch_driver_slider_pos
;__Lib_GPIO_32F10x_Defs.c,732 :: __GPIO_MODULE_USART2_PD56 [108]
0x1CD0	0x00000035 ;__GPIO_MODULE_USART2_PD56+0
0x1CD4	0x00000036 ;__GPIO_MODULE_USART2_PD56+4
0x1CD8	0xFFFFFFFF ;__GPIO_MODULE_USART2_PD56+8
0x1CDC	0x00000000 ;__GPIO_MODULE_USART2_PD56+12
0x1CE0	0x00000000 ;__GPIO_MODULE_USART2_PD56+16
0x1CE4	0x00000000 ;__GPIO_MODULE_USART2_PD56+20
0x1CE8	0x00000000 ;__GPIO_MODULE_USART2_PD56+24
0x1CEC	0x00000000 ;__GPIO_MODULE_USART2_PD56+28
0x1CF0	0x00000000 ;__GPIO_MODULE_USART2_PD56+32
0x1CF4	0x00000000 ;__GPIO_MODULE_USART2_PD56+36
0x1CF8	0x00000000 ;__GPIO_MODULE_USART2_PD56+40
0x1CFC	0x00000000 ;__GPIO_MODULE_USART2_PD56+44
0x1D00	0x00000000 ;__GPIO_MODULE_USART2_PD56+48
0x1D04	0x00000818 ;__GPIO_MODULE_USART2_PD56+52
0x1D08	0x00000018 ;__GPIO_MODULE_USART2_PD56+56
0x1D0C	0x00000000 ;__GPIO_MODULE_USART2_PD56+60
0x1D10	0x00000000 ;__GPIO_MODULE_USART2_PD56+64
0x1D14	0x00000000 ;__GPIO_MODULE_USART2_PD56+68
0x1D18	0x00000000 ;__GPIO_MODULE_USART2_PD56+72
0x1D1C	0x00000000 ;__GPIO_MODULE_USART2_PD56+76
0x1D20	0x00000000 ;__GPIO_MODULE_USART2_PD56+80
0x1D24	0x00000000 ;__GPIO_MODULE_USART2_PD56+84
0x1D28	0x00000000 ;__GPIO_MODULE_USART2_PD56+88
0x1D2C	0x00000000 ;__GPIO_MODULE_USART2_PD56+92
0x1D30	0x00000000 ;__GPIO_MODULE_USART2_PD56+96
0x1D34	0x00000000 ;__GPIO_MODULE_USART2_PD56+100
0x1D38	0x08000008 ;__GPIO_MODULE_USART2_PD56+104
; end of __GPIO_MODULE_USART2_PD56
;__Lib_GPIO_32F10x_Defs.c,712 :: __GPIO_MODULE_USART1_PA9_10 [108]
0x1D3C	0x00000009 ;__GPIO_MODULE_USART1_PA9_10+0
0x1D40	0x0000000A ;__GPIO_MODULE_USART1_PA9_10+4
0x1D44	0xFFFFFFFF ;__GPIO_MODULE_USART1_PA9_10+8
0x1D48	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+12
0x1D4C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+16
0x1D50	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+20
0x1D54	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+24
0x1D58	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+28
0x1D5C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+32
0x1D60	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+36
0x1D64	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+40
0x1D68	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+44
0x1D6C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+48
0x1D70	0x00000818 ;__GPIO_MODULE_USART1_PA9_10+52
0x1D74	0x00000018 ;__GPIO_MODULE_USART1_PA9_10+56
0x1D78	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+60
0x1D7C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+64
0x1D80	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+68
0x1D84	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+72
0x1D88	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+76
0x1D8C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+80
0x1D90	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+84
0x1D94	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+88
0x1D98	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+92
0x1D9C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+96
0x1DA0	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+100
0x1DA4	0x00000004 ;__GPIO_MODULE_USART1_PA9_10+104
; end of __GPIO_MODULE_USART1_PA9_10
;__Lib_GPIO_32F10x_Defs.c,747 :: __GPIO_MODULE_USART3_PD89 [108]
0x1DA8	0x00000038 ;__GPIO_MODULE_USART3_PD89+0
0x1DAC	0x00000039 ;__GPIO_MODULE_USART3_PD89+4
0x1DB0	0xFFFFFFFF ;__GPIO_MODULE_USART3_PD89+8
0x1DB4	0x00000000 ;__GPIO_MODULE_USART3_PD89+12
0x1DB8	0x00000000 ;__GPIO_MODULE_USART3_PD89+16
0x1DBC	0x00000000 ;__GPIO_MODULE_USART3_PD89+20
0x1DC0	0x00000000 ;__GPIO_MODULE_USART3_PD89+24
0x1DC4	0x00000000 ;__GPIO_MODULE_USART3_PD89+28
0x1DC8	0x00000000 ;__GPIO_MODULE_USART3_PD89+32
0x1DCC	0x00000000 ;__GPIO_MODULE_USART3_PD89+36
0x1DD0	0x00000000 ;__GPIO_MODULE_USART3_PD89+40
0x1DD4	0x00000000 ;__GPIO_MODULE_USART3_PD89+44
0x1DD8	0x00000000 ;__GPIO_MODULE_USART3_PD89+48
0x1DDC	0x00000818 ;__GPIO_MODULE_USART3_PD89+52
0x1DE0	0x00000018 ;__GPIO_MODULE_USART3_PD89+56
0x1DE4	0x00000000 ;__GPIO_MODULE_USART3_PD89+60
0x1DE8	0x00000000 ;__GPIO_MODULE_USART3_PD89+64
0x1DEC	0x00000000 ;__GPIO_MODULE_USART3_PD89+68
0x1DF0	0x00000000 ;__GPIO_MODULE_USART3_PD89+72
0x1DF4	0x00000000 ;__GPIO_MODULE_USART3_PD89+76
0x1DF8	0x00000000 ;__GPIO_MODULE_USART3_PD89+80
0x1DFC	0x00000000 ;__GPIO_MODULE_USART3_PD89+84
0x1E00	0x00000000 ;__GPIO_MODULE_USART3_PD89+88
0x1E04	0x00000000 ;__GPIO_MODULE_USART3_PD89+92
0x1E08	0x00000000 ;__GPIO_MODULE_USART3_PD89+96
0x1E0C	0x00000000 ;__GPIO_MODULE_USART3_PD89+100
0x1E10	0x08140030 ;__GPIO_MODULE_USART3_PD89+104
; end of __GPIO_MODULE_USART3_PD89
;easymx_v7_STM32F107VC.c,47 :: __MIKROBUS1_GPIO [96]
0x1E14	0xFFFFFFFF ;__MIKROBUS1_GPIO+0
0x1E18	0xFFFFFFFF ;__MIKROBUS1_GPIO+4
0x1E1C	0xFFFFFFFF ;__MIKROBUS1_GPIO+8
0x1E20	0xFFFFFFFF ;__MIKROBUS1_GPIO+12
0x1E24	0xFFFFFFFF ;__MIKROBUS1_GPIO+16
0x1E28	0xFFFFFFFF ;__MIKROBUS1_GPIO+20
0x1E2C	0xFFFFFFFF ;__MIKROBUS1_GPIO+24
0x1E30	0xFFFFFFFF ;__MIKROBUS1_GPIO+28
0x1E34	0xFFFFFFFF ;__MIKROBUS1_GPIO+32
0x1E38	0xFFFFFFFF ;__MIKROBUS1_GPIO+36
0x1E3C	0xFFFFFFFF ;__MIKROBUS1_GPIO+40
0x1E40	0xFFFFFFFF ;__MIKROBUS1_GPIO+44
0x1E44	0xFFFFFFFF ;__MIKROBUS1_GPIO+48
0x1E48	0xFFFFFFFF ;__MIKROBUS1_GPIO+52
0x1E4C	0xFFFFFFFF ;__MIKROBUS1_GPIO+56
0x1E50	0xFFFFFFFF ;__MIKROBUS1_GPIO+60
0x1E54	0xFFFFFFFF ;__MIKROBUS1_GPIO+64
0x1E58	0xFFFFFFFF ;__MIKROBUS1_GPIO+68
0x1E5C	0xFFFFFFFF ;__MIKROBUS1_GPIO+72
0x1E60	0xFFFFFFFF ;__MIKROBUS1_GPIO+76
0x1E64	0xFFFFFFFF ;__MIKROBUS1_GPIO+80
0x1E68	0xFFFFFFFF ;__MIKROBUS1_GPIO+84
0x1E6C	0xFFFFFFFF ;__MIKROBUS1_GPIO+88
0x1E70	0xFFFFFFFF ;__MIKROBUS1_GPIO+92
; end of __MIKROBUS1_GPIO
;__samltouch_driver.c,0 :: ?ICS__samltouch_driver_createEvent_tmp_L0 [17]
0x1E74	0x00000000 ;?ICS__samltouch_driver_createEvent_tmp_L0+0
0x1E78	0x00000000 ;?ICS__samltouch_driver_createEvent_tmp_L0+4
0x1E7C	0x00000000 ;?ICS__samltouch_driver_createEvent_tmp_L0+8
0x1E80	0x00000000 ;?ICS__samltouch_driver_createEvent_tmp_L0+12
0x1E84	0x00 ;?ICS__samltouch_driver_createEvent_tmp_L0+16
; end of ?ICS__samltouch_driver_createEvent_tmp_L0
;Click_SAML_Touch_STM.c,8 :: __SAMLTOUCH_UART_CFG [16]
0x1E88	0x0001C200 ;__SAMLTOUCH_UART_CFG+0
0x1E8C	0x00000000 ;__SAMLTOUCH_UART_CFG+4
0x1E90	0x00000000 ;__SAMLTOUCH_UART_CFG+8
0x1E94	0x00000000 ;__SAMLTOUCH_UART_CFG+12
; end of __SAMLTOUCH_UART_CFG
;__Lib_System_105_107.c,451 :: __Lib_System_105_107_APBAHBPrescTable [16]
0x1E98	0x00000000 ;__Lib_System_105_107_APBAHBPrescTable+0
0x1E9C	0x04030201 ;__Lib_System_105_107_APBAHBPrescTable+4
0x1EA0	0x04030201 ;__Lib_System_105_107_APBAHBPrescTable+8
0x1EA4	0x09080706 ;__Lib_System_105_107_APBAHBPrescTable+12
; end of __Lib_System_105_107_APBAHBPrescTable
;easymx_v7_STM32F107VC.c,15 :: __MIKROBUS1_UART [12]
0x1EA8	0x00000BDD ;__MIKROBUS1_UART+0
0x1EAC	0x00000B05 ;__MIKROBUS1_UART+4
0x1EB0	0x00000ABD ;__MIKROBUS1_UART+8
; end of __MIKROBUS1_UART
;__Lib_System_105_107.c,452 :: __Lib_System_105_107_ADCPrescTable [4]
0x1EB4	0x08060402 ;__Lib_System_105_107_ADCPrescTable+0
; end of __Lib_System_105_107_ADCPrescTable
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0150     [140]    _GPIO_Clk_Enable
0x01DC     [500]    _GPIO_Config
0x03D0      [12]    _Get_Fosc_kHz
0x03DC     [152]    __Lib_GPIO_32F10x_GPIO_Configure_Pin
0x0474     [272]    _GPIO_Alternate_Function_Enable
0x0584     [168]    _RCC_GetClocksFrequency
0x062C      [12]    __Lib_UART_123_45_UARTx_Tx_Idle
0x0638      [42]    __samltouch_driver__strchr
0x0664      [34]    __samltouch_driver__strlen
0x0688      [22]    __Lib_UART_123_45_UARTx_Read
0x06A0      [30]    __Lib_UART_123_45_UARTx_Write
0x06C0      [90]    __samltouch_driver__strncmp
0x071C     [580]    __Lib_UART_123_45_UARTx_Init_Advanced
0x0960      [12]    __Lib_UART_123_45_UARTx_Data_Ready
0x096C      [24]    _UART1_Read
0x0984      [24]    _UART4_Tx_Idle
0x099C     [168]    _samltouch_parser
0x0A44      [24]    _UART5_Read
0x0A5C      [24]    _UART5_Tx_Idle
0x0A74      [24]    _UART5_Data_Ready
0x0A8C      [24]    _UART1_Data_Ready
0x0AA4      [24]    _UART3_Tx_Idle
0x0ABC      [24]    _UART3_Data_Ready
0x0AD4      [24]    _UART4_Data_Ready
0x0AEC      [24]    _UART4_Read
0x0B04      [24]    _UART3_Read
0x0B1C      [24]    _UART2_Read
0x0B34      [24]    _UART1_Tx_Idle
0x0B4C      [24]    _UART2_Tx_Idle
0x0B64      [24]    _UART2_Data_Ready
0x0B7C      [28]    _UART5_Write
0x0B98      [40]    _UART2_Init_Advanced
0x0BC0      [28]    _UART1_Write
0x0BDC      [28]    _UART3_Write
0x0BF8      [28]    _UART4_Write
0x0C14      [28]    _UART2_Write
0x0C30      [88]    __samltouch_driver_locateHandler
0x0C88     [190]    __samltouch_driver_searchLut
0x0D48      [50]    __samltouch_driver__strncpy
0x0D7C      [40]    _UART3_Init_Advanced
0x0DA4      [40]    _UART1_Init_Advanced
0x0DCC      [56]    easymx_v7_STM32F107VC__log_initUartA
0x0E04      [56]    easymx_v7_STM32F107VC__log_init2
0x0E3C      [56]    easymx_v7_STM32F107VC__uartInit_1
0x0E74      [80]    _WordToStr
0x0EC4      [56]    easymx_v7_STM32F107VC__log_init1
0x0EFC      [56]    easymx_v7_STM32F107VC__uartInit_2
0x0F34      [56]    easymx_v7_STM32F107VC__log_initUartB
0x0F6C      [14]    _EnableInterrupts
0x0F7C      [28]    __samltouch_driver_hal_uartRead
0x0F98     [120]    _NVIC_IntEnable
0x1010     [212]    __samltouch_driver_createEvent
0x10E4     [128]    _samltouch_putc
0x1164      [40]    __samltouch_driver_hal_uartMap
0x118C      [32]    easymx_v7_STM32F107VC__log_write
0x11AC      [28]    __samltouch_driver_hal_uartReady
0x11C8      [24]    _samltouch_default_handler
0x11E0       [2]    __samltouch_driver_hal_gpioMap
0x11E4      [46]    __samltouch_driver_generateHash
0x1214     [110]    _IntToStr
0x1284     [112]    _mikrobus_logWrite
0x12F4      [88]    Click_SAML_Touch_STM_samltouch_configTimer
0x134C      [46]    _mikrobus_uartInit
0x137C      [70]    _mikrobus_logInit
0x13C4      [28]    _samltouch_uartDriverInit
0x13E0      [12]    _samltouch_hfcEnable
0x13EC     [328]    _samltouch_process
0x1534     [220]    _samltouch_coreInit
0x1610      [20]    ___CC2DW
0x1624     [156]    _samltouch_tick
0x16C0     [108]    __Lib_System_105_107_SystemClockSetDefault
0x172C      [58]    ___FillZeros
0x1768     [156]    _applicationTask
0x1804      [64]    _applicationInit
0x1844      [64]    _systemInit
0x1884       [8]    ___GenExcept
0x188C      [44]    _Timer_interrupt
0x18B8     [324]    __Lib_System_105_107_InitialSetUpRCCRCC2
0x19FC      [32]    _main
0x1A1C      [20]    __Lib_System_105_107_InitialSetUpFosc
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x20000000      [22]    ?lstr1_Click_SAML_Touch_STM
0x20000016      [22]    ?lstr2_Click_SAML_Touch_STM
0x2000002C       [4]    _timerCounter
0x20000030      [21]    ?lstr3_Click_SAML_Touch_STM
0x20000045      [21]    ?lstr4_Click_SAML_Touch_STM
0x2000005A      [18]    ?lstr5_Click_SAML_Touch_STM
0x2000006C      [21]    ?lstr6_Click_SAML_Touch_STM
0x20000081     [500]    _demoText
0x20000275      [21]    __samltouch_driver_LUT_START_MARK
0x2000028A      [18]    __samltouch_driver_LUT_END_MARK
0x2000029C       [1]    ?lstr1___samltouch_driver
0x2000029D       [1]    __samltouch_driver_start_frame
0x2000029E       [2]    __samltouch_driver_slider_pos
0x200002A0       [6]    _SAML_Touch
0x200002A6       [1]    __samltouch_driver_f_sequence_active
0x200002A7       [1]    __samltouch_driver_f_buffer_warning
0x200002A8       [4]    _logger
0x200002AC       [4]    ___System_CLOCK_IN_KHZ
0x200002B0       [4]    _UART_Wr_Ptr
0x200002B4       [4]    _UART_Rd_Ptr
0x200002B8       [4]    _UART_Rdy_Ptr
0x200002BC       [4]    _UART_Tx_Idle_Ptr
0x200002C0     [516]    __samltouch_driver_hdlBuff
0x200004C4       [1]    __samltouch_driver_f_response_ready
0x200004C5       [1]    __samltouch_driver_f_wdog_timeout
0x200004C6    [1002]    __samltouch_driver_rxBuff
0x200008B0       [4]    __samltouch_driver_c_watchdog_timer
0x200008B4       [1]    __samltouch_driver_f_watchdog_active
0x200008B5       [1]    __samltouch_driver_f_timer_active
0x200008B6       [1]    __samltouch_driver_f_hfc_active
0x200008B8       [4]    __samltouch_driver_c_timer
0x200008BC       [4]    __samltouch_driver_fp_uartWrite
0x200008C0       [4]    __samltouch_driver_fp_uartRead
0x200008C4       [4]    __samltouch_driver_fp_uartReady
0x200008C8      [12]    __samltouch_driver_currentEv
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x1A30      [22]    ?ICS?lstr1_Click_SAML_Touch_STM
0x1A46      [22]    ?ICS?lstr2_Click_SAML_Touch_STM
0x1A5C       [4]    ?ICS_timerCounter
0x1A60      [21]    ?ICS?lstr3_Click_SAML_Touch_STM
0x1A75      [21]    ?ICS?lstr4_Click_SAML_Touch_STM
0x1A8A      [18]    ?ICS?lstr5_Click_SAML_Touch_STM
0x1A9C      [21]    ?ICS?lstr6_Click_SAML_Touch_STM
0x1AB1     [500]    ?ICS_demoText
0x1CA5      [21]    ?ICS__samltouch_driver_LUT_START_MARK
0x1CBA      [18]    ?ICS__samltouch_driver_LUT_END_MARK
0x1CCC       [1]    ?ICS?lstr1___samltouch_driver
0x1CCD       [1]    ?ICS__samltouch_driver_start_frame
0x1CCE       [2]    ?ICS__samltouch_driver_slider_pos
0x1CD0     [108]    __GPIO_MODULE_USART2_PD56
0x1D3C     [108]    __GPIO_MODULE_USART1_PA9_10
0x1DA8     [108]    __GPIO_MODULE_USART3_PD89
0x1E14      [96]    __MIKROBUS1_GPIO
0x1E74      [17]    ?ICS__samltouch_driver_createEvent_tmp_L0
0x1E88      [16]    __SAMLTOUCH_UART_CFG
0x1E98      [16]    __Lib_System_105_107_APBAHBPrescTable
0x1EA8      [12]    __MIKROBUS1_UART
0x1EB4       [4]    __Lib_System_105_107_ADCPrescTable

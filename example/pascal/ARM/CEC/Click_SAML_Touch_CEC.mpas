{*
Example for SAML_Touch Click

    Date          : Nov 2017.
    Author        : MikroE Team

Test configuration CEC :
    
    MCU              : CEC1302
    Dev. Board       : Clicker 2 for CEC1302
    ARM Compiler ver : v6.1.0.0

---

Description :

The application is composed of three sections :

- System Initialization - Initializes all necessary GPIO pins, UART used for
the communcation with GSM module and UART used for infromation logging
- Application Initialization - Initializes driver, power on module and sends few
command for the default module configuration
- Application Task - running in parallel core state machine and checks for call flag. 
If call detected parser will hang up call.

Additional Functions :

All additional functions such as timer initialization and default handler. 

Notes :

- Echo must be turned off for succefull parsing. ( ATE0 )
- UART polling works much better with HFC enabled.
- In case of usage of other MCUs Timer initialization must be adjusted according to your MCU.

*}
program Click_SAMLTOUCH_CEC;

uses Click_SAML_Touch_types, Click_SAML_Touch_config, Click_SAML_Touch_timer;

var
    // COMMANDS
    SAMLTOUCH_AT : string[3];
    SAMLTOUCH_HANGUP : string[4];
    SAMLTOUCH_ECHO_OFF : string[5];
    SAMLTOUCH_FORMAT_DEFAULT : string[10];
    SAMLTOUCH_HFC_ENABLE : string[11];

    // CALLER FLAG
    callFlag : uint8_t; 

procedure samltouch_default_handler(rsp : ^uint8_t; evArgs : ^uint8_t);
var
    ptr_rsp  : ^char;

begin
    ptr_rsp := rsp + 2;

    if (ptr_rsp^ = 82) then
    begin
        callFlag := 1; 
    end; 

    mikrobus_logWrite( ptr_rsp - 2, _LOG_TEXT );

end;


procedure systemInit(); 
begin
    SAMLTOUCH_AT := 'AT';
    SAMLTOUCH_HANGUP := 'ATH';
    SAMLTOUCH_ECHO_OFF := 'ATE0';
    SAMLTOUCH_FORMAT_DEFAULT := 'AT+CMGF=1';
    SAMLTOUCH_HFC_ENABLE := 'AT+IFC=2,2';

    callFlag := 0;

    mikrobus_gpioInit( _MIKROBUS1, _MIKROBUS_AN_PIN, _GPIO_INPUT );
    mikrobus_gpioInit( _MIKROBUS1, _MIKROBUS_PWM_PIN, _GPIO_INPUT );
    mikrobus_gpioInit( _MIKROBUS1, _MIKROBUS_INT_PIN, _GPIO_INPUT );
    mikrobus_gpioInit( _MIKROBUS1, _MIKROBUS_RST_PIN, _GPIO_OUTPUT );
    mikrobus_gpioInit( _MIKROBUS1, _MIKROBUS_CS_PIN, _GPIO_OUTPUT );    
    mikrobus_uartInit(_MIKROBUS1, @_SAMLTOUCH_UART_CFG[0]); 
    mikrobus_logInit(_MIKROBUS2, 9600); 

end;

procedure applicationInit(); 
begin

// TIMER INIT
    samltouch_configTimer();  

// DRIVER INIT
    samltouch_uartDriverInit(T_SAMLTOUCH_P(@_MIKROBUS1_GPIO), T_SAMLTOUCH_P(@_MIKROBUS1_UART)); 
    samltouch_coreInit(@samltouch_default_handler, 1500);

// MODULE POWER ON
    samltouch_hfcEnable(true); 
    samltouch_modulePower(true); 

// MODULE INIT
    samltouch_cmdSingle(@SAMLTOUCH_AT[0]); 
    samltouch_cmdSingle(@SAMLTOUCH_AT[0]); 
    samltouch_cmdSingle(@SAMLTOUCH_AT[0]); 
    samltouch_cmdSingle(@SAMLTOUCH_ECHO_OFF[0]); 
    samltouch_cmdSingle(@SAMLTOUCH_HFC_ENABLE[0]); 
    samltouch_cmdSingle(@SAMLTOUCH_FORMAT_DEFAULT[0]); 

end;

procedure applicationTask(); 
begin

    samltouch_process(); 

    if ((0 <> callFlag)) then 
    begin
        samltouch_cmdSingle(@SAMLTOUCH_HANGUP[0]); 
        Delay_ms(3000); 

        callFlag := 0; 
    end;
end;

begin

    systemInit(); 
    applicationInit(); 
    while (1) do 
    begin 
        applicationTask(); 
    end;

end.